package de.verdox.mccreativelab;

import de.verdox.mccreativelab.debug.*;
import de.verdox.mccreativelab.event.MCCreativeLabReloadEvent;
import de.verdox.mccreativelab.features.Feature;
import de.verdox.mccreativelab.features.Features;
import de.verdox.mccreativelab.features.legacy.LegacyFeatures;
import de.verdox.mccreativelab.generator.AssetPath;
import de.verdox.mccreativelab.generator.MCCGeneratorHelper;
import de.verdox.mccreativelab.generator.ResourcePackFileHoster;
import de.verdox.mccreativelab.generator.resourcepack.CustomResourcePack;
import de.verdox.mccreativelab.generator.resourcepack.ResourcePackScanner;
import de.verdox.mccreativelab.generator.resourcepack.types.hud.renderer.HudRenderer;
import de.verdox.mccreativelab.impl.mcclab.platform.MCCLabPlatform;
import de.verdox.mccreativelab.impl.paper.plugin.MCCPaperPlatformPlugin;
import de.verdox.mccreativelab.impl.paper.plugin.MCCPaperPluginLoader;
import de.verdox.mccreativelab.platform.GeneratorPlatformHelper;
import de.verdox.mccreativelab.registry.CustomRegistry;
import de.verdox.mccreativelab.registry.RegistryLookUpCommand;
import de.verdox.mccreativelab.util.PlayerAsyncRayTracer;
import de.verdox.mccreativelab.util.nbt.PersistentDataSaver;
import de.verdox.mccreativelab.world.CustomEventsCaller;
import de.verdox.mccreativelab.world.block.*;
import de.verdox.mccreativelab.world.block.entity.FakeBlockEntityListener;
import de.verdox.mccreativelab.world.block.replaced.ReplacedBlocks;
import de.verdox.mccreativelab.world.item.FakeItemListener;
import de.verdox.mccreativelab.world.item.FakeItemRegistry;
import de.verdox.mccreativelab.wrapper.platform.MCCPlatform;
import org.bukkit.Bukkit;
import org.bukkit.World;
import org.bukkit.entity.Player;
import org.bukkit.event.server.ServerLoadEvent;
import org.bukkit.plugin.java.JavaPlugin;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.function.BiConsumer;
import java.util.stream.Stream;

public class MCCreativeLabExtension extends MCCPaperPlatformPlugin {
    public static MCCreativeLabExtension getInstance() {
        return INSTANCE;
    }

    private static MCCreativeLabExtension INSTANCE;
    private static ResourcePackFileHoster resourcePackFileHoster;
    private static CustomResourcePack customResourcePack;
    private static Features features;
    private static ServerSoftwareExclusives serverSoftwareExclusives;
    private static ExtensionFeatures extensionFeatures;

    public static void needsServerSoftware() {
        if (!isServerSoftware())
            throw new IllegalStateException("This feature is not available without the MCCreativeLab Paper Fork. You are running " + Bukkit.getServer().getName());
    }

    @Deprecated
    public static boolean isServerSoftware() {
        return MCCUtil.getInstance().isMCCreativeLabServerSoftware();
    }

    @Override
    public void onLoad() {
        super.onLoad();
        INSTANCE = this;

        File templateFolder = new File(getDataFolder() + "/rp/template/");
        File fileStorage = new File(getDataFolder() + "/rp/settings/");

        templateFolder.mkdirs();
        fileStorage.mkdirs();

        customResourcePack = new CustomResourcePack("MCCreativeLab", 18, "Generated by MCCreativeLab", AssetPath.buildPath("resourcePacks"), templateFolder, fileStorage);
        MCCGeneratorHelper mccGeneratorHelper = new MCCGeneratorHelper(this, customResourcePack);
        GeneratorPlatformHelper.INSTANCE.setup(mccGeneratorHelper, platformHelper -> {});

        extensionFeatures = new ExtensionFeatures();
        extensionFeatures.onLoad();
        if (isServerSoftware()) {
            serverSoftwareExclusives = new ServerSoftwareExclusives();
            serverSoftwareExclusives.onLoad();
        }
        features = new Features();
        try {
            resourcePackFileHoster = new ResourcePackFileHoster(getDataFolder());
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        if (isServerSoftware())
            Bukkit.getLogger().info("§eFound MCCreativeLab Server Software");
        else
            Bukkit.getLogger().warning("§cConsider running MCCreativeLab Server Software");
        if (isServerSoftware()) {
            //Debug.init();
            ReplacedBlocks.init();
        }
    }

    @Override
    public void onEnable() {
        super.onEnable();
        extensionFeatures.onEnable();
        Bukkit.getPluginManager().registerEvents(extensionFeatures, this);
        Bukkit.getPluginManager().registerEvents(new CustomEventsCaller(), this);

        if (isServerSoftware()) {
            Bukkit.getPluginManager().registerEvents(serverSoftwareExclusives, this);
            serverSoftwareExclusives.onEnable();
        }

        PlayerAsyncRayTracer.startAsyncRaytracer(this);


        if (isServerSoftware()) {
            Bukkit.getPluginManager().registerEvents(new Debug(), this);
            Bukkit.getPluginManager().registerEvents(new FakeBlockEntityListener(), this);
            Bukkit.getPluginManager().registerEvents(new FakeBlockListener(), this);
            Bukkit.getCommandMap().register("fakeblock", "mccreativelab", new FakeBlockCommand());
            Bukkit.getCommandMap().register("fakeitem", "mccreativelab", new FakeItemCommand());
            Bukkit.getPluginManager().registerEvents(new FakeItemListener(), this);
            Bukkit.getPluginManager().registerEvents(new PersistentDataSaver(), this);
        }
        //TODO: Server Software exclusive debug commands
        //Bukkit.getCommandMap().register("debug", "mccreativelab", new DebugCommand());
    }

    public static <T> void registerRegistryLookupCommand(String name, CustomRegistry<T> customRegistry, BiConsumer<Player, T> consumer) {
        Bukkit.getCommandMap().register(name, new RegistryLookUpCommand<>(name, customRegistry, consumer));
    }

    public void onServerLoad(ServerLoadEvent.LoadType loadType) {
        if (isServerSoftware())
            serverSoftwareExclusives.onServerLoad(loadType);
        extensionFeatures.onServerLoad(loadType);
        if (loadType.equals(ServerLoadEvent.LoadType.STARTUP)) {
            if (createResourcePack()) {
                getResourcePackFileHoster().sendDefaultResourcePackToPlayers(MCCPlatform.getInstance().getOnlinePlayers());
            }
            Bukkit.getLogger().info("MCCreativeLabExtension started");
        } else {
            buildPackAndZipFiles(true);
            getResourcePackFileHoster().sendDefaultResourcePackToPlayers(MCCPlatform.getInstance().getOnlinePlayers());
            Bukkit.getLogger().info("MCCreativeLabExtension reloaded");
        }

        FakeBlockRegistry.getReusedBlockStates().forEach((blockData, fakeBlockState) -> Bukkit.getLogger().info(fakeBlockState.toString() + " mapped to " + fakeBlockState));
    }

    boolean createResourcePack() {
        if (isServerSoftware()) {
            getFakeBlockRegistry().values().forEachRemaining(fakeBlock -> {
                for (FakeBlock.FakeBlockState fakeBlockState : fakeBlock.getFakeBlockStates())
                    customResourcePack.register(fakeBlockState.getFakeBlockDisplay());
            });
        }

        return buildPackAndZipFiles(false);
    }

    boolean buildPackAndZipFiles(boolean doReload) {
        try {
            mergeOtherPacksIntoMainPack(getCustomResourcePack().getPathToSavePackDataTo().toPath().toFile(), getCustomResourcePack());

            if (isServerSoftware()) {
                if (!getFakeBlockRegistry().isEmpty()) {
                    try {
                        FakeBlock.FakeBlockHitbox.makeHitBoxesInvisible(getCustomResourcePack());
                    } catch (IOException e) {
                        throw new RuntimeException(e);
                    }
                }
            }
            getCustomResourcePack().installPack(doReload);
            getResourcePackFileHoster().createResourcePackZipFiles();
        } catch (IOException ex) {
            ex.printStackTrace();
            return false;
        }
        return true;
    }

    private void mergeOtherPacksIntoMainPack(File mainPackFolder, CustomResourcePack customResourcePack) throws IOException {
        Path pathToWalk = CustomResourcePack.resourcePacksFolder.toPath();
        if (!pathToWalk.toFile().exists())
            return;
        try (Stream<Path> stream = Files.walk(CustomResourcePack.resourcePacksFolder.toPath(), 1)) {
            stream.skip(1).forEach(path -> {
                if (path.equals(mainPackFolder.toPath()))
                    return;
                if (!path.toFile().isDirectory())
                    return;
                Bukkit.getLogger().info("Merging " + path + " into main pack");
                try {
                    ResourcePackScanner resourcePackScanner = new ResourcePackScanner(path);
                    resourcePackScanner.scan();
                    resourcePackScanner.getResources().forEach(customResourcePack::register);
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            });
        }
    }

    @Override
    public void onDisable() {
        if (isServerSoftware())
            serverSoftwareExclusives.onDisable();
        extensionFeatures.onDisable();

        try {
            MCCreativeLabExtension.getCustomResourcePack().onShutdown();
        } catch (IOException e) {
            e.printStackTrace();
        }
        Feature.disable();
        getLogger().info("Saving fake block storage... ");
/*        if(isServerSoftware())
            getFakeBlockStorage().saveAll();*/
        getLogger().info("Saving worlds... ");
        for (World world : Bukkit.getWorlds())
            world.save();
        try {
            getLogger().info("Shutting down resource pack hoster... ");
            resourcePackFileHoster.closeAndWait();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    public void reloadPlugin() {
        Bukkit.getPluginManager().callEvent(new MCCreativeLabReloadEvent());
    }

    @OnlyServerSoftware
    public static FakeBlockRegistry getFakeBlockRegistry() {
        needsServerSoftware();
        return ServerSoftwareExclusives.getFakeBlockRegistry();
    }

    @OnlyServerSoftware
    public static FakeItemRegistry getFakeItemRegistry() {
        needsServerSoftware();
        return ServerSoftwareExclusives.getFakeItemRegistry();
    }

    @OnlyServerSoftware
    public static FakeBlockStorage getFakeBlockStorage() {
        needsServerSoftware();
        return ServerSoftwareExclusives.getFakeBlockStorage();
    }

    @OnlyServerSoftware
    public static LegacyFeatures getLegacyFeatures() {
        needsServerSoftware();
        return ServerSoftwareExclusives.getLegacyFeatures();
    }

    public static ResourcePackFileHoster getResourcePackFileHoster() {
        return resourcePackFileHoster;
    }

    public static CustomResourcePack getCustomResourcePack() {
        return customResourcePack;
    }

    public static HudRenderer getHudRenderer() {
        return extensionFeatures.getHudRenderer();
    }

    @OnlyServerSoftware
    public ServerSoftwareExclusives getServerSoftwareExclusives() {
        needsServerSoftware();
        return serverSoftwareExclusives;
    }

    public static Features getFeatures() {
        return features;
    }
}
