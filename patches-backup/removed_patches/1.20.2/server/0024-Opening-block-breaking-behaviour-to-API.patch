From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: derverdox <lukasjonsson@outlook.de>
Date: Mon, 20 Nov 2023 18:15:19 +0100
Subject: [PATCH] Opening block breaking behaviour to API


diff --git a/src/main/java/de/verdox/mccreativelab/block/CustomBlockBreakSpeed.java b/src/main/java/de/verdox/mccreativelab/block/CustomBlockBreakSpeed.java
new file mode 100644
index 0000000000000000000000000000000000000000..1b54a2ac143c4c725368dcb8d4b5cf71c24605d1
--- /dev/null
+++ b/src/main/java/de/verdox/mccreativelab/block/CustomBlockBreakSpeed.java
@@ -0,0 +1,180 @@
+package de.verdox.mccreativelab.block;
+
+import de.verdox.mccreativelab.behaviour.BlockBreakBehaviour;
+import net.minecraft.core.BlockPos;
+import net.minecraft.core.Direction;
+import net.minecraft.network.protocol.game.ClientboundBlockDestructionPacket;
+import net.minecraft.network.protocol.game.ServerboundPlayerActionPacket;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.world.InteractionHand;
+import net.minecraft.world.effect.MobEffects;
+import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.item.enchantment.EnchantmentHelper;
+import net.minecraft.world.level.block.Block;
+import net.minecraft.world.level.block.state.BlockState;
+import org.bukkit.Material;
+import org.bukkit.World;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.craftbukkit.block.CraftBlock;
+import org.bukkit.event.block.BlockDamageEvent;
+import org.bukkit.potion.PotionEffect;
+import org.bukkit.potion.PotionEffectType;
+
+import java.util.HashMap;
+import java.util.Map;
+import java.util.concurrent.ThreadLocalRandom;
+
+public class CustomBlockBreakSpeed {
+    private static final Map<Player, BlockBreakProgress> map = new HashMap<>();
+    public static void startBlockBreakAction(ServerPlayer player, BlockPos pos, ServerboundPlayerActionPacket.Action action, Direction direction, int worldHeight) {
+        if(map.containsKey(player))
+            stopAllBlockBreakActions(player);
+
+        ServerLevel serverLevel = ((CraftWorld) player.getBukkitEntity().getWorld()).getHandle();
+        Block block = serverLevel.getBlockIfLoaded(pos);
+        Material bukkitMaterial = block.defaultBlockState().getBukkitMaterial();
+        if(!BlockBreakBehaviour.BLOCK_BREAK_BEHAVIOUR.isImplemented(bukkitMaterial))
+            return;
+        float customHardness = BlockBreakBehaviour.BLOCK_BREAK_BEHAVIOUR.getBehaviour(bukkitMaterial).calculateHardness(player.getBukkitEntity(), serverLevel.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ()));
+        map.put(player, new BlockBreakProgress(player, serverLevel, pos, customHardness));
+    }
+
+    public static void stopBlockBreakAction(Player player, BlockPos pos, ServerboundPlayerActionPacket.Action action, Direction direction, int worldHeight) {
+        if(!map.containsKey(player))
+            return;
+        map.remove(player).resetBlockDamage();
+    }
+
+    public static void stopAllBlockBreakActions(Player player) {
+        if(!map.containsKey(player))
+            return;
+        map.remove(player).resetBlockDamage();
+    }
+
+    public static void tick(ServerPlayer player) {
+        if(!map.containsKey(player))
+            return;
+        var data = map.get(player);
+        data.incrementTicks();
+    }
+
+    public static class BlockBreakProgress {
+        private final ServerPlayer serverPlayer;
+        private final ServerLevel serverLevel;
+        private final BlockPos blockPos;
+        private final float hardness;
+        private float damageTaken;
+        private int lastStage = -1;
+        private final int[] idsPerStage = new int[10];
+
+        public BlockBreakProgress(ServerPlayer serverPlayer, ServerLevel serverLevel, BlockPos blockPos, float hardness){
+            this.serverPlayer = serverPlayer;
+            this.serverLevel = serverLevel;
+            this.blockPos = blockPos;
+            this.hardness = hardness;
+        }
+
+        public void incrementTicks(){
+            var totalTimeInTicks = calculateBreakTime();
+            damageTaken += (1f / totalTimeInTicks);
+            damageTaken = Math.min(1, damageTaken);
+            serverPlayer.getBukkitEntity().addPotionEffect(new PotionEffect(PotionEffectType.SLOW_DIGGING, 3, -1, false, false, false));
+
+            int stage = (int) (damageTaken * 10) - 1;
+
+            if(stage != lastStage) {
+                if(stage < 0 || stage > 9){
+                    System.out.println("ERROR stage is "+stage+" because damageTaken is "+damageTaken+" because totalTimeInTicks is "+totalTimeInTicks);
+                    return;
+                }
+
+                for(int i = lastStage + 1; i <= stage; i++){
+                    var entityID = getDestructionID(i);
+                    sendBlockDamage(i, entityID);
+                }
+                lastStage = stage;
+            }
+
+            if(stage == 9){
+                ServerLevel serverLevel = ((CraftWorld) serverPlayer.getBukkitEntity().getWorld()).getHandle();
+                BlockState state = serverLevel.getBlockStateIfLoaded(blockPos);
+                Block block = state.getBlock();
+
+                if (state.getBlock() instanceof net.minecraft.world.level.block.BaseFireBlock)
+                    serverLevel.levelEvent(net.minecraft.world.level.block.LevelEvent.SOUND_EXTINGUISH_FIRE, blockPos, 0);
+                 else
+                    serverLevel.levelEvent(net.minecraft.world.level.block.LevelEvent.PARTICLES_DESTROY_BLOCK, blockPos, Block.getId(state));
+
+                serverPlayer.gameMode.destroyBlock(blockPos);
+                stopAllBlockBreakActions(serverPlayer);
+            }
+        }
+
+        public void resetBlockDamage(){
+            for (int id : idsPerStage) {
+                sendBlockDamage(-1, id);
+            }
+        }
+
+        public int getDestructionID(int stage) {
+            if(idsPerStage[stage] == 0)
+                idsPerStage[stage] = ThreadLocalRandom.current().nextInt(1000);
+            return idsPerStage[stage];
+        }
+
+        private void sendBlockDamage(int stage, int id){
+            var packet = new ClientboundBlockDestructionPacket(id, blockPos, stage);
+            serverPlayer.connection.send(packet);
+            serverLevel.destroyBlockProgress(id, blockPos, stage);
+        }
+
+        public BlockState getBlockState(){
+            return serverLevel.getBlockStateIfLoaded(blockPos);
+        }
+
+        // This formula is taken from
+        // https://minecraft.fandom.com/wiki/Breaking
+        public int calculateBreakTime() {
+            double multiplier = 1.0D;
+            ItemStack hand = serverPlayer.getItemInHand(InteractionHand.MAIN_HAND);
+            BlockState blockState = getBlockState();
+            float breakTime = hardness;
+
+            boolean isPreferredTool = !blockState.requiresCorrectToolForDrops() || hand.isCorrectToolForDrops(blockState);
+
+            if(isPreferredTool){
+                multiplier = hand.getDestroySpeed(blockState);
+
+                // canHarvest
+                if(hand.isCorrectToolForDrops(blockState)){
+                    int efficiencyLevel = EnchantmentHelper.getBlockEfficiency(serverPlayer);
+                    if(efficiencyLevel > 0)
+                        multiplier += (efficiencyLevel ^ 2) + 1;
+                }
+                else
+                    multiplier = 1.0;
+            }
+
+            // Haste effect
+            if(serverPlayer.activeEffects.containsKey(MobEffects.DIG_SPEED))
+                multiplier *= 0.2D * serverPlayer.getEffect(MobEffects.DIG_SPEED).getAmplifier() + 1.0D;
+            // water check
+            if(serverPlayer.isInWater() && EnchantmentHelper.hasAquaAffinity(serverPlayer))
+                multiplier /= 5.0D;
+            // in air check
+            if(!serverPlayer.onGround())
+                multiplier /= 5.0D;
+
+            double blockDamage = multiplier / breakTime;
+
+            if(isPreferredTool)
+                blockDamage /= 30.0;
+            else
+                blockDamage /= 100.0;
+            breakTime = blockDamage >= 1 ? 0 : (int) Math.ceil(1.0D / blockDamage);
+            return (int) breakTime;
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index d4aec99cac3f83d764e21946cc904c00e084704e..fd6f51acf6505c2d5dcd6a5254c949094d9e497d 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -754,6 +756,7 @@ public class ServerPlayer extends Player {
         this.trackStartFallingPosition();
         this.trackEnteredOrExitedLavaOnVehicle();
         this.advancements.flushDirty(this);
+        de.verdox.mccreativelab.block.CustomBlockBreakSpeed.tick(this);
     }
 
     public void doTick() {
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayerGameMode.java b/src/main/java/net/minecraft/server/level/ServerPlayerGameMode.java
index b2c2bd5ec0afd479973f7237a5c610f21231c505..406f9cb93dd6331db342ea8d05563fc923afce88 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayerGameMode.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayerGameMode.java
@@ -266,6 +268,7 @@ public class ServerPlayerGameMode {
                     return;
                 }
 
+                de.verdox.mccreativelab.block.CustomBlockBreakSpeed.startBlockBreakAction(player, pos, action, direction, worldHeight); //MCCLab
                 if (blockEvent.getInstaBreak()) {
                     f = 2.0f;
                 }
@@ -308,6 +314,7 @@ public class ServerPlayerGameMode {
                             this.delayedDestroyPos = pos;
                             this.delayedTickStart = this.destroyProgressStart;
                         }
+                        de.verdox.mccreativelab.block.CustomBlockBreakSpeed.stopBlockBreakAction(player, pos, action, direction, worldHeight); //MCCLab
                     }
                 }
 
@@ -326,6 +335,7 @@ public class ServerPlayerGameMode {
                 this.debugLogging(pos, true, sequence, "aborted destroying");
 
                 CraftEventFactory.callBlockDamageAbortEvent(this.player, pos, this.player.getInventory().getSelected()); // CraftBukkit
+                de.verdox.mccreativelab.block.CustomBlockBreakSpeed.stopBlockBreakAction(player, pos, action, direction, worldHeight); //MCCLab
             }
 
         }
diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index 48d1444fbad1c57738807d0128b94160a5a17a4d..b4bbf335dca576ed14923770fe12e20f059843bd 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -594,6 +596,7 @@ public abstract class PlayerList {
         this.cserver.getPluginManager().callEvent(playerQuitEvent);
         entityplayer.getBukkitEntity().disconnect(playerQuitEvent.getQuitMessage());
 
+        de.verdox.mccreativelab.block.CustomBlockBreakSpeed.stopAllBlockBreakActions(entityplayer); //MCCLab
         if (server.isSameThread()) entityplayer.doTick(); // SPIGOT-924 // Paper - don't tick during emergency shutdowns (Watchdog)
         // CraftBukkit end
 
diff --git a/src/main/java/net/minecraft/world/item/ItemStack.java b/src/main/java/net/minecraft/world/item/ItemStack.java
index fb7bb3280a38e20bbef88c3f3e3b038d77a7e5fa..5981581103dd53434a576eda0d093525161998a5 100644
--- a/src/main/java/net/minecraft/world/item/ItemStack.java
+++ b/src/main/java/net/minecraft/world/item/ItemStack.java
@@ -724,6 +725,8 @@ public final class ItemStack {
     }
 
     public boolean isCorrectToolForDrops(net.minecraft.world.level.block.state.BlockState state) {
+        if(de.verdox.mccreativelab.behaviour.BlockBreakBehaviour.BLOCK_BREAK_BEHAVIOUR.isImplemented(getBukkitStack().getType()))
+            return de.verdox.mccreativelab.behaviour.BlockBreakBehaviour.BLOCK_BREAK_BEHAVIOUR.getBehaviour(getBukkitStack().getType()).isCorrectToolMaterialForDrops(getBukkitStack(), state.createCraftBlockData());
         return this.getItem().isCorrectToolForDrops(state);
     }
 
diff --git a/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java b/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java
index b777a7e9f8250f4a7fa272f54f6977b70a42b39d..ea4abd1fcd9dc7c0f4eaf170624034c199af3d5b 100644
--- a/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java
+++ b/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java
@@ -1344,6 +1346,8 @@ public abstract class BlockBehaviour implements FeatureElement {
         protected abstract BlockState asState();
 
         public boolean requiresCorrectToolForDrops() {
+            if(de.verdox.mccreativelab.behaviour.BlockBreakBehaviour.BLOCK_BREAK_BEHAVIOUR.isImplemented(asState().getBukkitMaterial()))
+                return de.verdox.mccreativelab.behaviour.BlockBreakBehaviour.BLOCK_BREAK_BEHAVIOUR.getBehaviour(asState().getBukkitMaterial()).requiresCorrectToolsForDrops(createCraftBlockData());
             return this.requiresCorrectToolForDrops;
         }
 
