From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: verdox <mail.ysp@web.de>
Date: Mon, 19 Aug 2024 19:56:57 +0000
Subject: [PATCH] Removing enums for pack asset types


diff --git a/src/main/java/de/verdox/mccreativelab/CraftDataPackInterceptor.java b/src/main/java/de/verdox/mccreativelab/CraftDataPackInterceptor.java
index f8dcc2863b242dcb58869bfbab4914f595bbb874..bc35313a672a4ee0b15cdf22e3fd0d7747a27e9d 100644
--- a/src/main/java/de/verdox/mccreativelab/CraftDataPackInterceptor.java
+++ b/src/main/java/de/verdox/mccreativelab/CraftDataPackInterceptor.java
@@ -69,7 +69,7 @@ public class CraftDataPackInterceptor implements DataPackInterceptor {
         String assetTypeName = resourceLocation.toString().split("/")[0];
         int indexOfStartKey = assetTypeName.indexOf(":");
         assetTypeName = assetTypeName.substring(indexOfStartKey + 1);
-        PackAssetType packAssetType = PackAssetType.getByParentFolder(assetTypeName);
+        PackAssetType packAssetType = new PackAssetType(assetTypeName);
         Key key = Key.key(resourceLocation.getNamespace(), FilenameUtils.removeExtension(resourceLocation.getPath().replace(assetTypeName + "/", "")));
         if (packAssetType == null) {
             LOGGER.error("Could not determine PackAssetType " + assetTypeName + " from " + resourceLocation);
@@ -77,7 +77,7 @@ public class CraftDataPackInterceptor implements DataPackInterceptor {
         }
 
         if (excludedTypes.contains(packAssetType) || stringPatternExcludes.stream().anyMatch(s -> resourceLocation.toString().contains(s)) || (exclusions.containsKey(packAssetType) && exclusions.get(packAssetType).contains(key))) {
-            LOGGER.info("Removing " + packAssetType.name() + ": " + key);
+            LOGGER.info("Removing " + packAssetType.getParentFolder() + ": " + key);
             return null;
         }
 
@@ -114,7 +114,7 @@ public class CraftDataPackInterceptor implements DataPackInterceptor {
                 Map<Key, List<Function<DataPackAsset, Boolean>>> map = modifies.get(packAssetType);
                 if (map.containsKey(key)) {
                     List<Function<DataPackAsset, Boolean>> modifiers = map.get(key);
-                    LOGGER.info("Patching " + packAssetType.name() + ": " + key);
+                    LOGGER.info("Patching " + packAssetType.parentFolder() + ": " + key);
 
                     for (Function<DataPackAsset, Boolean> modifier : modifiers) {
                         if (!modifier.apply(dataPackAsset)) shouldLoad = false;
