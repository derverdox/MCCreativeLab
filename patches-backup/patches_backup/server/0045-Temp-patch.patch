From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: verdox <mail.ysp@web.de>
Date: Wed, 19 Jun 2024 15:25:03 +0000
Subject: [PATCH] Temp patch


diff --git a/build.gradle.kts b/build.gradle.kts
index 9c47f9f5b1e946df94d906086869a5ca779f3315..f4f2fb795d715ebcf620a0e3b89ac775897460ed 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -193,6 +193,7 @@ tasks.registerRunTask("runServer") {
     description = "Spin up a test server from the Mojang mapped server jar"
     classpath(tasks.includeMappings.flatMap { it.outputJar })
     classpath(runtimeClasspathWithoutVanillaServer)
+    jvmArgs("-Dpaper.debug-sync-loads=true", "-Dfile.encoding=UTF-8")
     dependsOn(":plugin-extension:build")
 }
 
@@ -200,13 +201,14 @@ tasks.registerRunTask("runReobfServer") {
     description = "Spin up a test server from the reobfJar output jar"
     classpath(tasks.reobfJar.flatMap { it.outputJar })
     classpath(runtimeClasspathWithoutVanillaServer)
+    jvmArgs("-Dpaper.debug-sync-loads=true", "-Dfile.encoding=UTF-8")
     dependsOn(":plugin-extension:build")
 }
 
 tasks.registerRunTask("runDevServer") {
     description = "Spin up a test server without assembling a jar"
     classpath(sourceSets.main.map { it.runtimeClasspath })
-    jvmArgs("-DPaper.pushPaperAssetsRoot=true")
+    jvmArgs("-DPaper.pushPaperAssetsRoot=true", "-Dpaper.debug-sync-loads=true", "-Dfile.encoding=UTF-8")
     dependsOn(":plugin-extension:build")
 }
 
@@ -215,22 +217,26 @@ tasks.registerRunTask("runBundler") {
     classpath(rootProject.tasks.named<io.papermc.paperweight.tasks.CreateBundlerJar>("createMojmapBundlerJar").flatMap { it.outputZip })
     mainClass.set(null as String?)
     dependsOn(":plugin-extension:build")
+    jvmArgs("-Dpaper.debug-sync-loads=true", "-Dfile.encoding=UTF-8")
 }
 tasks.registerRunTask("runReobfBundler") {
     description = "Spin up a test server from the reobf bundler jar"
     classpath(rootProject.tasks.named<io.papermc.paperweight.tasks.CreateBundlerJar>("createReobfBundlerJar").flatMap { it.outputZip })
     mainClass.set(null as String?)
     dependsOn(":plugin-extension:build")
+    jvmArgs("-Dpaper.debug-sync-loads=true", "-Dfile.encoding=UTF-8")
 }
 tasks.registerRunTask("runPaperclip") {
     description = "Spin up a test server from the Mojang mapped Paperclip jar"
     classpath(rootProject.tasks.named<io.papermc.paperweight.tasks.CreatePaperclipJar>("createMojmapPaperclipJar").flatMap { it.outputZip })
     mainClass.set(null as String?)
     dependsOn(":plugin-extension:build")
+    jvmArgs("-Dpaper.debug-sync-loads=true", "-Dfile.encoding=UTF-8")
 }
 tasks.registerRunTask("runReobfPaperclip") {
     description = "Spin up a test server from the reobf Paperclip jar"
     classpath(rootProject.tasks.named<io.papermc.paperweight.tasks.CreatePaperclipJar>("createReobfPaperclipJar").flatMap { it.outputZip })
     mainClass.set(null as String?)
     dependsOn(":plugin-extension:build")
+    jvmArgs("-Dpaper.debug-sync-loads=true", "-Dfile.encoding=UTF-8")
 }
diff --git a/src/main/java/de/verdox/mccreativelab/CreativeLabImpl.java b/src/main/java/de/verdox/mccreativelab/CreativeLabImpl.java
index d03ad6f59f503556037fcd55111a06f44c6779df..69d81cf08c4cdd458b85bea1a213c0c36c2ec50e 100644
--- a/src/main/java/de/verdox/mccreativelab/CreativeLabImpl.java
+++ b/src/main/java/de/verdox/mccreativelab/CreativeLabImpl.java
@@ -1,7 +1,26 @@
 package de.verdox.mccreativelab;
 
+import com.google.common.base.Supplier;
+import de.verdox.mccreativelab.behaviour.BehaviourUtil;
+import net.minecraft.core.BlockPos;
+import net.minecraft.core.Direction;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.world.InteractionHand;
+import net.minecraft.world.item.context.BlockPlaceContext;
+import net.minecraft.world.phys.BlockHitResult;
+import net.minecraft.world.phys.Vec3;
+import org.bukkit.Bukkit;
+import org.bukkit.Location;
+import org.bukkit.NamespacedKey;
+import org.bukkit.WorldCreator;
+import org.bukkit.inventory.ItemStack;
+import org.bukkit.persistence.PersistentDataContainer;
+import org.bukkit.plugin.Plugin;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.Objects;
+import java.util.concurrent.CompletableFuture;
+
 public final class CreativeLabImpl implements CreativeLab {
 
     private final de.verdox.mccreativelab.data.DataPackInterceptor dataPackInterceptor = new CraftDataPackInterceptor();
diff --git a/src/main/java/net/minecraft/world/item/BlockItem.java b/src/main/java/net/minecraft/world/item/BlockItem.java
index f41da0a94007aca4a50f88afffc827b4585109d3..5b97437571054882e696607f50d7ee3cd46a75c1 100644
--- a/src/main/java/net/minecraft/world/item/BlockItem.java
+++ b/src/main/java/net/minecraft/world/item/BlockItem.java
@@ -286,4 +286,62 @@ public class BlockItem extends Item {
     public FeatureFlagSet requiredFeatures() {
         return this.getBlock().requiredFeatures();
     }
+
+    public InteractionResult placeItemWithoutPlayer(BlockPlaceContext context){
+        if (!this.getBlock().isEnabled(context.getLevel().enabledFeatures())) {
+            return InteractionResult.FAIL;
+        } else if (!context.canPlace()) {
+            return InteractionResult.FAIL;
+        } else {
+            BlockPlaceContext blockactioncontext1 = this.updatePlacementContext(context);
+
+            if (blockactioncontext1 == null) {
+                return InteractionResult.FAIL;
+            } else {
+                // CraftBukkit start - special case for handling block placement with water lilies and snow buckets
+
+                BlockState iblockdata = de.verdox.mccreativelab.behaviour.ItemBehaviourUtil.placeBlockAction(context.getPlayer(), context.getClickedPos(), context.getLevel(), context.getItemInHand(), context.getLevel().getBlockState(context.getClickedPos()), () -> this.getPlacementState(blockactioncontext1));
+
+                org.bukkit.block.BlockState blockstate = null;
+                if (this instanceof PlaceOnWaterBlockItem || this instanceof SolidBucketItem) {
+                    blockstate = org.bukkit.craftbukkit.block.CraftBlockStates.getBlockState(blockactioncontext1.getLevel(), blockactioncontext1.getClickedPos());
+                }
+                final org.bukkit.block.BlockState oldBlockstate = blockstate != null ? blockstate : org.bukkit.craftbukkit.block.CraftBlockStates.getBlockState(blockactioncontext1.getLevel(), blockactioncontext1.getClickedPos()); // Paper - Reset placed block on exception
+                // CraftBukkit end
+
+                if (iblockdata == null) {
+                    return InteractionResult.FAIL;
+                } else if (!this.placeBlock(blockactioncontext1, iblockdata)) {
+                    return InteractionResult.FAIL;
+                } else {
+                    BlockPos blockposition = blockactioncontext1.getClickedPos();
+                    Level world = blockactioncontext1.getLevel();
+                    ItemStack itemstack = blockactioncontext1.getItemInHand();
+                    BlockState iblockdata1 = world.getBlockState(blockposition);
+
+                    if (iblockdata1.is(iblockdata.getBlock())) {
+                        iblockdata1 = this.updateBlockStateFromTag(null, blockposition, world, itemstack, iblockdata1);
+                        // Paper start - Reset placed block on exception
+                        try {
+                            this.updateCustomBlockEntityTag(blockposition, world, null, itemstack, iblockdata1);
+                            BlockItem.updateBlockEntityComponents(world, blockposition, itemstack);
+                        } catch (Exception e) {
+                            oldBlockstate.update(true, false);
+                            throw e; // Rethrow exception if not placed by a player
+                        }
+                        // Paper end - Reset placed block on exception
+                        iblockdata1.getBlock().setPlacedBy(world, blockposition, iblockdata1, null, itemstack);
+                        // CraftBukkit start
+                    }
+
+                    SoundType soundeffecttype = iblockdata1.getSoundType();
+
+                    //TODO: de.verdox.mccreativelab.behaviour.BlockBehaviourUtil.getInstance().onPlaceCallback();
+                    world.playSound(null, blockposition, this.getPlaceSound(iblockdata1), net.minecraft.sounds.SoundSource.BLOCKS, (soundeffecttype.getVolume() + 1.0F) / 2.0F, soundeffecttype.getPitch() * 0.8F); // Paper - Fix block place logic; reintroduce this for the dispenser (i.e the shulker)
+                    world.gameEvent((Holder) GameEvent.BLOCK_PLACE, blockposition, GameEvent.Context.of(null, iblockdata1));
+                    return InteractionResult.sidedSuccess(world.isClientSide);
+                }
+            }
+        }
+    }
 }
