From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: verdox <mail.ysp@web.de>
Date: Thu, 13 Jun 2024 19:56:58 +0000
Subject: [PATCH] Adding Serialization Behaviour


diff --git a/src/main/java/de/verdox/mccreativelab/behaviour/StorageBehaviourUtil.java b/src/main/java/de/verdox/mccreativelab/behaviour/StorageBehaviourUtil.java
new file mode 100644
index 0000000000000000000000000000000000000000..f400d10ca210e84a7bb6ff09117efe7863769349
--- /dev/null
+++ b/src/main/java/de/verdox/mccreativelab/behaviour/StorageBehaviourUtil.java
@@ -0,0 +1,39 @@
+package de.verdox.mccreativelab.behaviour;
+
+import com.google.gson.JsonElement;
+import net.minecraft.server.level.ServerPlayer;
+import org.bukkit.entity.Player;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.io.InputStream;
+import java.io.OutputStream;
+import java.nio.file.Path;
+import java.util.UUID;
+import java.util.function.Supplier;
+
+public class StorageBehaviourUtil extends BehaviourUtil {
+    public static JsonElement loadPlayerAdvancements(ServerPlayer serverPlayer, Supplier<JsonElement> vanillaLogic) {
+        return evaluate(StorageBehaviour.STORAGE_BEHAVIOUR, storageBehaviourCustomBehaviour -> storageBehaviourCustomBehaviour.getBehaviour().loadPlayerAdvancements(serverPlayer.getBukkitEntity()), vanillaLogic, Converter.DummyConverter.getInstance(JsonElement.class));
+    }
+
+    public static Path savePlayerAdvancements(ServerPlayer serverPlayer, JsonElement serializedAdvancements, Supplier<Path> vanillaLogic) {
+        return evaluate(StorageBehaviour.STORAGE_BEHAVIOUR, storageBehaviourCustomBehaviour -> storageBehaviourCustomBehaviour.getBehaviour().savePlayerAdvancements(serverPlayer.getBukkitEntity(), serializedAdvancements), vanillaLogic, Converter.DummyConverter.getInstance(Path.class));
+    }
+
+    public static JsonElement loadPlayerStats(UUID playerUUID, Supplier<JsonElement> vanillaLogic) {
+        return evaluate(StorageBehaviour.STORAGE_BEHAVIOUR, storageBehaviourCustomBehaviour -> storageBehaviourCustomBehaviour.getBehaviour().loadPlayerStats(playerUUID), vanillaLogic, Converter.DummyConverter.getInstance(JsonElement.class));
+    }
+
+    public static Path savePlayerStats(UUID playerUUID, JsonElement serializedAdvancements, Supplier<Path> vanillaLogic) {
+        return evaluate(StorageBehaviour.STORAGE_BEHAVIOUR, storageBehaviourCustomBehaviour -> storageBehaviourCustomBehaviour.getBehaviour().savePlayerStats(playerUUID, serializedAdvancements), vanillaLogic, Converter.DummyConverter.getInstance(Path.class));
+    }
+
+    public static InputStream loadPlayerNBTData(@NotNull UUID playerUUID, @Nullable Player player, Supplier<InputStream> vanillaLogic){
+        return evaluate(StorageBehaviour.STORAGE_BEHAVIOUR, storageBehaviourCustomBehaviour -> storageBehaviourCustomBehaviour.getBehaviour().loadPlayerNBTData(playerUUID, player), vanillaLogic, Converter.DummyConverter.getInstance(InputStream.class));
+    }
+
+    public static OutputStream savePlayerNBTData(@NotNull Player player, Supplier<OutputStream> vanillaLogic){
+        return evaluate(StorageBehaviour.STORAGE_BEHAVIOUR, storageBehaviourCustomBehaviour -> storageBehaviourCustomBehaviour.getBehaviour().savePlayerNBTData(player), vanillaLogic, Converter.DummyConverter.getInstance(OutputStream.class));
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PlayerAdvancements.java b/src/main/java/net/minecraft/server/PlayerAdvancements.java
index 862a4bf003b7f810fb57dbcd150a1417c902b633..b7d11936102e0f4fe34d4da1faf2d3a90fb3aedc 100644
--- a/src/main/java/net/minecraft/server/PlayerAdvancements.java
+++ b/src/main/java/net/minecraft/server/PlayerAdvancements.java
@@ -73,7 +73,7 @@ public class PlayerAdvancements {
         boolean flag = true;
 
         this.codec = DataFixTypes.ADVANCEMENTS.wrapCodec(PlayerAdvancements.Data.CODEC, dataFixer, 1343);
-        this.load(advancementLoader);
+        this.loadWithBehaviour(advancementLoader); // MCCreativeLab - Add StorageBehaviour
     }
 
     public void setPlayer(ServerPlayer owner) {
@@ -100,7 +100,7 @@ public class PlayerAdvancements {
         this.isFirstPacket = true;
         this.lastSelectedTab = null;
         this.tree = advancementLoader.tree();
-        this.load(advancementLoader);
+        this.loadWithBehaviour(advancementLoader); // MCCreativeLab - Add StorageBehaviour
     }
 
     private void registerListeners(ServerAdvancementManager advancementLoader) {
@@ -164,12 +164,19 @@ public class PlayerAdvancements {
 
     public void save() {
         if (org.spigotmc.SpigotConfig.disableAdvancementSaving) return; // Spigot
-        JsonElement jsonelement = (JsonElement) this.codec.encodeStart(JsonOps.INSTANCE, this.asData()).getOrThrow();
+        // MCCreativeLab start - Add StorageBehaviour
+        JsonElement jsonelement = this.codec.encodeStart(JsonOps.INSTANCE, this.asData()).getOrThrow();
 
-        try {
-            FileUtil.createDirectoriesSafe(this.playerSavePath.getParent());
-            BufferedWriter bufferedwriter = Files.newBufferedWriter(this.playerSavePath, StandardCharsets.UTF_8);
+        Path pathToSave = de.verdox.mccreativelab.behaviour.StorageBehaviourUtil.savePlayerAdvancements(player, jsonelement, () -> this.playerSavePath);
+        if(pathToSave == null)
+            return;
+        // MCCreativeLab end - Add StorageBehaviour
 
+        try {
+            // MCCreativeLab start - Add StorageBehaviour
+            FileUtil.createDirectoriesSafe(pathToSave.getParent());
+            BufferedWriter bufferedwriter = Files.newBufferedWriter(pathToSave, StandardCharsets.UTF_8);
+            // MCCreativeLab end - Add StorageBehaviour
             try {
                 PlayerAdvancements.GSON.toJson(jsonelement, PlayerAdvancements.GSON.newJsonWriter(bufferedwriter));
             } catch (Throwable throwable) {
@@ -188,7 +195,7 @@ public class PlayerAdvancements {
                 bufferedwriter.close();
             }
         } catch (JsonIOException | IOException ioexception) {
-            PlayerAdvancements.LOGGER.error("Couldn't save player advancements to {}", this.playerSavePath, ioexception);
+            PlayerAdvancements.LOGGER.error("Couldn't save player advancements to {}", pathToSave, ioexception);
         }
 
     }
@@ -426,4 +433,45 @@ public class PlayerAdvancements {
             });
         }
     }
+
+    // MCCreativeLab start - Add StorageBehaviour
+    private void loadWithBehaviour(ServerAdvancementManager advancementLoader) {
+        JsonElement jsonelement = de.verdox.mccreativelab.behaviour.StorageBehaviourUtil.loadPlayerAdvancements(player, () -> {
+            if (Files.isRegularFile(this.playerSavePath, new LinkOption[0])) {
+                try {
+                    JsonReader jsonreader = new JsonReader(Files.newBufferedReader(this.playerSavePath, StandardCharsets.UTF_8));
+
+                    try {
+                        jsonreader.setLenient(false);
+                        return Streams.parse(jsonreader);
+                    } catch (Throwable throwable) {
+                        try {
+                            jsonreader.close();
+                        } catch (Throwable throwable1) {
+                            throwable.addSuppressed(throwable1);
+                        }
+
+                        throw throwable;
+                    }
+                    finally {
+                        jsonreader.close();
+                    }
+                } catch (JsonIOException | IOException ioexception) {
+                    PlayerAdvancements.LOGGER.error("Couldn't access player advancements in {}", this.playerSavePath, ioexception);
+                } catch (JsonParseException jsonparseexception) {
+                    PlayerAdvancements.LOGGER.error("Couldn't parse player advancements in {}", this.playerSavePath, jsonparseexception);
+                }
+            }
+            return null;
+        });
+        if(jsonelement == null)
+            return;
+
+        PlayerAdvancements.Data advancementdataplayer_a = (PlayerAdvancements.Data) this.codec.parse(JsonOps.INSTANCE, jsonelement).getOrThrow(JsonParseException::new);
+        this.applyFrom(advancementLoader, advancementdataplayer_a);
+
+        this.checkForAutomaticTriggers(advancementLoader);
+        this.registerListeners(advancementLoader);
+    }
+    // MCCreativeLab end - Add StorageBehaviour
 }
diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index 5e2c4969e77c669acbb4a13c07033cb267c3d586..54f62b0df68315ff4cab133cd91695d6c69642aa 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -1451,7 +1451,7 @@ public abstract class PlayerList {
                 }
             }
 
-            serverstatisticmanager = new ServerStatsCounter(this.server, file1);
+            serverstatisticmanager = new ServerStatsCounter(this.server, file1, uuid); // MCCreativeLab - Add StorageBehaviour
             // this.stats.put(uuid, serverstatisticmanager); // CraftBukkit
         }
 
diff --git a/src/main/java/net/minecraft/stats/ServerStatsCounter.java b/src/main/java/net/minecraft/stats/ServerStatsCounter.java
index fb7342f7a5008a283c3400c6313c637de8210dfa..3ac6a6305faa4ac3ef340687d1ec3f795e831626 100644
--- a/src/main/java/net/minecraft/stats/ServerStatsCounter.java
+++ b/src/main/java/net/minecraft/stats/ServerStatsCounter.java
@@ -44,20 +44,14 @@ public class ServerStatsCounter extends StatsCounter {
     private final MinecraftServer server;
     private final File file;
     private final Set<Stat<?>> dirty = Sets.newHashSet();
-
-    public ServerStatsCounter(MinecraftServer server, File file) {
+    // MCCreativeLab start - Add StorageBehaviour
+    private final java.util.UUID playerUUID;
+    public ServerStatsCounter(MinecraftServer server, File file, java.util.UUID playerUUID) {
+        this.playerUUID = playerUUID;
+        // MCCreativeLab end - Add StorageBehaviour
         this.server = server;
         this.file = file;
-        if (file.isFile()) {
-            try {
-                this.parseLocal(server.getFixerUpper(), FileUtils.readFileToString(file));
-            } catch (IOException ioexception) {
-                ServerStatsCounter.LOGGER.error("Couldn't read statistics file {}", file, ioexception);
-            } catch (JsonParseException jsonparseexception) {
-                ServerStatsCounter.LOGGER.error("Couldn't parse statistics file {}", file, jsonparseexception);
-            }
-        }
-
+        load(server, file, playerUUID); // MCCreativeLab - Add StorageBehaviour
         // Paper start - Moved after stat fetching for player state file
         // Moves the loading after vanilla loading, so it overrides the values.
         // Disables saving any forced stats, so it stays at the same value (without enabling disableStatSaving)
@@ -74,8 +68,13 @@ public class ServerStatsCounter extends StatsCounter {
 
     public void save() {
         if ( org.spigotmc.SpigotConfig.disableStatSaving ) return; // Spigot
+        // MCCreativeLab start - Add StorageBehaviour
+        java.nio.file.Path pathToSaveTo = de.verdox.mccreativelab.behaviour.StorageBehaviourUtil.savePlayerStats(playerUUID, this.toJson(), this.file::toPath);
+        if(pathToSaveTo == null)
+            return;
+        // MCCreativeLab end - Add StorageBehaviour
         try {
-            FileUtils.writeStringToFile(this.file, this.toJson());
+            FileUtils.writeStringToFile(pathToSaveTo.toFile(), this.toJson().toString()); // MCCreativeLab - Add StorageBehaviour
         } catch (IOException ioexception) {
             ServerStatsCounter.LOGGER.error("Couldn't save stats", ioexception);
         }
@@ -204,7 +203,7 @@ public class ServerStatsCounter extends StatsCounter {
         return nbttagcompound;
     }
 
-    protected String toJson() {
+    protected JsonObject toJson() { // MCCreativeLab - Add StorageBehaviour
         Map<StatType<?>, JsonObject> map = Maps.newHashMap();
         ObjectIterator objectiterator = this.stats.object2IntEntrySet().iterator();
 
@@ -230,7 +229,7 @@ public class ServerStatsCounter extends StatsCounter {
 
         jsonobject1.add("stats", jsonobject);
         jsonobject1.addProperty("DataVersion", SharedConstants.getCurrentVersion().getDataVersion().getVersion());
-        return jsonobject1.toString();
+        return jsonobject1; // MCCreativeLab - Add StorageBehaviour
     }
 
     private static <T> ResourceLocation getKey(Stat<T> stat) {
@@ -253,4 +252,90 @@ public class ServerStatsCounter extends StatsCounter {
 
         player.connection.send(new ClientboundAwardStatsPacket(object2intmap));
     }
+
+    // MCCreativeLab start - Add StorageBehaviour
+    private void load(MinecraftServer server, File file, java.util.UUID playerUUID) {
+        JsonElement jsonElement = de.verdox.mccreativelab.behaviour.StorageBehaviourUtil.loadPlayerStats(playerUUID, () -> {
+            try {
+                if (file.isFile())
+                    return parseJsonToString(FileUtils.readFileToString(file));
+            } catch (IOException ioexception) {
+                ServerStatsCounter.LOGGER.error("Couldn't read statistics file {}", file, ioexception);
+            }
+            return null;
+        });
+        if (jsonElement != null) {
+            try {
+                this.jsonElementToStats(server.getFixerUpper(), jsonElement);
+            } catch (JsonParseException jsonparseexception) {
+                ServerStatsCounter.LOGGER.error("Couldn't parse statistics file {}", file, jsonparseexception);
+            }
+        }
+    }
+
+    public JsonElement parseJsonToString(String json){
+        JsonReader jsonreader = new JsonReader(new StringReader(json));
+        jsonreader.setLenient(false);
+        return Streams.parse(jsonreader);
+    }
+
+    public void jsonElementToStats(DataFixer dataFixer, JsonElement jsonelement) {
+        try {
+            label48:
+            {
+                try {
+                    if (!jsonelement.isJsonNull()) {
+                        CompoundTag nbttagcompound = ServerStatsCounter.fromJson(jsonelement.getAsJsonObject());
+
+                        nbttagcompound = DataFixTypes.STATS.updateToCurrentVersion(dataFixer, nbttagcompound, NbtUtils.getDataVersion(nbttagcompound, 1343));
+                        if (!nbttagcompound.contains("stats", 10)) {
+                            break label48;
+                        }
+
+                        CompoundTag nbttagcompound1 = nbttagcompound.getCompound("stats");
+                        Iterator iterator = nbttagcompound1.getAllKeys().iterator();
+
+                        while (true) {
+                            if (!iterator.hasNext()) {
+                                break label48;
+                            }
+
+                            String s1 = (String) iterator.next();
+
+                            if (nbttagcompound1.contains(s1, 10)) {
+                                Util.ifElse(BuiltInRegistries.STAT_TYPE.getOptional(new ResourceLocation(s1)), (statisticwrapper) -> {
+                                    CompoundTag nbttagcompound2 = nbttagcompound1.getCompound(s1);
+                                    Iterator iterator1 = nbttagcompound2.getAllKeys().iterator();
+
+                                    while (iterator1.hasNext()) {
+                                        String s2 = (String) iterator1.next();
+
+                                        if (nbttagcompound2.contains(s2, 99)) {
+                                            Util.ifElse(this.getStat(statisticwrapper, s2), (statistic) -> {
+                                                this.stats.put(statistic, nbttagcompound2.getInt(s2));
+                                            }, () -> {
+                                                ServerStatsCounter.LOGGER.warn("Invalid statistic in {}: Don't know what {} is", this.file, s2);
+                                            });
+                                        } else {
+                                            ServerStatsCounter.LOGGER.warn("Invalid statistic value in {}: Don't know what {} is for key {}", new Object[]{this.file, nbttagcompound2.get(s2), s2});
+                                        }
+                                    }
+
+                                }, () -> {
+                                    ServerStatsCounter.LOGGER.warn("Invalid statistic type in {}: Don't know what {} is", this.file, s1);
+                                });
+                            }
+                        }
+                    }
+
+                    ServerStatsCounter.LOGGER.error("Unable to parse Stat data from {}", this.file);
+                } catch (Throwable throwable) {
+                    throw throwable;
+                }
+            }
+        } catch (JsonParseException jsonparseexception) {
+            ServerStatsCounter.LOGGER.error("Unable to parse Stat data from {}", this.file, jsonparseexception);
+        }
+    }
+    // MCCreativeLab end - Add StorageBehaviour
 }
diff --git a/src/main/java/net/minecraft/world/level/storage/PlayerDataStorage.java b/src/main/java/net/minecraft/world/level/storage/PlayerDataStorage.java
index b148cf247acdd36f856d0495cde4cc5ad32b5a2f..dae11d5ffaf639253cc8c8be41b585b8893c3371 100644
--- a/src/main/java/net/minecraft/world/level/storage/PlayerDataStorage.java
+++ b/src/main/java/net/minecraft/world/level/storage/PlayerDataStorage.java
@@ -39,13 +39,7 @@ public class PlayerDataStorage {
         try {
             CompoundTag nbttagcompound = player.saveWithoutId(new CompoundTag());
             Path path = this.playerDir.toPath();
-            Path path1 = Files.createTempFile(path, player.getStringUUID() + "-", ".dat");
-
-            NbtIo.writeCompressed(nbttagcompound, path1);
-            Path path2 = path.resolve(player.getStringUUID() + ".dat");
-            Path path3 = path.resolve(player.getStringUUID() + ".dat_old");
-
-            Util.safeReplaceFile(path2, path1, path3);
+            callSave(player, path, nbttagcompound); // MCCreativeLab - Add StorageBehaviour
         } catch (Exception exception) {
             PlayerDataStorage.LOGGER.warn("Failed to save player data for {}", player.getScoreboardName(), exception); // Paper - Print exception
         }
@@ -109,7 +103,7 @@ public class PlayerDataStorage {
 
     public Optional<CompoundTag> load(Player player) {
         // CraftBukkit start
-        return this.load(player.getName().getString(), player.getStringUUID()).map((nbttagcompound) -> {
+        return this.load((org.bukkit.entity.Player) player.getBukkitEntity(), player.getName().getString(), player.getStringUUID()).map((nbttagcompound) -> { // Paper - Add PlayerData Serialization Events
             if (player instanceof ServerPlayer) {
                 CraftPlayer player1 = (CraftPlayer) player.getBukkitEntity();
                 // Only update first played if it is older than the one we have
@@ -124,16 +118,16 @@ public class PlayerDataStorage {
         });
     }
 
-    public Optional<CompoundTag> load(String name, String uuid) {
+    public Optional<CompoundTag> load(@org.jetbrains.annotations.Nullable org.bukkit.entity.Player player, String name, String uuid) { // MCCreativeLab - Add StorageBehaviour
         // CraftBukkit end
-        Optional<CompoundTag> optional = this.load(name, uuid, ".dat"); // CraftBukkit
+        Optional<CompoundTag> optional = this.callLoad(player, name, uuid, ".dat"); // CraftBukkit // MCCreativeLab - Add StorageBehaviour
 
         if (optional.isEmpty()) {
             this.backup(name, uuid, ".dat"); // CraftBukkit
         }
 
         return optional.or(() -> {
-            return this.load(name, uuid, ".dat_old"); // CraftBukkit
+            return this.callLoad(player, name, uuid, ".dat_old"); // CraftBukkit // MCCreativeLab - Add StorageBehaviour
         }).map((nbttagcompound) -> {
             int i = NbtUtils.getDataVersion(nbttagcompound, -1);
 
@@ -148,4 +142,71 @@ public class PlayerDataStorage {
         return this.playerDir;
     }
     // CraftBukkit end
+    // MCCreativeLab start - Add StorageBehaviour
+    @org.jetbrains.annotations.NotNull
+    private Optional<CompoundTag> callLoad(@org.jetbrains.annotations.Nullable org.bukkit.entity.Player player, String name, String uuidString, String fileEnding) {
+        File file = this.playerDir;
+        final boolean usingWrongFile;
+        final File file1;
+        if (org.bukkit.Bukkit.getOnlineMode() && !file.exists()) {
+            file1 = new File( file, java.util.UUID.nameUUIDFromBytes( ( "OfflinePlayer:" + name ).getBytes( java.nio.charset.StandardCharsets.UTF_8 ) ).toString() + fileEnding );
+            if (file1.exists()) {
+                usingWrongFile = true;
+                org.bukkit.Bukkit.getServer().getLogger().warning( "Using offline mode UUID file for player " + name + " as it is the only copy we can find." );
+            }
+            else
+                usingWrongFile = false;
+        }
+        else {
+            file1 = new File(file, uuidString + fileEnding);
+             usingWrongFile = false;
+        }
+
+        java.io.InputStream inputStream = de.verdox.mccreativelab.behaviour.StorageBehaviourUtil.loadPlayerNBTData(java.util.UUID.fromString(uuidString), player, () -> {
+            try{
+                if (file1.exists() && file1.isFile()) {
+                    final java.io.InputStream inputStreamFromEvent = new java.io.FileInputStream(file1);
+                    if (usingWrongFile)
+                        file1.renameTo(new File(file1.getPath() + ".offline-read"));
+                    return inputStreamFromEvent;
+                }
+            }
+            catch (Exception e){
+                PlayerDataStorage.LOGGER.warn("Failed to load player data for {}", name); // CraftBukkit
+            }
+            return null;
+        });
+        try(inputStream) {
+            if (inputStream != null)
+                return Optional.of(NbtIo.readCompressed(inputStream, NbtAccounter.unlimitedHeap()));
+        } catch (Exception exception) {
+            PlayerDataStorage.LOGGER.warn("Failed to load player data for {}", name); // CraftBukkit
+        }
+
+        return Optional.empty();
+    }
+
+    private static void callSave(Player player, Path parentPath, CompoundTag nbttagcompound) throws java.io.IOException {
+        Path path1 = parentPath.resolve(player.getStringUUID() + "-" + ".dat");
+
+        java.io.OutputStream outputStream = de.verdox.mccreativelab.behaviour.StorageBehaviourUtil.savePlayerNBTData((org.bukkit.entity.Player) player.getBukkitEntity(), () -> {
+            try {
+                Files.createTempFile(parentPath, player.getStringUUID() + "-", ".dat");
+                return new java.io.FileOutputStream(path1.toFile());
+            } catch (java.io.IOException e) {
+                throw new RuntimeException(e);
+            }
+        });
+
+        if(outputStream == null)
+            return;
+
+        NbtIo.writeCompressed(nbttagcompound, outputStream);
+        if(path1.toFile().exists()){
+            Path path2 = parentPath.resolve(player.getStringUUID() + ".dat");
+            Path path3 = parentPath.resolve(player.getStringUUID() + ".dat_old");
+            Util.safeReplaceFile(path2, path1, path3);
+        }
+    }
+    // MCCreativeLab end - Add StorageBehaviour
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java b/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java
index 4f4e3ee18d586f61706504218cddc06a38ca5580..fe6ba2b27fb2e76be685744cfc9ee464efd3a8a6 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java
@@ -207,7 +207,7 @@ public class CraftOfflinePlayer implements OfflinePlayer, ConfigurationSerializa
     }
 
     private CompoundTag getData() {
-        return this.storage.load(this.profile.getName(), this.profile.getId().toString()).orElse(null);
+        return this.storage.load(getPlayer(), this.profile.getName(), this.profile.getId().toString()).orElse(null); // MCCreativeLab - Add StorageBehaviour
     }
 
     private CompoundTag getBukkitData() {
