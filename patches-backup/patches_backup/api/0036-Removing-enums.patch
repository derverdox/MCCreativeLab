From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: verdox <mail.ysp@web.de>
Date: Wed, 19 Jun 2024 21:30:20 +0000
Subject: [PATCH] Removing enums


diff --git a/src/main/java/de/verdox/mccreativelab/data/FakeEnum.java b/src/main/java/de/verdox/mccreativelab/data/FakeEnum.java
new file mode 100644
index 0000000000000000000000000000000000000000..87f9a7403c5165066743e9ad4bb6ebac8b71aa23
--- /dev/null
+++ b/src/main/java/de/verdox/mccreativelab/data/FakeEnum.java
@@ -0,0 +1,22 @@
+package de.verdox.mccreativelab.data;
+
+import org.bukkit.Keyed;
+import org.bukkit.NamespacedKey;
+import org.bukkit.Registry;
+
+import java.util.List;
+import java.util.Locale;
+
+public interface FakeEnum {
+    static <T extends Keyed> T valueOf(String name, Registry<T> storage){
+        return storage.get(NamespacedKey.minecraft(name.replace(".","_").toLowerCase(Locale.ROOT)));
+    }
+
+    static <T extends Keyed> List<T> values(Registry<T> storage){
+        return storage.stream().toList();
+    }
+
+    static String restoreEnumNameSchemeFromKey(NamespacedKey namespacedKey){
+        return namespacedKey.value().replace(".","_").toUpperCase(Locale.ROOT);
+    }
+}
diff --git a/src/main/java/io/papermc/paper/registry/RegistryKey.java b/src/main/java/io/papermc/paper/registry/RegistryKey.java
index d8716f855806471728c35b3ec34efb808a5146cf..22c609cb0fb2881fef9844d4e0b20299bbdf9bd3 100644
--- a/src/main/java/io/papermc/paper/registry/RegistryKey.java
+++ b/src/main/java/io/papermc/paper/registry/RegistryKey.java
@@ -1,13 +1,7 @@
 package io.papermc.paper.registry;
 
 import net.kyori.adventure.key.Keyed;
-import org.bukkit.Art;
-import org.bukkit.Fluid;
-import org.bukkit.GameEvent;
-import org.bukkit.JukeboxSong;
-import org.bukkit.MusicInstrument;
-import org.bukkit.Particle;
-import org.bukkit.Sound;
+import org.bukkit.*;
 import org.bukkit.attribute.Attribute;
 import org.bukkit.block.Biome;
 import org.bukkit.block.BlockType;
@@ -170,8 +164,11 @@ public sealed interface RegistryKey<T> extends Keyed permits RegistryKeyImpl {
      * API-only Registries *
      * ******************* */
     RegistryKey<Art> PAINTING_VARIANT = create("painting_variant");
+    RegistryKey<PoiType> POI_TYPE = create("point_of_interest_type");
     RegistryKey<Attribute> ATTRIBUTE = create("attribute");
     RegistryKey<EntityType> ENTITY_TYPE = create("entity_type");
+    RegistryKey<EntitySchedule> ENTITY_SCHEDULE = create("schedule");
+    RegistryKey<EntityActivity> ENTITY_ACTIVITY = create("activity");
     RegistryKey<Particle> PARTICLE_TYPE = create("particle_type");
     RegistryKey<PotionType> POTION = create("potion");
     RegistryKey<Sound> SOUND_EVENT = create("sound_event");
diff --git a/src/main/java/org/bukkit/EntityActivity.java b/src/main/java/org/bukkit/EntityActivity.java
new file mode 100644
index 0000000000000000000000000000000000000000..c7bcd6987ae99ba7061507ec3536ebb62132e306
--- /dev/null
+++ b/src/main/java/org/bukkit/EntityActivity.java
@@ -0,0 +1,46 @@
+package org.bukkit;
+
+import com.google.common.base.Preconditions;
+import org.jetbrains.annotations.NotNull;
+
+public interface EntityActivity extends Keyed {
+    EntityActivity CORE = getActivity("core");
+    EntityActivity IDLE = getActivity("idle");
+    EntityActivity WORK = getActivity("work");
+    EntityActivity PLAY = getActivity("play");
+    EntityActivity REST = getActivity("rest");
+    EntityActivity MEET = getActivity("meet");
+    EntityActivity PANIC = getActivity("panic");
+    EntityActivity RAID = getActivity("raid");
+    EntityActivity PRE_RAID = getActivity("pre_raid");
+    EntityActivity HIDE = getActivity("hide");
+    EntityActivity FIGHT = getActivity("fight");
+    EntityActivity CELEBRATE = getActivity("celebrate");
+    EntityActivity ADMIRE_ITEM = getActivity("admire_item");
+    EntityActivity AVOID = getActivity("avoid");
+    EntityActivity RIDE = getActivity("ride");
+    EntityActivity PLAY_DEAD = getActivity("play_dead");
+    EntityActivity LONG_JUMP = getActivity("long_jump");
+    EntityActivity RAM = getActivity("ram");
+    EntityActivity TONGUE = getActivity("tongue");
+    EntityActivity SWIM = getActivity("swim");
+    EntityActivity LAY_SPAWN = getActivity("lay_spawn");
+    EntityActivity SNIFF = getActivity("sniff");
+    EntityActivity INVESTIGATE = getActivity("investigate");
+    EntityActivity ROAR = getActivity("roar");
+    EntityActivity EMERGE = getActivity("emerge");
+    EntityActivity DIG = getActivity("dig");
+
+    @NotNull
+    static EntityActivity getActivity(@NotNull NamespacedKey namespacedKey) {
+        EntityActivity entityActivity = Registry.ENTITY_ACTIVITY.get(namespacedKey);
+        Preconditions.checkNotNull(entityActivity, "No EntityActivity found for %s", namespacedKey);
+        return entityActivity;
+    }
+
+    @NotNull
+    static EntityActivity getActivity(@NotNull String key) {
+        return getActivity(NamespacedKey.minecraft(key));
+    }
+
+}
diff --git a/src/main/java/org/bukkit/EntitySchedule.java b/src/main/java/org/bukkit/EntitySchedule.java
new file mode 100644
index 0000000000000000000000000000000000000000..7f13fb04cd2749ca7ee416dd36abf9fc431b643a
--- /dev/null
+++ b/src/main/java/org/bukkit/EntitySchedule.java
@@ -0,0 +1,24 @@
+package org.bukkit;
+
+import com.google.common.base.Preconditions;
+import org.jetbrains.annotations.NotNull;
+
+public interface EntitySchedule extends Keyed {
+
+    EntitySchedule EMPTY = getSchedule("empty");
+    EntitySchedule SIMPLE = getSchedule("simple");
+    EntitySchedule VILLAGER_BABY = getSchedule("villager_baby");
+    EntitySchedule VILLAGER_DEFAULT = getSchedule("villager_default");
+
+    @NotNull
+    static EntitySchedule getSchedule(@NotNull NamespacedKey namespacedKey) {
+        EntitySchedule entitySchedule = Registry.ENTITY_SCHEDULE.get(namespacedKey);
+        Preconditions.checkNotNull(entitySchedule, "No EntitySchedule found for %s", namespacedKey);
+        return entitySchedule;
+    }
+
+    @NotNull
+    static EntitySchedule getSchedule(@NotNull String key) {
+        return getSchedule(NamespacedKey.minecraft(key));
+    }
+}
diff --git a/src/main/java/org/bukkit/PoiType.java b/src/main/java/org/bukkit/PoiType.java
new file mode 100644
index 0000000000000000000000000000000000000000..3cd35eddfb5e7d6d728eb46309e58e62865529db
--- /dev/null
+++ b/src/main/java/org/bukkit/PoiType.java
@@ -0,0 +1,39 @@
+package org.bukkit;
+
+import com.google.common.base.Preconditions;
+import org.jetbrains.annotations.NotNull;
+
+public interface PoiType extends Keyed, net.kyori.adventure.translation.Translatable {
+    PoiType ARMORER = getPoiType("armorer");
+    PoiType BUTCHER = getPoiType("butcher");
+    PoiType CARTOGRAPHER = getPoiType("cartographer");
+    PoiType CLERIC = getPoiType("cleric");
+    PoiType FARMER = getPoiType("farmer");
+    PoiType FISHERMAN = getPoiType("fisherman");
+    PoiType FLETCHER = getPoiType("fletcher");
+    PoiType LEATHERWORKER = getPoiType("leatherworker");
+    PoiType LIBRARIAN = getPoiType("librarian");
+    PoiType MASON = getPoiType("mason");
+    PoiType SHEPHERD = getPoiType("shepherd");
+    PoiType TOOLSMITH = getPoiType("toolsmith");
+    PoiType WEAPONSMITH = getPoiType("weaponsmith");
+    PoiType HOME = getPoiType("home");
+    PoiType MEETING = getPoiType("meeting");
+    PoiType BEEHIVE = getPoiType("beehive");
+    PoiType BEE_NEST = getPoiType("bee_nest");
+    PoiType NETHER_PORTAL = getPoiType("nether_portal");
+    PoiType LODESTONE = getPoiType("lodestone");
+    PoiType LIGHTNING_ROD = getPoiType("lightning_rod");
+    
+    @NotNull
+    static PoiType getPoiType(@NotNull NamespacedKey namespacedKey) {
+        PoiType poiType = Registry.POI_TYPE.get(namespacedKey);
+        Preconditions.checkNotNull(poiType, "No PoiType found for %s", namespacedKey);
+        return poiType;
+    }
+
+    @NotNull
+    static PoiType getPoiType(@NotNull String key) {
+        return getPoiType(NamespacedKey.minecraft(key));
+    }
+}
diff --git a/src/main/java/org/bukkit/Registry.java b/src/main/java/org/bukkit/Registry.java
index d81f687cba38ec930c555b001afc0df93c21731b..cab6256d61872dd10b64407dba88b3b3ede300b5 100644
--- a/src/main/java/org/bukkit/Registry.java
+++ b/src/main/java/org/bukkit/Registry.java
@@ -10,6 +10,8 @@ import java.util.Objects;
 import java.util.function.Predicate;
 import java.util.stream.Stream;
 import java.util.stream.StreamSupport;
+
+import io.papermc.paper.registry.RegistryKey;
 import org.bukkit.advancement.Advancement;
 import org.bukkit.attribute.Attribute;
 import org.bukkit.block.Biome;
@@ -83,7 +85,7 @@ public interface Registry<T extends Keyed> extends Iterable<T> {
      *
      * @see Attribute
      */
-    Registry<Attribute> ATTRIBUTE = new SimpleRegistry<>(Attribute.class);
+    Registry<Attribute> ATTRIBUTE = io.papermc.paper.registry.RegistryAccess.registryAccess().getRegistry(RegistryKey.ATTRIBUTE); // Paper
     /**
      * Server banner patterns.
      *
@@ -178,6 +180,26 @@ public interface Registry<T extends Keyed> extends Iterable<T> {
      * @see Material
      */
     Registry<Material> MATERIAL = new SimpleRegistry<>(Material.class, (mat) -> !mat.isLegacy());
+    /**
+     * Poi Types.
+     *
+     * @see PoiType
+     */
+    Registry<PoiType> POI_TYPE = io.papermc.paper.registry.RegistryAccess.registryAccess().getRegistry(RegistryKey.POI_TYPE); // Paper
+
+    /**
+     * Entity Schedules.
+     *
+     * @see EntitySchedule
+     */
+    Registry<EntitySchedule> ENTITY_SCHEDULE = io.papermc.paper.registry.RegistryAccess.registryAccess().getRegistry(RegistryKey.ENTITY_SCHEDULE); // Paper
+
+    /**
+     * Entity Activities.
+     *
+     * @see EntityActivity
+     */
+    Registry<EntityActivity> ENTITY_ACTIVITY = io.papermc.paper.registry.RegistryAccess.registryAccess().getRegistry(RegistryKey.ENTITY_ACTIVITY); // Paper
     /**
      * Server menus.
      *
diff --git a/src/main/java/org/bukkit/attribute/Attribute.java b/src/main/java/org/bukkit/attribute/Attribute.java
index 947874c0172b690e7752e49b7bec64e0c0308515..da85d1e211f93b5ceba95878e3d6a8f3c3bf2ef5 100644
--- a/src/main/java/org/bukkit/attribute/Attribute.java
+++ b/src/main/java/org/bukkit/attribute/Attribute.java
@@ -9,80 +9,80 @@ import org.jetbrains.annotations.NotNull;
 /**
  * Types of attributes which may be present on an {@link Attributable}.
  */
-public enum Attribute implements Keyed, Translatable, net.kyori.adventure.translation.Translatable { // Paper - Adventure translations
-
+public abstract class Attribute implements Keyed, net.kyori.adventure.translation.Translatable { // Paper - Adventure translations
     /**
      * Maximum health of an Entity.
      */
-    GENERIC_MAX_HEALTH("generic.max_health"),
+
+    public static final Attribute GENERIC_MAX_HEALTH = getAttribute("generic.max_health");
     /**
      * Range at which an Entity will follow others.
      */
-    GENERIC_FOLLOW_RANGE("generic.follow_range"),
+    public static final Attribute GENERIC_FOLLOW_RANGE = getAttribute("generic.follow_range");
     /**
      * Resistance of an Entity to knockback.
      */
-    GENERIC_KNOCKBACK_RESISTANCE("generic.knockback_resistance"),
+    public static final Attribute GENERIC_KNOCKBACK_RESISTANCE = getAttribute("generic.knockback_resistance");
     /**
      * Movement speed of an Entity.
      */
-    GENERIC_MOVEMENT_SPEED("generic.movement_speed"),
+    public static final Attribute GENERIC_MOVEMENT_SPEED = getAttribute("generic.movement_speed");
     /**
      * Flying speed of an Entity.
      */
-    GENERIC_FLYING_SPEED("generic.flying_speed"),
+    public static final Attribute GENERIC_FLYING_SPEED = getAttribute("generic.flying_speed");
     /**
      * Attack damage of an Entity.
      */
-    GENERIC_ATTACK_DAMAGE("generic.attack_damage"),
+    public static final Attribute GENERIC_ATTACK_DAMAGE = getAttribute("generic.attack_damage");
     /**
      * Attack knockback of an Entity.
      */
-    GENERIC_ATTACK_KNOCKBACK("generic.attack_knockback"),
+    public static final Attribute GENERIC_ATTACK_KNOCKBACK = getAttribute("generic.attack_knockback");
     /**
      * Attack speed of an Entity.
      */
-    GENERIC_ATTACK_SPEED("generic.attack_speed"),
+    public static final Attribute GENERIC_ATTACK_SPEED = getAttribute("generic.attack_speed");
     /**
      * Armor bonus of an Entity.
      */
-    GENERIC_ARMOR("generic.armor"),
+    public static final Attribute GENERIC_ARMOR = getAttribute("generic.armor");
     /**
      * Armor durability bonus of an Entity.
      */
-    GENERIC_ARMOR_TOUGHNESS("generic.armor_toughness"),
+    public static final Attribute GENERIC_ARMOR_TOUGHNESS = getAttribute("generic.armor_toughness");
     /**
      * The fall damage multiplier of an Entity.
      */
-    GENERIC_FALL_DAMAGE_MULTIPLIER("generic.fall_damage_multiplier"),
+    public static final Attribute GENERIC_FALL_DAMAGE_MULTIPLIER = getAttribute("generic.fall_damage_multiplier");
     /**
      * Luck bonus of an Entity.
      */
-    GENERIC_LUCK("generic.luck"),
+    public static final Attribute GENERIC_LUCK = getAttribute("generic.luck");
     /**
      * Maximum absorption of an Entity.
      */
-    GENERIC_MAX_ABSORPTION("generic.max_absorption"),
+    public static final Attribute GENERIC_MAX_ABSORPTION = getAttribute("generic.max_absorption");
     /**
      * The distance which an Entity can fall without damage.
      */
-    GENERIC_SAFE_FALL_DISTANCE("generic.safe_fall_distance"),
+    public static final Attribute GENERIC_SAFE_FALL_DISTANCE = getAttribute("generic.safe_fall_distance");
     /**
      * The relative scale of an Entity.
      */
-    GENERIC_SCALE("generic.scale"),
+    public static final Attribute GENERIC_SCALE = getAttribute("generic.scale");
     /**
      * The height which an Entity can walk over.
      */
-    GENERIC_STEP_HEIGHT("generic.step_height"),
+    public static final Attribute GENERIC_STEP_HEIGHT = getAttribute("generic.step_height");
     /**
      * The gravity applied to an Entity.
      */
-    GENERIC_GRAVITY("generic.gravity"),
+    public static final Attribute GENERIC_GRAVITY = getAttribute("generic.gravity");
     /**
      * Strength with which an Entity will jump.
      */
-    GENERIC_JUMP_STRENGTH("generic.jump_strength"),
+    public static final Attribute GENERIC_JUMP_STRENGTH = getAttribute("generic.jump_strength");
     /**
      * How long an entity remains burning after ingition.
      */
@@ -106,15 +106,15 @@ public enum Attribute implements Keyed, Translatable, net.kyori.adventure.transl
     /**
      * The block reach distance of a Player.
      */
-    PLAYER_BLOCK_INTERACTION_RANGE("player.block_interaction_range"),
+    public static final Attribute PLAYER_BLOCK_INTERACTION_RANGE = getAttribute("player.block_interaction_range");
     /**
      * The entity reach distance of a Player.
      */
-    PLAYER_ENTITY_INTERACTION_RANGE("player.entity_interaction_range"),
+    public static final Attribute PLAYER_ENTITY_INTERACTION_RANGE = getAttribute("player.entity_interaction_range");
     /**
      * Block break speed of a Player.
      */
-    PLAYER_BLOCK_BREAK_SPEED("player.block_break_speed"),
+    public static final Attribute PLAYER_BLOCK_BREAK_SPEED = getAttribute("player.block_break_speed");
     /**
      * Mining speed for correct tools.
      */
@@ -134,31 +134,34 @@ public enum Attribute implements Keyed, Translatable, net.kyori.adventure.transl
     /**
      * Chance of a zombie to spawn reinforcements.
      */
-    ZOMBIE_SPAWN_REINFORCEMENTS("zombie.spawn_reinforcements");
+    public static final Attribute ZOMBIE_SPAWN_REINFORCEMENTS = getAttribute("zombie.spawn_reinforcements");
 
-    private final NamespacedKey key;
+    public String name(){
+        return de.verdox.mccreativelab.data.FakeEnum.restoreEnumNameSchemeFromKey(getKey());
+    }
 
-    private Attribute(String key) {
-        this.key = NamespacedKey.minecraft(key);
+    public static Attribute valueOf(String name){
+        return de.verdox.mccreativelab.data.FakeEnum.valueOf(name, org.bukkit.Registry.ATTRIBUTE);
+    }
+    public static Attribute[] values(){
+        return de.verdox.mccreativelab.data.FakeEnum.values(org.bukkit.Registry.ATTRIBUTE).toArray(Attribute[]::new);
     }
 
     @NotNull
-    @Override
-    public NamespacedKey getKey() {
-        return key;
+    public static Attribute getAttribute(@NotNull NamespacedKey namespacedKey) {
+        Attribute attribute = org.bukkit.Registry.ATTRIBUTE.get(namespacedKey);
+        com.google.common.base.Preconditions.checkNotNull(attribute, "No Attribute found for %s", namespacedKey);
+        return attribute;
     }
-
+    // Paper start
     @NotNull
-    @Override
-    public String getTranslationKey() {
-        return Bukkit.getUnsafe().getTranslationKey(this);
+    public static Attribute getAttribute(@NotNull String key) {
+        return getAttribute(NamespacedKey.minecraft(key));
     }
 
-    // Paper start
-    @SuppressWarnings("deprecation")
     @Override
-    public @NotNull String translationKey() {
-        return Bukkit.getUnsafe().getTranslationKey(this);
+    public @org.jetbrains.annotations.NotNull String translationKey() {
+        return "attribute.name." + this.getKey().getKey();
     }
     // Paper end
 }
