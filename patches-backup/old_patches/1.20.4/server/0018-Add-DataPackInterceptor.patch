From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: derverdox <mail.ysp@web.de>
Date: Wed, 17 Jan 2024 02:26:52 +0100
Subject: [PATCH] Add DataPackInterceptor


diff --git a/src/main/java/de/verdox/mccreativelab/CraftDataPackInterceptor.java b/src/main/java/de/verdox/mccreativelab/CraftDataPackInterceptor.java
new file mode 100644
index 0000000000000000000000000000000000000000..1134449a2442b2d25639eed487002eb7597937b3
--- /dev/null
+++ b/src/main/java/de/verdox/mccreativelab/CraftDataPackInterceptor.java
@@ -0,0 +1,128 @@
+package de.verdox.mccreativelab;
+
+import com.google.gson.JsonObject;
+import com.google.gson.JsonParser;
+import de.verdox.mccreativelab.data.DataPackInterceptor;
+import net.kyori.adventure.key.Key;
+import net.minecraft.resources.ResourceLocation;
+import net.minecraft.server.packs.resources.IoSupplier;
+import com.mojang.logging.LogUtils;
+import javax.annotation.Nullable;
+import java.io.*;
+import java.nio.file.Path;
+import java.util.*;
+import java.util.function.Consumer;
+import org.apache.commons.io.FilenameUtils;
+import org.slf4j.Logger;
+import java.nio.charset.StandardCharsets;
+import java.util.function.Function;
+
+public class CraftDataPackInterceptor implements DataPackInterceptor {
+    private static final Logger LOGGER = LogUtils.getLogger();
+    private final Set<PackAssetType> excludedTypes = new HashSet<>();
+    private final Set<String> stringPatternExcludes = new HashSet<>();
+    private final Map<PackAssetType, Set<Key>> exclusions = new HashMap<>();
+    private final Map<PackAssetType, Map<Key, List<Consumer<DataPackAsset>>>> modifies = new HashMap<>();
+    private Consumer<DataPackAsset> installCallback;
+
+    @Override
+    public DataPackInterceptor exclude(String pathContains) {
+        stringPatternExcludes.add(pathContains);
+        return this;
+    }
+
+    @Override
+    public DataPackInterceptor exclude(PackAssetType packAssetType) {
+        excludedTypes.add(packAssetType);
+        return this;
+    }
+
+    @Override
+    public DataPackInterceptor modify(PackAssetType packAssetType, Key key, Consumer<DataPackAsset> consumer) {
+        modifies.computeIfAbsent(packAssetType, packAssetType1 -> new HashMap<>()).computeIfAbsent(key, key1 -> new LinkedList<>()).add(consumer);
+        return this;
+    }
+
+
+    @Override
+    public DataPackInterceptor exclude(PackAssetType packAssetType, Key key) {
+        exclusions.computeIfAbsent(packAssetType, packAssetType1 -> new HashSet<>()).add(key);
+        return this;
+    }
+
+    @Override
+    public DataPackInterceptor onInstall(Consumer<DataPackAsset> installCallback) {
+        this.installCallback = installCallback;
+        return this;
+    }
+
+    @Nullable
+    public IoSupplier<InputStream> evaluate(ResourceLocation resourceLocation, Path assetPath, IoSupplier<InputStream> ioSupplier) {
+
+        String assetTypeName = resourceLocation.toString().split("/")[0];
+        int indexOfStartKey = assetTypeName.indexOf(":");
+        assetTypeName = assetTypeName.substring(indexOfStartKey + 1);
+        PackAssetType packAssetType = PackAssetType.getByParentFolder(assetTypeName);
+        Key key = Key.key(resourceLocation.getNamespace(), FilenameUtils.removeExtension(resourceLocation.getPath().replace(assetTypeName+"/","")));
+        if(packAssetType == null) {
+            LOGGER.error("Could not determine PackAssetType "+assetTypeName+" from "+resourceLocation);
+            return ioSupplier;
+        }
+
+        if(excludedTypes.contains(packAssetType) || stringPatternExcludes.stream().anyMatch(s -> resourceLocation.toString().contains(s)) || (exclusions.containsKey(packAssetType) && exclusions.get(packAssetType).contains(key))) {
+            LOGGER.info("Removing "+packAssetType.name()+": "+key);
+            return null;
+        }
+
+        try (InputStream inputStream = ioSupplier.get()) {
+            ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
+
+            // Lies den Inhalt des InputStreams und schreibe ihn in den ByteArrayOutputStream
+            byte[] buffer = new byte[1024];
+            int bytesRead;
+            while ((bytesRead = inputStream.read(buffer)) != -1) {
+                byteArrayOutputStream.write(buffer, 0, bytesRead);
+            }
+
+            // Konvertiere den Inhalt des ByteArrayOutputStreams zu einem String
+            String jsonString = byteArrayOutputStream.toString("UTF-8");
+
+            // Verwende GSON, um den JSON-String in ein JsonObject zu konvertieren
+            JsonObject jsonObject;
+            try {
+                jsonObject  = JsonParser.parseString(jsonString).getAsJsonObject();
+            } catch (Throwable e) {
+                return ioSupplier;
+            }
+
+
+            DataPackAsset dataPackAsset = new DataPackAsset(packAssetType, key, jsonObject);
+
+            if(modifies.containsKey(packAssetType)){
+                Map<Key, List<Consumer<DataPackAsset>>> map = modifies.get(packAssetType);
+                if(map.containsKey(key)){
+                    List<Consumer<DataPackAsset>> modifiers = map.get(key);
+                    LOGGER.info("Patching "+packAssetType.name()+": "+key);
+                    modifiers.forEach(dataPackAssetConsumer -> dataPackAssetConsumer.accept(dataPackAsset));
+                }
+            }
+
+            if(this.installCallback != null)
+                this.installCallback.accept(dataPackAsset);
+
+            // Hier kannst du das JsonObject nach Belieben manipulieren
+            // Zum Beispiel: jsonObject.addProperty("neuesFeld", "Wert");
+
+            // Schließe den FileInputStream
+            inputStream.close();
+
+            // Schließe den ByteArrayOutputStream
+            byteArrayOutputStream.close();
+            return () -> new ByteArrayInputStream(jsonObject.toString().getBytes(StandardCharsets.UTF_8));
+
+        } catch (IOException e) {
+            LOGGER.error("Error while manipulating DataPack resource installation", e);
+            return ioSupplier;
+        }
+    }
+}
diff --git a/src/main/java/de/verdox/mccreativelab/CreativeLabImpl.java b/src/main/java/de/verdox/mccreativelab/CreativeLabImpl.java
index 863d73d799e9838534faea0254d5b37e7f7748cb..c458c6d2b01ad827fb02aeff87a568cd41f77283 100644
--- a/src/main/java/de/verdox/mccreativelab/CreativeLabImpl.java
+++ b/src/main/java/de/verdox/mccreativelab/CreativeLabImpl.java
@@ -2,4 +2,9 @@ package de.verdox.mccreativelab;
 
 public final class CreativeLabImpl implements CreativeLab {
 
+    private final de.verdox.mccreativelab.data.DataPackInterceptor dataPackInterceptor = new CraftDataPackInterceptor();
+    @Override
+    public de.verdox.mccreativelab.data.DataPackInterceptor getDataPackInterceptor() {
+        return dataPackInterceptor;
+    }
 }
diff --git a/src/main/java/net/minecraft/server/packs/PathPackResources.java b/src/main/java/net/minecraft/server/packs/PathPackResources.java
index 3edd14ce90edf98798b89921ad18547809de5d2c..6b15addf9441717ad045646990864ab0f819304a 100644
--- a/src/main/java/net/minecraft/server/packs/PathPackResources.java
+++ b/src/main/java/net/minecraft/server/packs/PathPackResources.java
@@ -89,7 +89,13 @@ public class PathPackResources extends AbstractPackResources {
                 if (resourceLocation == null) {
                     Util.logAndPauseIfInIde(String.format(Locale.ROOT, "Invalid path in pack: %s:%s, ignoring", namespace, string2));
                 } else {
-                    consumer.accept(resourceLocation, IoSupplier.create(foundPath));
+                    // MCCLab start - Add PackInterceptor
+                    de.verdox.mccreativelab.CraftDataPackInterceptor craft = (de.verdox.mccreativelab.CraftDataPackInterceptor) de.verdox.mccreativelab.MCCreativeLab.getDataPackInterceptor();
+                    IoSupplier<InputStream> result = craft.evaluate(resourceLocation, foundPath, IoSupplier.create(foundPath));
+                    if(result == null)
+                        return;
+                    consumer.accept(resourceLocation, result);
+                    // MCCLab end - Add PackInterceptor
                 }
 
             });
