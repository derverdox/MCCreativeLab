From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: verdox <mail.ysp@web.de>
Date: Tue, 28 May 2024 15:22:09 +0000
Subject: [PATCH] Temporary patch


diff --git a/src/main/java/de/verdox/mccreativelab/CraftDataPackInterceptor.java b/src/main/java/de/verdox/mccreativelab/CraftDataPackInterceptor.java
index c3b98096686c23a913c83b8459eeab2166ff48d3..8d109c75c044de07d7dc6c5d22e8d81f6ff597ee 100644
--- a/src/main/java/de/verdox/mccreativelab/CraftDataPackInterceptor.java
+++ b/src/main/java/de/verdox/mccreativelab/CraftDataPackInterceptor.java
@@ -7,21 +7,26 @@ import net.kyori.adventure.key.Key;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.packs.resources.IoSupplier;
 import com.mojang.logging.LogUtils;
+
 import javax.annotation.Nullable;
 import java.io.*;
 import java.nio.file.Path;
 import java.util.*;
 import java.util.function.Consumer;
+
 import org.apache.commons.io.FilenameUtils;
 import org.slf4j.Logger;
+
 import java.nio.charset.StandardCharsets;
+import java.util.function.Function;
 
 public class CraftDataPackInterceptor implements DataPackInterceptor {
     private static final Logger LOGGER = LogUtils.getLogger();
     private final Set<PackAssetType> excludedTypes = new HashSet<>();
     private final Set<String> stringPatternExcludes = new HashSet<>();
     private final Map<PackAssetType, Set<Key>> exclusions = new HashMap<>();
-    private final Map<PackAssetType, Map<Key, List<Consumer<DataPackAsset>>>> modifies = new HashMap<>();
+    private final Map<PackAssetType, Map<Key, List<Function<DataPackAsset, Boolean>>>> modifies = new HashMap<>();
+    private final Set<Function<DataPackAsset, Boolean>> globalModifiers = new HashSet<>();
     private Consumer<DataPackAsset> installCallback;
 
     @Override
@@ -37,11 +42,17 @@ public class CraftDataPackInterceptor implements DataPackInterceptor {
     }
 
     @Override
-    public DataPackInterceptor modify(PackAssetType packAssetType, Key key, Consumer<DataPackAsset> consumer) {
+    public DataPackInterceptor modify(PackAssetType packAssetType, Key key, Function<DataPackAsset, Boolean> consumer) {
         modifies.computeIfAbsent(packAssetType, packAssetType1 -> new HashMap<>()).computeIfAbsent(key, key1 -> new LinkedList<>()).add(consumer);
         return this;
     }
 
+    @Override
+    public DataPackInterceptor modify(Function<DataPackAsset, Boolean> modifier) {
+        globalModifiers.add(modifier);
+        return this;
+    }
+
 
     @Override
     public DataPackInterceptor exclude(PackAssetType packAssetType, Key key) {
@@ -62,14 +73,14 @@ public class CraftDataPackInterceptor implements DataPackInterceptor {
         int indexOfStartKey = assetTypeName.indexOf(":");
         assetTypeName = assetTypeName.substring(indexOfStartKey + 1);
         PackAssetType packAssetType = PackAssetType.getByParentFolder(assetTypeName);
-        Key key = Key.key(resourceLocation.getNamespace(), FilenameUtils.removeExtension(resourceLocation.getPath().replace(assetTypeName+"/","")));
-        if(packAssetType == null) {
-            LOGGER.error("Could not determine PackAssetType "+assetTypeName+" from "+resourceLocation);
+        Key key = Key.key(resourceLocation.getNamespace(), FilenameUtils.removeExtension(resourceLocation.getPath().replace(assetTypeName + "/", "")));
+        if (packAssetType == null) {
+            LOGGER.error("Could not determine PackAssetType " + assetTypeName + " from " + resourceLocation);
             return ioSupplier;
         }
 
-        if(excludedTypes.contains(packAssetType) || stringPatternExcludes.stream().anyMatch(s -> resourceLocation.toString().contains(s)) || (exclusions.containsKey(packAssetType) && exclusions.get(packAssetType).contains(key))) {
-            LOGGER.info("Removing "+packAssetType.name()+": "+key);
+        if (excludedTypes.contains(packAssetType) || stringPatternExcludes.stream().anyMatch(s -> resourceLocation.toString().contains(s)) || (exclusions.containsKey(packAssetType) && exclusions.get(packAssetType).contains(key))) {
+            LOGGER.info("Removing " + packAssetType.name() + ": " + key);
             return null;
         }
 
@@ -89,7 +100,7 @@ public class CraftDataPackInterceptor implements DataPackInterceptor {
             // Verwende GSON, um den JSON-String in ein JsonObject zu konvertieren
             JsonObject jsonObject;
             try {
-                jsonObject  = JsonParser.parseString(jsonString).getAsJsonObject();
+                jsonObject = JsonParser.parseString(jsonString).getAsJsonObject();
             } catch (Throwable e) {
                 return ioSupplier;
             }
@@ -97,16 +108,27 @@ public class CraftDataPackInterceptor implements DataPackInterceptor {
 
             DataPackAsset dataPackAsset = new DataPackAsset(packAssetType, key, jsonObject);
 
-            if(modifies.containsKey(packAssetType)){
-                Map<Key, List<Consumer<DataPackAsset>>> map = modifies.get(packAssetType);
-                if(map.containsKey(key)){
-                    List<Consumer<DataPackAsset>> modifiers = map.get(key);
-                    LOGGER.info("Patching "+packAssetType.name()+": "+key);
-                    modifiers.forEach(dataPackAssetConsumer -> dataPackAssetConsumer.accept(dataPackAsset));
+            boolean shouldLoad = true;
+            for (Function<DataPackAsset, Boolean> globalModifier : globalModifiers) {
+                if (!globalModifier.apply(dataPackAsset)) shouldLoad = false;
+            }
+
+            if (modifies.containsKey(packAssetType)) {
+                Map<Key, List<Function<DataPackAsset, Boolean>>> map = modifies.get(packAssetType);
+                if (map.containsKey(key)) {
+                    List<Function<DataPackAsset, Boolean>> modifiers = map.get(key);
+                    LOGGER.info("Patching " + packAssetType.name() + ": " + key);
+
+                    for (Function<DataPackAsset, Boolean> modifier : modifiers) {
+                        if (!modifier.apply(dataPackAsset)) shouldLoad = false;
+                    }
+
                 }
             }
+            if (!shouldLoad)
+                return null;
 
-            if(this.installCallback != null)
+            if (this.installCallback != null)
                 this.installCallback.accept(dataPackAsset);
 
             // Hier kannst du das JsonObject nach Belieben manipulieren
diff --git a/src/main/java/de/verdox/mccreativelab/CreativeLabImpl.java b/src/main/java/de/verdox/mccreativelab/CreativeLabImpl.java
index a66931497100b559bb62964c1a272cb00ba8dc55..5bf93093b289526098d52eff92dae8a0437d8747 100644
--- a/src/main/java/de/verdox/mccreativelab/CreativeLabImpl.java
+++ b/src/main/java/de/verdox/mccreativelab/CreativeLabImpl.java
@@ -1,5 +1,7 @@
 package de.verdox.mccreativelab;
 
+import org.jetbrains.annotations.NotNull;
+
 public final class CreativeLabImpl implements CreativeLab {
 
     private final de.verdox.mccreativelab.data.DataPackInterceptor dataPackInterceptor = new CraftDataPackInterceptor();
@@ -18,4 +20,39 @@ public final class CreativeLabImpl implements CreativeLab {
     public de.verdox.mccreativelab.advancement.AdvancementBuilder createAdvancement() {
         return new de.verdox.mccreativelab.advancement.CraftAdvancementBuilder();
     }
+
+    @Override
+    public org.bukkit.inventory.Inventory openCustomContainerMenu(@NotNull de.verdox.mccreativelab.container.CustomInventory customInventory, @NotNull org.bukkit.entity.Player player, @NotNull net.kyori.adventure.text.Component title) {
+        return de.verdox.mccreativelab.container.CustomContainerMenu.openToPlayer(customInventory, player, title);
+    }
+
+    @Override
+    public java.util.stream.Stream<org.bukkit.block.data.BlockData> streamAllBlockDataVariants(org.bukkit.Material blockMaterial) {
+        if(!blockMaterial.isBlock())
+            throw new IllegalArgumentException("Please provide a valid block. "+blockMaterial.getKey().asString()+" is not a valid block type.");
+        net.minecraft.world.level.block.Block vanillaBlockType = org.bukkit.craftbukkit.block.data.CraftBlockData.newData(blockMaterial, null).getState().getBlock();
+        return vanillaBlockType.getStateDefinition().getPossibleStates().stream().map(org.bukkit.craftbukkit.block.data.CraftBlockData::createData);
+    }
+
+    @Override
+    public java.util.Iterator<org.bukkit.block.data.BlockData> iterateThroughAllBlockDataVariants(org.bukkit.Material blockMaterial) {
+        if(!blockMaterial.isBlock())
+            throw new IllegalArgumentException("Please provide a valid block. "+blockMaterial.getKey().asString()+" is not a valid block type.");
+
+        net.minecraft.world.level.block.Block vanillaBlockType = org.bukkit.craftbukkit.block.data.CraftBlockData.newData(blockMaterial, null).getState().getBlock();
+        java.util.Iterator<net.minecraft.world.level.block.state.BlockState> iter = vanillaBlockType.getStateDefinition().getPossibleStates().iterator();
+
+        return new java.util.Iterator<>() {
+
+            @Override
+            public boolean hasNext() {
+                return iter.hasNext();
+            }
+
+            @Override
+            public org.bukkit.block.data.BlockData next() {
+                return org.bukkit.craftbukkit.block.data.CraftBlockData.createData(iter.next());
+            }
+        };
+    }
 }
diff --git a/src/main/java/de/verdox/mccreativelab/behaviour/BlockBehaviourUtil.java b/src/main/java/de/verdox/mccreativelab/behaviour/BlockBehaviourUtil.java
index f52f75900a74dc271b551fd55b456019e18a779b..5dbca5019a65f8133359b0eb37fe2cb1f7890064 100644
--- a/src/main/java/de/verdox/mccreativelab/behaviour/BlockBehaviourUtil.java
+++ b/src/main/java/de/verdox/mccreativelab/behaviour/BlockBehaviourUtil.java
@@ -16,8 +16,10 @@ import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.LevelReader;
+import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.phys.BlockHitResult;
+import org.bukkit.Bukkit;
 import org.bukkit.Location;
 import org.bukkit.Material;
 import org.bukkit.block.Block;
@@ -70,6 +72,9 @@ public class BlockBehaviourUtil extends BehaviourUtil{
     }
 
     public boolean isRandomlyTicking(Level world, int x, int y, int z, BlockState blockState, boolean vanillaValue) {
+        if(blockState.getBlock().equals(Blocks.NOTE_BLOCK)){
+            Bukkit.getLogger().info("Checking: if has behaviour "+BlockBehaviour.BLOCK_BEHAVIOUR.isImplemented(getMaterial(blockState)));
+        }
         return BlockBehaviourUtil.evaluateBoolean(BlockBehaviour.BLOCK_BEHAVIOUR, getMaterial(blockState), blockBehaviour -> blockBehaviour.isBlockRandomlyTicking(world
             .getWorld().getBlockAt(x, y, z), blockState.createCraftBlockData()), () -> vanillaValue);
     }
@@ -95,14 +100,24 @@ public class BlockBehaviourUtil extends BehaviourUtil{
         }, vanillaLogic, Converter.InteractionResult.INSTANCE);
     }
 
-    public void onPlaceCallback(BlockState state, Level world, BlockPos pos, BlockState oldState, boolean notify) {
+    public void onUseCallback(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit, InteractionResult interactionResult) {
+        BlockBehaviourUtil.evaluateCallback(BlockBehaviour.BLOCK_BEHAVIOUR, getMaterial(state), blockBehaviour -> {
+            Block block = world.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ());
+            BlockFace blockFace = toBukkitBlockFace(hit.getDirection());
+            EquipmentSlot equipmentSlot = hand.equals(InteractionHand.MAIN_HAND) ? EquipmentSlot.HAND : EquipmentSlot.OFF_HAND;
+            RayTraceResult rayTraceResult = new RayTraceResult(new Vector(hit.getLocation().x(), hit.getLocation().y(), hit.getLocation().z()), block, blockFace);
+            return blockBehaviour.onUseCallback(block, (org.bukkit.entity.Player) player.getBukkitEntity(), equipmentSlot, rayTraceResult, Converter.InteractionResult.INSTANCE.nmsToBukkitValue(interactionResult));
+        });
+    }
+
+    public void onPlaceCallback(BlockState state, Level world, BlockPos pos, BlockState oldState, boolean notify, boolean isProcessingBlockPlaceEvent) {
         BlockBehaviourUtil.evaluateCallback(BlockBehaviour.BLOCK_BEHAVIOUR, getMaterial(state), blockBehaviour ->
-            blockBehaviour.onPlace(new Location(world.getWorld(), pos.getX(), pos.getY(), pos.getZ()), state.createCraftBlockData(), oldState.createCraftBlockData(), notify));
+            blockBehaviour.onPlace(new Location(world.getWorld(), pos.getX(), pos.getY(), pos.getZ()), state.createCraftBlockData(), oldState.createCraftBlockData(), notify, isProcessingBlockPlaceEvent));
     }
 
-    public void onPlayerPlaceCallback(Player player, BlockState placedState, Level world, BlockPos pos) {
+    public void onPlayerPlaceCallback(Player player, ItemStack stackUsedToPlaceBlock, BlockState placedState, Level world, BlockPos pos) {
         BlockBehaviourUtil.evaluateCallback(BlockBehaviour.BLOCK_BEHAVIOUR, getMaterial(placedState), blockBehaviour ->
-            blockBehaviour.onPlayerPlace((org.bukkit.entity.Player) player.getBukkitEntity(), new Location(world.getWorld(), pos.getX(), pos.getY(), pos.getZ()), placedState.createCraftBlockData()));
+            blockBehaviour.onPlayerPlace((org.bukkit.entity.Player) player.getBukkitEntity(), stackUsedToPlaceBlock.asBukkitCopy(), new Location(world.getWorld(), pos.getX(), pos.getY(), pos.getZ()), placedState.createCraftBlockData()));
     }
 
     public void onPlayerBreakCallback(Player player, BlockState brokenState, Level world, BlockPos pos) {
@@ -156,17 +171,25 @@ public class BlockBehaviourUtil extends BehaviourUtil{
             );
     }
 
+    public void onPistonMove(BlockState movedState, Level world, BlockPos positionBeforeMove, BlockPos positionAfterMove, BlockPos positionOfPiston, Direction moveDirection) {
+        BlockBehaviourUtil.evaluateCallback(BlockBehaviour.BLOCK_BEHAVIOUR, getMaterial(movedState), blockBehaviour -> {
 
-    public void onUseCallback(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
-        BlockBehaviourUtil.evaluateCallback(BlockBehaviour.BLOCK_BEHAVIOUR, getMaterial(state), blockBehaviour -> {
-            Block block = world.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ());
-            BlockFace blockFace = toBukkitBlockFace(hit.getDirection());
-            EquipmentSlot equipmentSlot = hand.equals(InteractionHand.MAIN_HAND) ? EquipmentSlot.HAND : EquipmentSlot.OFF_HAND;
-            RayTraceResult rayTraceResult = new RayTraceResult(new Vector(hit.getLocation().x(), hit.getLocation().y(), hit.getLocation().z()), block, blockFace);
-            return blockBehaviour.onUse(block, (org.bukkit.entity.Player) player.getBukkitEntity(), equipmentSlot, rayTraceResult);
+            BlockData movedBlockData = movedState.createCraftBlockData();
+            Location posBeforeMove = new Location(world.getWorld(), positionBeforeMove.getX(), positionBeforeMove.getY(), positionBeforeMove.getZ());
+            Location posAfterMove = new Location(world.getWorld(), positionAfterMove.getX(), positionAfterMove.getY(), positionAfterMove.getZ());
+            Block piston = world.getWorld().getBlockAt(positionOfPiston.getX(), positionOfPiston.getY(), positionOfPiston.getZ());
+            Vector dir = new Vector(moveDirection.getStepX(), moveDirection.getStepY(), moveDirection.getStepZ());
+
+
+            return blockBehaviour.onPistonMoveBlock(movedBlockData, posBeforeMove, posAfterMove, piston, dir);
         });
     }
 
+
+
+
+
+
     private static BlockFace toBukkitBlockFace(Direction direction) {
         return switch (direction) {
             case DOWN -> BlockFace.DOWN;
diff --git a/src/main/java/de/verdox/mccreativelab/behaviour/InventoryHopperBehaviourUtil.java b/src/main/java/de/verdox/mccreativelab/behaviour/InventoryHopperBehaviourUtil.java
new file mode 100644
index 0000000000000000000000000000000000000000..c47e4bdd16d163bf21357be0c67c809a9e90ffbe
--- /dev/null
+++ b/src/main/java/de/verdox/mccreativelab/behaviour/InventoryHopperBehaviourUtil.java
@@ -0,0 +1,54 @@
+package de.verdox.mccreativelab.behaviour;
+
+import net.minecraft.core.Direction;
+import net.minecraft.world.Container;
+import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.level.block.entity.HopperBlockEntity;
+import org.bukkit.block.BlockFace;
+import org.bukkit.block.Hopper;
+import org.bukkit.craftbukkit.inventory.CraftInventory;
+
+import javax.annotation.Nullable;
+import java.util.function.Supplier;
+
+public class InventoryHopperBehaviourUtil extends BehaviourUtil {
+    public static boolean canPlaceItem(Container container, int slot, ItemStack stack, Supplier<Boolean> vanillaLogic) {
+        return evaluateBoolean(getBehaviour(container),
+            inventoryHopperBehaviour -> inventoryHopperBehaviour.canPlaceItem(new CraftInventory(container), slot, stack.asBukkitMirror()),
+            vanillaLogic);
+    }
+
+    public static boolean canTakeItem(Container container, HopperBlockEntity hopperBlockEntity, int slot, ItemStack stack, Supplier<Boolean> vanillaLogic) {
+        Hopper hopper = (Hopper) hopperBlockEntity.getOwner(false);
+        return evaluateBoolean(getBehaviour(container),
+            inventoryHopperBehaviour -> inventoryHopperBehaviour.canTakeItem(new CraftInventory(container), hopper, slot, stack.asBukkitMirror()),
+            vanillaLogic);
+    }
+
+    public static int[] getSlotsForFace(Container container, Direction side, Supplier<int[]> vanillaLogic){
+        return evaluate(getBehaviour(container),
+            inventoryHopperBehaviour -> inventoryHopperBehaviour.getSlotsForFace(new CraftInventory(container), BlockFace.valueOf(side.getName().toUpperCase())),
+            vanillaLogic,
+            Converter.DummyConverter.getInstance(int[].class)
+        );
+    }
+
+    public static boolean canPlaceItemThroughFace(Container container, int slot, ItemStack stack, @Nullable Direction dir, Supplier<Boolean> vanillaLogic){
+        return evaluateBoolean(getBehaviour(container),
+            inventoryHopperBehaviour -> inventoryHopperBehaviour.canPlaceItemThroughFace(new CraftInventory(container), slot, stack.asBukkitMirror(), dir == null ? null : BlockFace.valueOf(dir.getName().toUpperCase())),
+            vanillaLogic);
+    }
+
+    public static boolean canTakeItemThroughFace(Container container, HopperBlockEntity hopperBlockEntity, int slot, ItemStack stack, Direction dir, Supplier<Boolean> vanillaLogic){
+        Hopper hopper = (Hopper) hopperBlockEntity.getOwner(false);
+        return evaluateBoolean(getBehaviour(container),
+            inventoryHopperBehaviour -> inventoryHopperBehaviour.canTakeItemThroughFace(new CraftInventory(container), hopper, slot, stack.asBukkitMirror(), dir == null ? null : BlockFace.valueOf(dir.getName().toUpperCase())),
+            vanillaLogic);
+    }
+
+    public static InventoryHopperBehaviour getBehaviour(Container container) {
+        if (container.hasInventoryHopperBehaviour())
+            return container.getInventoryHopperBehaviour();
+        return null;
+    }
+}
diff --git a/src/main/java/de/verdox/mccreativelab/container/CustomContainerMenu.java b/src/main/java/de/verdox/mccreativelab/container/CustomContainerMenu.java
new file mode 100644
index 0000000000000000000000000000000000000000..e723abdde093a582bac403692f77893130718590
--- /dev/null
+++ b/src/main/java/de/verdox/mccreativelab/container/CustomContainerMenu.java
@@ -0,0 +1,175 @@
+package de.verdox.mccreativelab.container;
+
+import io.papermc.paper.adventure.PaperAdventure;
+import net.minecraft.network.chat.Component;
+import net.minecraft.world.CompoundContainer;
+import net.minecraft.world.Container;
+import net.minecraft.world.MenuProvider;
+import net.minecraft.world.SimpleContainer;
+import net.minecraft.world.entity.player.Inventory;
+import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.inventory.AbstractContainerMenu;
+import net.minecraft.world.inventory.MenuType;
+import net.minecraft.world.inventory.Slot;
+import net.minecraft.world.item.ItemStack;
+import org.bukkit.craftbukkit.entity.CraftPlayer;
+import org.bukkit.craftbukkit.inventory.CraftInventory;
+import org.bukkit.craftbukkit.inventory.CraftInventoryView;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.Objects;
+
+public class CustomContainerMenu extends AbstractContainerMenu {
+
+    public static org.bukkit.inventory.Inventory openToPlayer(@NotNull CustomInventory customInventory, @NotNull org.bukkit.entity.Player player, @NotNull net.kyori.adventure.text.Component title) {
+        Objects.requireNonNull(customInventory, "customInventory cannot be null");
+        Objects.requireNonNull(player, "player cannot be null");
+        Objects.requireNonNull(title, "title cannot be null");
+
+        Container container = new SimpleContainer(9 * 6);
+
+        ((CraftPlayer) player).getHandle().openMenu(new MenuProvider() {
+            @Override
+            public @NotNull Component getDisplayName() {
+                return PaperAdventure.asVanilla(title);
+            }
+
+            @Override
+            public @NotNull AbstractContainerMenu createMenu(int syncId, @NotNull Inventory playerInventory, @NotNull Player player) {
+                return new CustomContainerMenu(customInventory, syncId, playerInventory, container);
+            }
+        });
+        return new CraftInventory(container);
+    }
+
+
+    private CraftInventoryView bukkitEntity = null;
+
+    public CraftInventoryView getBukkitView() {
+        if (this.bukkitEntity != null) {
+            return this.bukkitEntity;
+        }
+
+
+        CraftInventory inventory;
+        if (this.container instanceof Inventory) {
+            inventory = new org.bukkit.craftbukkit.inventory.CraftInventoryPlayer((Inventory) this.container);
+        } else if (this.container instanceof CompoundContainer) {
+            inventory = new org.bukkit.craftbukkit.inventory.CraftInventoryDoubleChest((CompoundContainer) this.container);
+        } else {
+            inventory = new CraftInventory(this.container);
+        }
+
+        this.bukkitEntity = new CraftInventoryView(this.playerInventory.player.getBukkitEntity(), inventory, this);
+        return this.bukkitEntity;
+    }
+
+
+    private final CustomInventory customInventory;
+    private final Inventory playerInventory;
+    private final Container container;
+
+    protected CustomContainerMenu(CustomInventory customInventory, int syncId, Inventory playerInventory, Container inventory) {
+        super(MenuType.GENERIC_9x6, syncId);
+        this.customInventory = customInventory;
+        this.playerInventory = playerInventory;
+        this.container = inventory;
+        inventory.startOpen(playerInventory.player);
+
+        CustomInventory.Slot[] slots = customInventory.getSlots();
+
+        for (int rowCount = 0; rowCount < 6; ++rowCount) {
+            for (int slotCount = 0; slotCount < 9; ++slotCount) {
+                int index = slotCount + rowCount * 9;
+                Slot slot;
+                if (index < slots.length)
+                    slot = new WrappedSlot(inventory, index, slots[index]);
+                else
+                    slot = new Slot(inventory, index, 8 + slotCount * 18, 18 + rowCount * 18);
+                this.addSlot(slot);
+            }
+        }
+
+        for (int l = 0; l < 3; ++l) {
+            for (int i1 = 0; i1 < 9; ++i1) {
+                this.addSlot(new Slot(playerInventory, i1 + l * 9 + 9, 0, 0));
+            }
+        }
+
+        for (int index = 0; index < 9; ++index) {
+            this.addSlot(new Slot(playerInventory, index, 0, 0));
+        }
+    }
+
+    @Override
+    public ItemStack quickMoveStack(Player player, int slot) {
+        return CraftItemStack.asNMSCopy(customInventory.quickMoveStack((org.bukkit.entity.Player) player.getBukkitEntity(), slot));
+    }
+
+    @Override
+    public boolean stillValid(Player player) {
+        if (!this.checkReachable) return true;
+        return this.container.stillValid(player);
+    }
+
+    @Override
+    public void removed(Player player) {
+        super.removed(player);
+        this.container.stopOpen(player);
+    }
+
+    public Container getContainer() {
+        return container;
+    }
+
+    public static class WrappedSlot extends Slot {
+        private final CustomInventory.Slot apiSlot;
+
+        public WrappedSlot(Container inventory, int index, CustomInventory.Slot apiSlot) {
+            // Indices are only used client side
+            super(inventory, index, 0, 0);
+            this.apiSlot = apiSlot;
+        }
+
+        @Override
+        protected void onQuickCraft(ItemStack stack, int amount) {
+            apiSlot.onQuickCraft(stack.asBukkitMirror(), amount);
+        }
+
+        @Override
+        protected void onSwapCraft(int amount) {
+            apiSlot.onSwapCraft(amount);
+        }
+
+        @Override
+        public void onTake(Player player, ItemStack stack) {
+            apiSlot.onTake((org.bukkit.entity.Player) player.getBukkitEntity(), stack.asBukkitMirror());
+        }
+
+        @Override
+        public boolean mayPlace(ItemStack stack) {
+            return apiSlot.mayPlace(stack.getBukkitStack());
+        }
+
+        @Override
+        public int getMaxStackSize() {
+            return apiSlot.getMaxStackSize();
+        }
+
+        @Override
+        public int getMaxStackSize(ItemStack stack) {
+            return apiSlot.getMaxStackSize(stack.asBukkitMirror());
+        }
+
+        @Override
+        public boolean isActive() {
+            return apiSlot.isActive();
+        }
+
+        @Override
+        public boolean mayPickup(Player player) {
+            return apiSlot.mayPickUp((org.bukkit.entity.Player) player.getBukkitEntity());
+        }
+    }
+}
diff --git a/src/main/java/io/papermc/paper/inventory/PaperInventoryCustomHolderContainer.java b/src/main/java/io/papermc/paper/inventory/PaperInventoryCustomHolderContainer.java
index 224d4b2cc45b0d02230a76caee9c88573a448b4c..487ecff5ab500259e4cc467895633adf8a776c45 100644
--- a/src/main/java/io/papermc/paper/inventory/PaperInventoryCustomHolderContainer.java
+++ b/src/main/java/io/papermc/paper/inventory/PaperInventoryCustomHolderContainer.java
@@ -1,5 +1,6 @@
 package io.papermc.paper.inventory;
 
+import de.verdox.mccreativelab.behaviour.InventoryHopperBehaviour;
 import io.papermc.paper.adventure.PaperAdventure;
 import net.kyori.adventure.text.Component;
 import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
@@ -134,6 +135,22 @@ public final class PaperInventoryCustomHolderContainer implements Container {
         return this.delegate.getLocation();
     }
 
+    @Override
+    public void setInventoryHopperBehaviour(@org.jetbrains.annotations.Nullable InventoryHopperBehaviour behaviour) {
+        this.delegate.setInventoryHopperBehaviour(behaviour);
+    }
+
+    @org.jetbrains.annotations.Nullable
+    @Override
+    public InventoryHopperBehaviour getInventoryHopperBehaviour() {
+        return this.delegate.getInventoryHopperBehaviour();
+    }
+
+    @Override
+    public boolean hasInventoryHopperBehaviour() {
+        return this.delegate.hasInventoryHopperBehaviour();
+    }
+
     @Override
     public void clearContent() {
         this.delegate.clearContent();
diff --git a/src/main/java/net/minecraft/server/level/ServerChunkCache.java b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
index 366c0c9b45a819f7f94ebe3e49b8ab7f9edf9ce7..e025f6810dac6d8e563f09b3289afc51d0fe554f 100644
--- a/src/main/java/net/minecraft/server/level/ServerChunkCache.java
+++ b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
@@ -17,6 +17,8 @@ import java.util.function.BooleanSupplier;
 import java.util.function.Consumer;
 import java.util.function.Supplier;
 import javax.annotation.Nullable;
+
+import io.papermc.paper.util.StacktraceDeobfuscator;
 import net.minecraft.Util;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.SectionPos;
@@ -46,6 +48,7 @@ import net.minecraft.world.level.levelgen.RandomState;
 import net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager;
 import net.minecraft.world.level.storage.DimensionDataStorage;
 import net.minecraft.world.level.storage.LevelStorageSource;
+import org.bukkit.Bukkit;
 
 public class ServerChunkCache extends ChunkSource {
 
diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index ab5b259d8f72022c875cae73be25fe2da346c6b3..0458c19ef3e43a6566e20cb422a8e99ebbc23911 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -186,6 +186,7 @@ import net.minecraft.world.phys.Vec3;
 import net.minecraft.world.phys.shapes.BooleanOp;
 import net.minecraft.world.phys.shapes.Shapes;
 import net.minecraft.world.phys.shapes.VoxelShape;
+import org.bukkit.event.inventory.*;
 import org.slf4j.Logger;
 
 // CraftBukkit start
@@ -215,13 +216,7 @@ import org.bukkit.craftbukkit.util.Waitable;
 import org.bukkit.entity.Player;
 import org.bukkit.event.Event;
 import org.bukkit.event.block.Action;
-import org.bukkit.event.inventory.ClickType;
-import org.bukkit.event.inventory.CraftItemEvent;
-import org.bukkit.event.inventory.InventoryAction;
-import org.bukkit.event.inventory.InventoryClickEvent;
-import org.bukkit.event.inventory.InventoryCreativeEvent;
 import org.bukkit.event.inventory.InventoryType.SlotType;
-import org.bukkit.event.inventory.SmithItemEvent;
 import org.bukkit.event.player.AsyncPlayerChatEvent;
 import org.bukkit.event.player.PlayerAnimationEvent;
 import org.bukkit.event.player.PlayerAnimationType;
@@ -2862,11 +2857,22 @@ public class ServerGamePacketListenerImpl extends ServerCommonPacketListenerImpl
         this.player.doCloseContainer();
     }
 
+    public void handleOpenContainerSwitch(ServerboundContainerClosePacket packet, InventoryView newView) {
+        // Paper end - Inventory close reason
+        PacketUtils.ensureRunningOnSameThread(packet, this, this.player.serverLevel());
+
+        if (this.player.isImmobile()) return; // CraftBukkit
+        CraftEventFactory.handleInventoryCloseEvent(this.player, InventoryCloseEvent.Reason.OPEN_NEW, newView); // CraftBukkit // Paper
+
+        this.player.doCloseContainer();
+    }
+
     @Override
     public void handleContainerClick(ServerboundContainerClickPacket packet) {
         PacketUtils.ensureRunningOnSameThread(packet, this, this.player.serverLevel());
         if (this.player.isImmobile()) return; // CraftBukkit
         this.player.resetLastActionTime();
+
         if (this.player.containerMenu.containerId == packet.getContainerId() && this.player.containerMenu.stillValid(this.player)) { // CraftBukkit
             boolean cancelled = this.player.isSpectator(); // CraftBukkit - see below if
             if (false/*this.player.isSpectator()*/) { // CraftBukkit
diff --git a/src/main/java/net/minecraft/world/CompoundContainer.java b/src/main/java/net/minecraft/world/CompoundContainer.java
index 241fec02e6869c638d3a160819b32173a081467b..271344af6552f3f4a43cbf630d75e01898bc1ecd 100644
--- a/src/main/java/net/minecraft/world/CompoundContainer.java
+++ b/src/main/java/net/minecraft/world/CompoundContainer.java
@@ -1,5 +1,6 @@
 package net.minecraft.world;
 
+import de.verdox.mccreativelab.behaviour.InventoryHopperBehaviour;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.ItemStack;
 
@@ -10,6 +11,7 @@ import org.bukkit.Location;
 
 import org.bukkit.craftbukkit.entity.CraftHumanEntity;
 import org.bukkit.entity.HumanEntity;
+import org.jetbrains.annotations.Nullable;
 // CraftBukkit end
 
 public class CompoundContainer implements Container {
@@ -57,6 +59,23 @@ public class CompoundContainer implements Container {
     public Location getLocation() {
         return this.container1.getLocation(); // TODO: right?
     }
+
+    @Override
+    public void setInventoryHopperBehaviour(@Nullable InventoryHopperBehaviour behaviour) {
+        this.container1.setInventoryHopperBehaviour(behaviour);
+        this.container2.setInventoryHopperBehaviour(behaviour);
+    }
+
+    @Nullable
+    @Override
+    public InventoryHopperBehaviour getInventoryHopperBehaviour() {
+        return this.container1.getInventoryHopperBehaviour();
+    }
+
+    @Override
+    public boolean hasInventoryHopperBehaviour() {
+        return this.container1.hasInventoryHopperBehaviour() && this.container2.hasInventoryHopperBehaviour();
+    }
     // CraftBukkit end
 
     public CompoundContainer(Container first, Container second) {
diff --git a/src/main/java/net/minecraft/world/Container.java b/src/main/java/net/minecraft/world/Container.java
index d6cbe98e67fdbf8db46338a88ab1356dd63b50a3..791fb6dcc35b8470c3a0f9b2d696b124bee71314 100644
--- a/src/main/java/net/minecraft/world/Container.java
+++ b/src/main/java/net/minecraft/world/Container.java
@@ -1,3 +1,4 @@
+
 package net.minecraft.world;
 
 import java.util.Set;
@@ -10,6 +11,7 @@ import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.crafting.RecipeHolder;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.entity.BlockEntity;
+import net.minecraft.world.level.block.entity.HopperBlockEntity;
 import org.bukkit.craftbukkit.entity.CraftHumanEntity;
 // CraftBukkit end
 
@@ -41,11 +43,11 @@ public interface Container extends Clearable {
     default void stopOpen(Player player) {}
 
     default boolean canPlaceItem(int slot, ItemStack stack) {
-        return true;
+        return de.verdox.mccreativelab.behaviour.InventoryHopperBehaviourUtil.canPlaceItem(this, slot, stack, () -> true); // MCCreativeLab - Add InventoryHopperBehaviour
     }
 
     default boolean canTakeItem(Container hopperInventory, int slot, ItemStack stack) {
-        return true;
+        return de.verdox.mccreativelab.behaviour.InventoryHopperBehaviourUtil.canTakeItem(this, (HopperBlockEntity) hopperInventory, slot, stack, () -> true); // MCCreativeLab - Add InventoryHopperBehaviour
     }
 
     default int countItem(Item item) {
@@ -115,4 +117,10 @@ public interface Container extends Clearable {
 
     int MAX_STACK = 64;
     // CraftBukkit end
+
+    // MCCreativeLab start - Add InventoryHopperBehaviour
+    void setInventoryHopperBehaviour(@org.jetbrains.annotations.Nullable de.verdox.mccreativelab.behaviour.InventoryHopperBehaviour behaviour);
+    @org.jetbrains.annotations.Nullable de.verdox.mccreativelab.behaviour.InventoryHopperBehaviour getInventoryHopperBehaviour();
+    boolean hasInventoryHopperBehaviour();
+    // MCCreativeLab end - Add InventoryHopperBehaviour
 }
diff --git a/src/main/java/net/minecraft/world/SimpleContainer.java b/src/main/java/net/minecraft/world/SimpleContainer.java
index 9546d93f90ca34b4d35bd98df847bf896c654043..90423aad67f5809ba2dc02e3626d5f4c16d47b52 100644
--- a/src/main/java/net/minecraft/world/SimpleContainer.java
+++ b/src/main/java/net/minecraft/world/SimpleContainer.java
@@ -362,4 +362,26 @@ public class SimpleContainer implements Container, StackedContentsCompatible {
     public NonNullList<ItemStack> getItems() {
         return this.items;
     }
+
+    // MCCreativeLab start - Add InventoryHopperBehaviour
+    public de.verdox.mccreativelab.behaviour.InventoryHopperBehaviour inventoryHopperBehaviour;
+    private boolean hasInvHopperBehaviour; //
+
+    @Override
+    public void setInventoryHopperBehaviour(@org.jetbrains.annotations.Nullable de.verdox.mccreativelab.behaviour.InventoryHopperBehaviour behaviour) {
+        this.inventoryHopperBehaviour = behaviour;
+        hasInvHopperBehaviour = behaviour != null;
+    }
+
+    @org.jetbrains.annotations.Nullable
+    @Override
+    public de.verdox.mccreativelab.behaviour.InventoryHopperBehaviour getInventoryHopperBehaviour() {
+        return inventoryHopperBehaviour;
+    }
+
+    @Override
+    public boolean hasInventoryHopperBehaviour() {
+        return hasInvHopperBehaviour;
+    }
+    // MCCreativeLab end - Add InventoryHopperBehaviour
 }
diff --git a/src/main/java/net/minecraft/world/entity/player/Inventory.java b/src/main/java/net/minecraft/world/entity/player/Inventory.java
index 1637d8d6558052dffff32730653c4aae1a35a373..4a4051234dd59078b7f3168fa983a206e5e1b54a 100644
--- a/src/main/java/net/minecraft/world/entity/player/Inventory.java
+++ b/src/main/java/net/minecraft/world/entity/player/Inventory.java
@@ -760,4 +760,26 @@ public class Inventory implements Container, Nameable {
 
         return itemstack.isEmpty() ? ItemStack.EMPTY : this.removeItem(this.selected, entireStack ? itemstack.getCount() : 1);
     }
+
+    // MCCreativeLab start - Add InventoryHopperBehaviour
+    public de.verdox.mccreativelab.behaviour.InventoryHopperBehaviour inventoryHopperBehaviour;
+    private boolean hasInvHopperBehaviour; //
+
+    @Override
+    public void setInventoryHopperBehaviour(@org.jetbrains.annotations.Nullable de.verdox.mccreativelab.behaviour.InventoryHopperBehaviour behaviour) {
+        this.inventoryHopperBehaviour = behaviour;
+        hasInvHopperBehaviour = behaviour != null;
+    }
+
+    @org.jetbrains.annotations.Nullable
+    @Override
+    public de.verdox.mccreativelab.behaviour.InventoryHopperBehaviour getInventoryHopperBehaviour() {
+        return inventoryHopperBehaviour;
+    }
+
+    @Override
+    public boolean hasInventoryHopperBehaviour() {
+        return hasInvHopperBehaviour;
+    }
+    // MCCreativeLab end - Add InventoryHopperBehaviour
 }
diff --git a/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecartContainer.java b/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecartContainer.java
index 6d23c39e4eadf23616080d6d08672e13b5d3c37d..7531c48d02ce47cb69f4fba408715d1e030e564b 100644
--- a/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecartContainer.java
+++ b/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecartContainer.java
@@ -234,4 +234,26 @@ public abstract class AbstractMinecartContainer extends AbstractMinecart impleme
     public void clearItemStacks() {
         this.itemStacks = NonNullList.withSize(this.getContainerSize(), ItemStack.EMPTY);
     }
+
+    // MCCreativeLab start - Add InventoryHopperBehaviour
+    public de.verdox.mccreativelab.behaviour.InventoryHopperBehaviour inventoryHopperBehaviour;
+    private boolean hasInvHopperBehaviour; //
+
+    @Override
+    public void setInventoryHopperBehaviour(@org.jetbrains.annotations.Nullable de.verdox.mccreativelab.behaviour.InventoryHopperBehaviour behaviour) {
+        this.inventoryHopperBehaviour = behaviour;
+        hasInvHopperBehaviour = behaviour != null;
+    }
+
+    @org.jetbrains.annotations.Nullable
+    @Override
+    public de.verdox.mccreativelab.behaviour.InventoryHopperBehaviour getInventoryHopperBehaviour() {
+        return inventoryHopperBehaviour;
+    }
+
+    @Override
+    public boolean hasInventoryHopperBehaviour() {
+        return hasInvHopperBehaviour;
+    }
+    // MCCreativeLab end - Add InventoryHopperBehaviour
 }
diff --git a/src/main/java/net/minecraft/world/entity/vehicle/ChestBoat.java b/src/main/java/net/minecraft/world/entity/vehicle/ChestBoat.java
index bc3fe45d12ffc2069a03d1587b7623d31130565a..d4e577a4ce5687bf4ede3c97055f6434fedcf716 100644
--- a/src/main/java/net/minecraft/world/entity/vehicle/ChestBoat.java
+++ b/src/main/java/net/minecraft/world/entity/vehicle/ChestBoat.java
@@ -308,4 +308,26 @@ public class ChestBoat extends Boat implements HasCustomInventoryScreen, Contain
         return this.getBukkitEntity().getLocation();
     }
     // CraftBukkit end
+
+    // MCCreativeLab start - Add InventoryHopperBehaviour
+    public de.verdox.mccreativelab.behaviour.InventoryHopperBehaviour inventoryHopperBehaviour;
+    private boolean hasInvHopperBehaviour; //
+
+    @Override
+    public void setInventoryHopperBehaviour(@org.jetbrains.annotations.Nullable de.verdox.mccreativelab.behaviour.InventoryHopperBehaviour behaviour) {
+        this.inventoryHopperBehaviour = behaviour;
+        hasInvHopperBehaviour = behaviour != null;
+    }
+
+    @org.jetbrains.annotations.Nullable
+    @Override
+    public de.verdox.mccreativelab.behaviour.InventoryHopperBehaviour getInventoryHopperBehaviour() {
+        return inventoryHopperBehaviour;
+    }
+
+    @Override
+    public boolean hasInventoryHopperBehaviour() {
+        return hasInvHopperBehaviour;
+    }
+    // MCCreativeLab end - Add InventoryHopperBehaviour
 }
diff --git a/src/main/java/net/minecraft/world/inventory/MerchantContainer.java b/src/main/java/net/minecraft/world/inventory/MerchantContainer.java
index ac4ec7157cf93b0cbc4472dc42fbbbff3402335a..7b047cc51041892b11571927a3aea5f443c0757e 100644
--- a/src/main/java/net/minecraft/world/inventory/MerchantContainer.java
+++ b/src/main/java/net/minecraft/world/inventory/MerchantContainer.java
@@ -209,4 +209,26 @@ public class MerchantContainer implements Container {
     public int getFutureXp() {
         return this.futureXp;
     }
+
+    // MCCreativeLab start - Add InventoryHopperBehaviour
+    public de.verdox.mccreativelab.behaviour.InventoryHopperBehaviour inventoryHopperBehaviour;
+    private boolean hasInvHopperBehaviour; //
+
+    @Override
+    public void setInventoryHopperBehaviour(@org.jetbrains.annotations.Nullable de.verdox.mccreativelab.behaviour.InventoryHopperBehaviour behaviour) {
+        this.inventoryHopperBehaviour = behaviour;
+        hasInvHopperBehaviour = behaviour != null;
+    }
+
+    @org.jetbrains.annotations.Nullable
+    @Override
+    public de.verdox.mccreativelab.behaviour.InventoryHopperBehaviour getInventoryHopperBehaviour() {
+        return inventoryHopperBehaviour;
+    }
+
+    @Override
+    public boolean hasInventoryHopperBehaviour() {
+        return hasInvHopperBehaviour;
+    }
+    // MCCreativeLab end - Add InventoryHopperBehaviour
 }
diff --git a/src/main/java/net/minecraft/world/inventory/ResultContainer.java b/src/main/java/net/minecraft/world/inventory/ResultContainer.java
index 4c4266a85c38e41e6c7e6144a68624f4daa50c54..cb1f3c3f9b7180039312b70eda001d28b2282b3d 100644
--- a/src/main/java/net/minecraft/world/inventory/ResultContainer.java
+++ b/src/main/java/net/minecraft/world/inventory/ResultContainer.java
@@ -136,4 +136,26 @@ public class ResultContainer implements Container, RecipeCraftingHolder {
     public RecipeHolder<?> getRecipeUsed() {
         return this.recipeUsed;
     }
+
+    // MCCreativeLab start - Add InventoryHopperBehaviour
+    public de.verdox.mccreativelab.behaviour.InventoryHopperBehaviour inventoryHopperBehaviour;
+    private boolean hasInvHopperBehaviour; //
+
+    @Override
+    public void setInventoryHopperBehaviour(@org.jetbrains.annotations.Nullable de.verdox.mccreativelab.behaviour.InventoryHopperBehaviour behaviour) {
+        this.inventoryHopperBehaviour = behaviour;
+        hasInvHopperBehaviour = behaviour != null;
+    }
+
+    @org.jetbrains.annotations.Nullable
+    @Override
+    public de.verdox.mccreativelab.behaviour.InventoryHopperBehaviour getInventoryHopperBehaviour() {
+        return inventoryHopperBehaviour;
+    }
+
+    @Override
+    public boolean hasInventoryHopperBehaviour() {
+        return hasInvHopperBehaviour;
+    }
+    // MCCreativeLab end - Add InventoryHopperBehaviour
 }
diff --git a/src/main/java/net/minecraft/world/inventory/TransientCraftingContainer.java b/src/main/java/net/minecraft/world/inventory/TransientCraftingContainer.java
index 341e1f70602ecdb4782c9cd74fa19135ac230d90..75bcd25b41dc4f3a54b7249be1823ccf4389a607 100644
--- a/src/main/java/net/minecraft/world/inventory/TransientCraftingContainer.java
+++ b/src/main/java/net/minecraft/world/inventory/TransientCraftingContainer.java
@@ -186,4 +186,26 @@ public class TransientCraftingContainer implements CraftingContainer {
         }
 
     }
+
+    // MCCreativeLab start - Add InventoryHopperBehaviour
+    public de.verdox.mccreativelab.behaviour.InventoryHopperBehaviour inventoryHopperBehaviour;
+    private boolean hasInvHopperBehaviour; //
+
+    @Override
+    public void setInventoryHopperBehaviour(@org.jetbrains.annotations.Nullable de.verdox.mccreativelab.behaviour.InventoryHopperBehaviour behaviour) {
+        this.inventoryHopperBehaviour = behaviour;
+        hasInvHopperBehaviour = behaviour != null;
+    }
+
+    @org.jetbrains.annotations.Nullable
+    @Override
+    public de.verdox.mccreativelab.behaviour.InventoryHopperBehaviour getInventoryHopperBehaviour() {
+        return inventoryHopperBehaviour;
+    }
+
+    @Override
+    public boolean hasInventoryHopperBehaviour() {
+        return hasInvHopperBehaviour;
+    }
+    // MCCreativeLab end - Add InventoryHopperBehaviour
 }
diff --git a/src/main/java/net/minecraft/world/item/BlockItem.java b/src/main/java/net/minecraft/world/item/BlockItem.java
index b90d75dfeec9a929cf75817afd9d8f7c1df269ff..ab86afc4b710f6f78ab4123b5f6ab99e7bd8a10d 100644
--- a/src/main/java/net/minecraft/world/item/BlockItem.java
+++ b/src/main/java/net/minecraft/world/item/BlockItem.java
@@ -75,6 +75,13 @@ public class BlockItem extends Item {
                 return InteractionResult.FAIL;
             } else {
                 BlockState iblockdata = this.getPlacementState(blockactioncontext1);
+
+                BlockState finalState = de.verdox.mccreativelab.behaviour.ItemBehaviourUtil.placeBlockAction(context.getPlayer(), context.getClickedPos(), context.getLevel(), context.getItemInHand(), context.getLevel().getBlockState(context.getClickedPos()), () -> {
+                    return this.getPlacementState(blockactioncontext1);
+                });
+
+                iblockdata = finalState;
+
                 // CraftBukkit start - special case for handling block placement with water lilies and snow buckets
                 org.bukkit.block.BlockState blockstate = null;
                 if (this instanceof PlaceOnWaterBlockItem || this instanceof SolidBucketItem) {
@@ -135,8 +142,6 @@ public class BlockItem extends Item {
                     if ((entityhuman == null || !entityhuman.getAbilities().instabuild) && itemstack != ItemStack.EMPTY) { // CraftBukkit
                         itemstack.shrink(1);
                     }
-
-                    if(entityhuman != null) de.verdox.mccreativelab.behaviour.BlockBehaviourUtil.getInstance().onPlayerPlaceCallback(entityhuman, iblockdata, world, blockposition); // MCCLab - Add BlockBehaviour
                     return InteractionResult.sidedSuccess(world.isClientSide);
                 }
             }
@@ -174,11 +179,11 @@ public class BlockItem extends Item {
         }
 
         final BlockState finalState = iblockdata1;
-        return de.verdox.mccreativelab.behaviour.ItemBehaviourUtil.placeBlockAction(player, pos, world, stack, state, () -> {
-            if (finalState != state)
-                world.setBlock(pos, finalState, 2);
-            return finalState;
-        });
+
+        if (finalState != state)
+            world.setBlock(pos, state, 2);
+
+        return finalState;
     }
 
     public static BlockState getBlockState(BlockState iblockdata, CompoundTag nbttagcompound1) {
diff --git a/src/main/java/net/minecraft/world/item/ItemStack.java b/src/main/java/net/minecraft/world/item/ItemStack.java
index 63c06489923e1ebf0d6ea907016c7ef441a0c0a2..3fd62d1abe90c53edbe63f140ff16aa9113b6bee 100644
--- a/src/main/java/net/minecraft/world/item/ItemStack.java
+++ b/src/main/java/net/minecraft/world/item/ItemStack.java
@@ -76,9 +76,8 @@ import net.minecraft.world.item.enchantment.EnchantmentHelper;
 import net.minecraft.world.item.enchantment.Enchantments;
 import net.minecraft.world.level.ItemLike;
 import net.minecraft.world.level.Level;
-import net.minecraft.world.level.block.BaseEntityBlock;
-import net.minecraft.world.level.block.BedBlock;
-import net.minecraft.world.level.block.Block;
+import net.minecraft.world.level.block.*;
+import org.bukkit.craftbukkit.block.data.CraftBlockData;
 import org.slf4j.Logger;
 
 // CraftBukkit start
@@ -91,11 +90,6 @@ import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundSource;
 import net.minecraft.stats.Stats;
-import net.minecraft.world.level.block.Blocks;
-import net.minecraft.world.level.block.SaplingBlock;
-import net.minecraft.world.level.block.SignBlock;
-import net.minecraft.world.level.block.SoundType;
-import net.minecraft.world.level.block.WitherSkullBlock;
 import net.minecraft.world.level.block.entity.BlockEntity;
 import net.minecraft.world.level.block.entity.JukeboxBlockEntity;
 import net.minecraft.world.level.block.entity.SignBlockEntity;
@@ -373,6 +367,7 @@ public final class ItemStack {
         net.minecraft.world.entity.player.Player entityhuman = context.getPlayer();
         BlockPos blockposition = context.getClickedPos();
         BlockInWorld shapedetectorblock = new BlockInWorld(context.getLevel(), blockposition, false);
+        ItemStack blockUsedToPlaceBlock = copy();
 
         if (entityhuman != null && !entityhuman.getAbilities().mayBuild && !this.hasAdventureModePlaceTagForBlock(context.getLevel().registryAccess().registryOrThrow(Registries.BLOCK), shapedetectorblock)) {
             return InteractionResult.PASS;
@@ -468,7 +463,6 @@ public final class ItemStack {
                     // }
                     // Paper end - Don't resync blocks
                     SignItem.openSign = null; // SPIGOT-6758 - Reset on early return
-                    de.verdox.mccreativelab.behaviour.BlockBehaviourUtil.getInstance().onPlayerPlaceCallback(entityhuman, world.getBlockState(blockposition), world, blockposition);
                 } else {
                     // Change the stack to its new contents if it hasn't been tampered with.
                     if (this.getCount() == oldCount && Objects.equals(this.tag, oldData)) {
@@ -561,6 +555,14 @@ public final class ItemStack {
                     }
 
                     entityhuman.awardStat(Stats.ITEM_USED.get(item));
+
+                    if(placeEvent != null && !placeEvent.isCancelled() && placeEvent.canBuild()){
+                        for (BlockState block : blocks) {
+                            BlockPos blockPos = CraftLocation.toBlockPosition(block.getLocation());
+                            de.verdox.mccreativelab.behaviour.BlockBehaviourUtil.getInstance().onPlayerPlaceCallback(entityhuman, blockUsedToPlaceBlock, world.getBlockState(blockPos), world, blockPos);
+                        }
+
+                    }
                 }
             }
             world.capturedTileEntities.clear();
diff --git a/src/main/java/net/minecraft/world/level/block/Block.java b/src/main/java/net/minecraft/world/level/block/Block.java
index fc2b6e4a58a5994a9262e2a7ad112df8ba33b831..4d2b142eb166898dfffbddfb9bf254c767c6e69e 100644
--- a/src/main/java/net/minecraft/world/level/block/Block.java
+++ b/src/main/java/net/minecraft/world/level/block/Block.java
@@ -454,7 +454,10 @@ public class Block extends BlockBehaviour implements ItemLike {
         } // Paper - fix drops not preventing stats/food exhaustion
     }
 
-    public void setPlacedBy(Level world, BlockPos pos, BlockState state, @Nullable LivingEntity placer, ItemStack itemStack) {}
+    //TODO: PlayerPlaceCallback -> after Event
+    public void setPlacedBy(Level world, BlockPos pos, BlockState state, @Nullable LivingEntity placer, ItemStack itemStack) {
+
+    }
 
     public boolean isPossibleToRespawnInThis(BlockState state) {
         return !state.isSolid() && !state.liquid();
diff --git a/src/main/java/net/minecraft/world/level/block/ComposterBlock.java b/src/main/java/net/minecraft/world/level/block/ComposterBlock.java
index f9084e2605d7403721fe6b714bfad051f932aaef..834c5f819a51223f4a16833f623dbeebdffea612 100644
--- a/src/main/java/net/minecraft/world/level/block/ComposterBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ComposterBlock.java
@@ -76,6 +76,8 @@ public class ComposterBlock extends Block implements WorldlyContainerHolder {
         float f3 = 0.85F;
         float f4 = 1.0F;
 
+        //TODO: [MCCLab] - Make this changeable via API
+
         ComposterBlock.add(0.3F, Items.JUNGLE_LEAVES);
         ComposterBlock.add(0.3F, Items.OAK_LEAVES);
         ComposterBlock.add(0.3F, Items.SPRUCE_LEAVES);
diff --git a/src/main/java/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
index 217f270951058bdf7c55bd3418ca636666667b91..e920e8bfc1aca3cba99cd90e4f84748b729add91 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
@@ -5,10 +5,12 @@ import com.google.common.collect.Maps;
 import it.unimi.dsi.fastutil.objects.Object2IntMap.Entry;
 import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
 import it.unimi.dsi.fastutil.objects.ObjectIterator;
+
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import javax.annotation.Nullable;
+
 import net.minecraft.SharedConstants;
 import net.minecraft.Util;
 import net.minecraft.core.BlockPos;
@@ -39,6 +41,7 @@ import net.minecraft.world.item.crafting.AbstractCookingRecipe;
 import net.minecraft.world.item.crafting.RecipeHolder;
 import net.minecraft.world.item.crafting.RecipeManager;
 import net.minecraft.world.item.crafting.RecipeType;
+import net.minecraft.world.level.GameRules;
 import net.minecraft.world.level.ItemLike;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.AbstractFurnaceBlock;
@@ -135,9 +138,10 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
     }
 
     private static Map<Item, Integer> cachedBurnDurations = null; // Paper - cache burn durations
+
     public static Map<Item, Integer> getFuel() {
         // Paper start - cache burn durations
-        if(cachedBurnDurations != null) {
+        if (cachedBurnDurations != null) {
             return cachedBurnDurations;
         }
         // Paper end - cache burn durations
@@ -293,7 +297,7 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
             // Paper start - Validate ResourceLocation
             final ResourceLocation resourceLocation = ResourceLocation.tryParse(s);
             if (resourceLocation != null) {
-            this.recipesUsed.put(resourceLocation, nbttagcompound1.getInt(s));
+                this.recipesUsed.put(resourceLocation, nbttagcompound1.getInt(s));
             }
             // Paper end - Validate ResourceLocation
         }
@@ -413,6 +417,8 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
 
         if (flag1) {
             setChanged(world, pos, state);
+            if(!flag)
+                new org.bukkit.event.inventory.FurnaceRunOutOfFuelEvent(CraftBlock.at(world, pos)).callEvent();
         }
 
     }
@@ -497,7 +503,7 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
     public static int getTotalCookTime(@Nullable Level world, RecipeType<? extends AbstractCookingRecipe> recipeType, AbstractFurnaceBlockEntity furnace, double cookSpeedMultiplier) {
         /* Scale the recipe's cooking time to the current cookSpeedMultiplier */
         int cookTime = world != null ? furnace.quickCheck.getRecipeFor(furnace, world).map(holder -> holder.value().getCookingTime()).orElse(200) : (net.minecraft.server.MinecraftServer.getServer().getRecipeManager().getRecipeFor(recipeType, furnace, world /* passing a null level here is safe. world is only used for map extending recipes which won't happen here */).map(holder -> holder.value().getCookingTime()).orElse(200));
-        return (int) Math.ceil (cookTime / cookSpeedMultiplier);
+        return (int) Math.ceil(cookTime / cookSpeedMultiplier);
         // Paper end - cook speed multiplier API
     }
 
@@ -615,7 +621,8 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
     }
 
     @Override
-    public void awardUsedRecipes(net.minecraft.world.entity.player.Player player, List<ItemStack> ingredients) {}
+    public void awardUsedRecipes(net.minecraft.world.entity.player.Player player, List<ItemStack> ingredients) {
+    }
 
     public void awardUsedRecipesAndPopExperience(ServerPlayer entityplayer, ItemStack itemstack, int amount) { // CraftBukkit
         List<RecipeHolder<?>> list = this.getRecipesToAwardAndPopExperience(entityplayer.serverLevel(), entityplayer.position(), this.worldPosition, entityplayer, itemstack, amount); // CraftBukkit
@@ -648,7 +655,8 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
             Entry<ResourceLocation> entry = (Entry) objectiterator.next();
 
             worldserver.getRecipeManager().byKey((ResourceLocation) entry.getKey()).ifPresent((recipeholder) -> {
-                if (!(recipeholder.value() instanceof AbstractCookingRecipe)) return; // Paper - don't process non-cooking recipes
+                if (!(recipeholder.value() instanceof AbstractCookingRecipe))
+                    return; // Paper - don't process non-cooking recipes
                 list.add(recipeholder);
                 AbstractFurnaceBlockEntity.createExperience(worldserver, vec3d, entry.getIntValue(), ((AbstractCookingRecipe) recipeholder.value()).getExperience(), blockposition, entityplayer, itemstack, amount); // CraftBukkit
             });
diff --git a/src/main/java/net/minecraft/world/level/block/entity/BaseContainerBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/BaseContainerBlockEntity.java
index b8b4d74076fa5ed6eb3b2045384db77e165931b2..7d6013a4e2a585609c8ab96514e6aa7c8c047c4b 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/BaseContainerBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/BaseContainerBlockEntity.java
@@ -124,4 +124,26 @@ public abstract class BaseContainerBlockEntity extends BlockEntity implements Co
         return new org.bukkit.Location(this.level.getWorld(), this.worldPosition.getX(), this.worldPosition.getY(), this.worldPosition.getZ());
     }
     // CraftBukkit end
+
+    // MCCreativeLab start - Add InventoryHopperBehaviour
+    public de.verdox.mccreativelab.behaviour.InventoryHopperBehaviour inventoryHopperBehaviour;
+    private boolean hasInvHopperBehaviour; //
+
+    @Override
+    public void setInventoryHopperBehaviour(@org.jetbrains.annotations.Nullable de.verdox.mccreativelab.behaviour.InventoryHopperBehaviour behaviour) {
+        this.inventoryHopperBehaviour = behaviour;
+        hasInvHopperBehaviour = behaviour != null;
+    }
+
+    @org.jetbrains.annotations.Nullable
+    @Override
+    public de.verdox.mccreativelab.behaviour.InventoryHopperBehaviour getInventoryHopperBehaviour() {
+        return inventoryHopperBehaviour;
+    }
+
+    @Override
+    public boolean hasInventoryHopperBehaviour() {
+        return hasInvHopperBehaviour;
+    }
+    // MCCreativeLab end - Add InventoryHopperBehaviour
 }
diff --git a/src/main/java/net/minecraft/world/level/block/entity/BrewingStandBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/BrewingStandBlockEntity.java
index cebafef7a7d5fb97cdd4ba1b70d7f1c709ab44b8..7d004915fdcfba5b9009812f575c62bd4826adf1 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/BrewingStandBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/BrewingStandBlockEntity.java
@@ -343,7 +343,9 @@ public class BrewingStandBlockEntity extends BaseContainerBlockEntity implements
 
     @Override
     public boolean canPlaceItem(int slot, ItemStack stack) {
-        return slot == 3 ? PotionBrewing.isIngredient(stack) : (slot == 4 ? stack.is(Items.BLAZE_POWDER) : (stack.is(Items.POTION) || stack.is(Items.SPLASH_POTION) || stack.is(Items.LINGERING_POTION) || stack.is(Items.GLASS_BOTTLE) || PotionBrewing.isCustomInput(stack)) && this.getItem(slot).isEmpty()); // Paper - Custom Potion Mixes
+        return de.verdox.mccreativelab.behaviour.InventoryHopperBehaviourUtil.canPlaceItem(this, slot, stack, () -> {
+            return slot == 3 ? PotionBrewing.isIngredient(stack) : (slot == 4 ? stack.is(Items.BLAZE_POWDER) : (stack.is(Items.POTION) || stack.is(Items.SPLASH_POTION) || stack.is(Items.LINGERING_POTION) || stack.is(Items.GLASS_BOTTLE) || PotionBrewing.isCustomInput(stack)) && this.getItem(slot).isEmpty()); // Paper - Custom Potion Mixes
+        });
     }
 
     @Override
@@ -370,4 +372,26 @@ public class BrewingStandBlockEntity extends BaseContainerBlockEntity implements
     protected AbstractContainerMenu createMenu(int syncId, Inventory playerInventory) {
         return new BrewingStandMenu(syncId, playerInventory, this, this.dataAccess);
     }
+
+    // MCCreativeLab start - Add InventoryHopperBehaviour
+    public de.verdox.mccreativelab.behaviour.InventoryHopperBehaviour inventoryHopperBehaviour;
+    private boolean hasInvHopperBehaviour; //
+
+    @Override
+    public void setInventoryHopperBehaviour(@org.jetbrains.annotations.Nullable de.verdox.mccreativelab.behaviour.InventoryHopperBehaviour behaviour) {
+        this.inventoryHopperBehaviour = behaviour;
+        hasInvHopperBehaviour = behaviour != null;
+    }
+
+    @org.jetbrains.annotations.Nullable
+    @Override
+    public de.verdox.mccreativelab.behaviour.InventoryHopperBehaviour getInventoryHopperBehaviour() {
+        return inventoryHopperBehaviour;
+    }
+
+    @Override
+    public boolean hasInventoryHopperBehaviour() {
+        return hasInvHopperBehaviour;
+    }
+    // MCCreativeLab end - Add InventoryHopperBehaviour
 }
diff --git a/src/main/java/net/minecraft/world/level/block/entity/ChiseledBookShelfBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/ChiseledBookShelfBlockEntity.java
index 8800fbaea02be2390ec379bd97fb57a8082bc80e..5d490f9e3cd150b63a9ac16c86d1ceca84117702 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/ChiseledBookShelfBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/ChiseledBookShelfBlockEntity.java
@@ -160,8 +160,10 @@ public class ChiseledBookShelfBlockEntity extends BlockEntity implements Contain
 
     @Override
     public boolean canTakeItem(Container hopperInventory, int slot, ItemStack stack) {
-        return hopperInventory.hasAnyMatching((itemstack1) -> {
-            return itemstack1.isEmpty() ? true : ItemStack.isSameItemSameTags(stack, itemstack1) && itemstack1.getCount() + stack.getCount() <= Math.min(itemstack1.getMaxStackSize(), hopperInventory.getMaxStackSize());
+        return de.verdox.mccreativelab.behaviour.InventoryHopperBehaviourUtil.canTakeItem(this, (HopperBlockEntity) hopperInventory, slot, stack, () -> {
+            return hopperInventory.hasAnyMatching((itemstack1) -> {
+                return itemstack1.isEmpty() ? true : ItemStack.isSameItemSameTags(stack, itemstack1) && itemstack1.getCount() + stack.getCount() <= Math.min(itemstack1.getMaxStackSize(), hopperInventory.getMaxStackSize());
+            });
         });
     }
 
@@ -177,10 +179,34 @@ public class ChiseledBookShelfBlockEntity extends BlockEntity implements Contain
 
     @Override
     public boolean canPlaceItem(int slot, ItemStack stack) {
-        return stack.is(ItemTags.BOOKSHELF_BOOKS) && this.getItem(slot).isEmpty() && stack.getCount() == this.getMaxStackSize();
+        return de.verdox.mccreativelab.behaviour.InventoryHopperBehaviourUtil.canPlaceItem(this, slot, stack, () -> {
+            return stack.is(ItemTags.BOOKSHELF_BOOKS) && this.getItem(slot).isEmpty() && stack.getCount() == this.getMaxStackSize();
+        });
     }
 
     public int getLastInteractedSlot() {
         return this.lastInteractedSlot;
     }
+
+    // MCCreativeLab start - Add InventoryHopperBehaviour
+    public de.verdox.mccreativelab.behaviour.InventoryHopperBehaviour inventoryHopperBehaviour;
+    private boolean hasInvHopperBehaviour; //
+
+    @Override
+    public void setInventoryHopperBehaviour(@org.jetbrains.annotations.Nullable de.verdox.mccreativelab.behaviour.InventoryHopperBehaviour behaviour) {
+        this.inventoryHopperBehaviour = behaviour;
+        hasInvHopperBehaviour = behaviour != null;
+    }
+
+    @org.jetbrains.annotations.Nullable
+    @Override
+    public de.verdox.mccreativelab.behaviour.InventoryHopperBehaviour getInventoryHopperBehaviour() {
+        return inventoryHopperBehaviour;
+    }
+
+    @Override
+    public boolean hasInventoryHopperBehaviour() {
+        return hasInvHopperBehaviour;
+    }
+    // MCCreativeLab end - Add InventoryHopperBehaviour
 }
diff --git a/src/main/java/net/minecraft/world/level/block/entity/DecoratedPotBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/DecoratedPotBlockEntity.java
index 766fde866ed9aa8b517e14150cdf51919f5db5cc..6ab10957531d7f2af1e9a0453c118dd2be9dd5fb 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/DecoratedPotBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/DecoratedPotBlockEntity.java
@@ -270,4 +270,26 @@ public class DecoratedPotBlockEntity extends BlockEntity implements Randomizable
             this.duration = i;
         }
     }
+
+    // MCCreativeLab start - Add InventoryHopperBehaviour
+    public de.verdox.mccreativelab.behaviour.InventoryHopperBehaviour inventoryHopperBehaviour;
+    private boolean hasInvHopperBehaviour; //
+
+    @Override
+    public void setInventoryHopperBehaviour(@org.jetbrains.annotations.Nullable de.verdox.mccreativelab.behaviour.InventoryHopperBehaviour behaviour) {
+        this.inventoryHopperBehaviour = behaviour;
+        hasInvHopperBehaviour = behaviour != null;
+    }
+
+    @org.jetbrains.annotations.Nullable
+    @Override
+    public de.verdox.mccreativelab.behaviour.InventoryHopperBehaviour getInventoryHopperBehaviour() {
+        return inventoryHopperBehaviour;
+    }
+
+    @Override
+    public boolean hasInventoryHopperBehaviour() {
+        return hasInvHopperBehaviour;
+    }
+    // MCCreativeLab end - Add InventoryHopperBehaviour
 }
diff --git a/src/main/java/net/minecraft/world/level/block/entity/HopperBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/HopperBlockEntity.java
index a61d7cd2b078fe511ff00344197b6ea11feebfb2..b94cb7375faa4d122da74a47e0f1916ae1b92b81 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/HopperBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/HopperBlockEntity.java
@@ -2,6 +2,7 @@ package net.minecraft.world.level.block.entity;
 
 import java.util.Iterator;
 import java.util.List;
+import java.util.concurrent.ConcurrentHashMap;
 import java.util.function.BooleanSupplier;
 import java.util.stream.Collectors;
 import java.util.stream.IntStream;
@@ -40,7 +41,9 @@ import org.bukkit.entity.HumanEntity;
 import org.bukkit.event.inventory.HopperInventorySearchEvent;
 import org.bukkit.event.inventory.InventoryMoveItemEvent;
 import org.bukkit.event.inventory.InventoryPickupItemEvent;
+import org.bukkit.event.inventory.InventoryType;
 import org.bukkit.inventory.Inventory;
+import org.codehaus.plexus.util.FastMap;
 // CraftBukkit end
 
 public class HopperBlockEntity extends RandomizableContainerBlockEntity implements Hopper {
@@ -390,6 +393,19 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
     }
 
     private static boolean allMatch(Container iinventory, Direction enumdirection, java.util.function.BiPredicate<ItemStack, Integer> test) {
+        // MCCreativeLab start - Add InventoryHopperBehaviour
+        if(iinventory.hasInventoryHopperBehaviour()){
+            int[] slotsForFace = getSlotsForFace(iinventory, enumdirection);
+
+            for (int slot : slotsForFace) {
+                if (!test.test(iinventory.getItem(slot), slot)) {
+                    return false;
+                }
+            }
+            return true;
+        }
+        // MCCreativeLab end - Add InventoryHopperBehaviour
+
         if (iinventory instanceof WorldlyContainer) {
             for (int i : ((WorldlyContainer) iinventory).getSlotsForFace(enumdirection)) {
                 if (!test.test(iinventory.getItem(i), i)) {
@@ -408,6 +424,21 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
     }
 
     private static boolean anyMatch(Container iinventory, Direction enumdirection, java.util.function.BiPredicate<ItemStack, Integer> test) {
+        // MCCreativeLab start - Add InventoryHopperBehaviour
+        if(iinventory.hasInventoryHopperBehaviour()){
+            int[] slotsForFace = getSlotsForFace(iinventory, enumdirection);
+
+            for (int slot : slotsForFace) {
+                if (test.test(iinventory.getItem(slot), slot)) {
+                    return true;
+                }
+            }
+            return true;
+        }
+        // MCCreativeLab end - Add InventoryHopperBehaviour
+
+
+
         if (iinventory instanceof WorldlyContainer) {
             for (int i : ((WorldlyContainer) iinventory).getSlotsForFace(enumdirection)) {
                 if (test.test(iinventory.getItem(i), i)) {
@@ -436,6 +467,7 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
         } else {
             Direction enumdirection = ((Direction) iblockdata.getValue(HopperBlock.FACING)).getOpposite();
 
+
             if (HopperBlockEntity.isFullContainer(iinventory1, enumdirection)) {
                 return false;
             } else {
@@ -490,7 +522,42 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
         return inventory instanceof WorldlyContainer ? IntStream.of(((WorldlyContainer) inventory).getSlotsForFace(side)) : IntStream.range(0, inventory.getContainerSize());
     }
 
+    // MCCreativeLab start - Add InventoryHopperBehaviour
+    private static final java.util.Map<Integer, int[]> cachedSlotsForIteration = new FastMap<>(40);
+
+    private static int[] getSlotsForFace(WorldlyContainer worldlyContainer, Direction direction) {
+        if(!worldlyContainer.hasInventoryHopperBehaviour())
+            return worldlyContainer.getSlotsForFace(direction);
+        return de.verdox.mccreativelab.behaviour.InventoryHopperBehaviourUtil.getSlotsForFace(worldlyContainer, direction, () -> worldlyContainer.getSlotsForFace(direction));
+    }
+
+    private static int[] getSlotsForFace(Container inventory, Direction direction){
+        if(inventory instanceof WorldlyContainer worldlyContainer)
+            return getSlotsForFace(worldlyContainer, direction);
+        else {
+            return de.verdox.mccreativelab.behaviour.InventoryHopperBehaviourUtil.getSlotsForFace(inventory, direction, () -> cachedSlotsForIteration.computeIfAbsent(inventory.getContainerSize(), integer -> {
+                int[] cachedSlots = new int[inventory.getContainerSize()];
+                for (int i = 0; i < cachedSlots.length; i++)
+                    cachedSlots[i] = i;
+                return cachedSlots;
+            }));
+        }
+    }
+    // MCCreativeLab end - Add InventoryHopperBehaviour
+
     private static boolean isFullContainer(Container inventory, Direction direction) {
+        // MCCreativeLab start - Add InventoryHopperBehaviour
+        if(inventory.hasInventoryHopperBehaviour()){
+            for (int slot : getSlotsForFace(inventory, direction)) {
+                final ItemStack stack = inventory.getItem(slot);
+                if (stack.getCount() < stack.getMaxStackSize()) {
+                    return false;
+                }
+            }
+            return true;
+        }
+        // MCCreativeLab end - Add InventoryHopperBehaviour
+
         // Paper start - Perf: Optimize Hoppers
         if (inventory instanceof WorldlyContainer worldlyContainer) {
             for (final int slot : worldlyContainer.getSlotsForFace(direction)) {
@@ -525,6 +592,22 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
             // Paper start - Perf: Optimize Hoppers
             skipPullModeEventFire = skipHopperEvents;
             // merge container isEmpty check and move logic into one loop
+
+            // MCCreativeLab start - Add InventoryHopperBehaviour
+            if(iinventory.hasInventoryHopperBehaviour()){
+                for (int slot : getSlotsForFace(iinventory, enumdirection)) {
+                    final ItemStack item = iinventory.getItem(slot);
+                    if (item.isEmpty() || !canTakeItemFromContainer(hopper, iinventory, item, slot, enumdirection)) {
+                        continue;
+                    }
+                    if (hopperPull(world, hopper, iinventory, item, slot)) {
+                        return true;
+                    }
+                }
+                return false;
+            }
+            // MCCreativeLab end - Add InventoryHopperBehaviour
+
             if (iinventory instanceof WorldlyContainer worldlyContainer) {
                 for (final int slot : worldlyContainer.getSlotsForFace(enumdirection)) {
                     ItemStack item = worldlyContainer.getItem(slot);
@@ -645,6 +728,16 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
     public static ItemStack addItem(@Nullable Container from, Container to, ItemStack stack, @Nullable Direction side) {
         int i;
 
+        // MCCreativeLab start - Add InventoryHopperBehaviour
+        if(to.hasInventoryHopperBehaviour()){
+            int[] slotsForFace = getSlotsForFace(to, side);
+            for (i = 0; i < slotsForFace.length && !stack.isEmpty(); ++i) {
+                stack = HopperBlockEntity.tryMoveInItem(from, to, stack, slotsForFace[i], side);
+            }
+            return stack;
+        }
+        // MCCreativeLab end - Add InventoryHopperBehaviour
+
         if (to instanceof WorldlyContainer) {
             WorldlyContainer iworldinventory = (WorldlyContainer) to;
 
@@ -669,42 +762,48 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
     }
 
     private static boolean canPlaceItemInContainer(Container inventory, ItemStack stack, int slot, @Nullable Direction side) {
+        //TODO: [MCCLab] - Hopper attempt place Item in Inventory Event
         if (!inventory.canPlaceItem(slot, stack)) {
             return false;
         } else {
-            boolean flag;
-
-            if (inventory instanceof WorldlyContainer) {
-                WorldlyContainer iworldinventory = (WorldlyContainer) inventory;
-
-                if (!iworldinventory.canPlaceItemThroughFace(slot, stack, side)) {
-                    flag = false;
-                    return flag;
+            return de.verdox.mccreativelab.behaviour.InventoryHopperBehaviourUtil.canPlaceItemThroughFace(inventory, slot, stack, side , () -> {
+                boolean flag;
+                if (inventory instanceof WorldlyContainer) {
+                    WorldlyContainer iworldinventory = (WorldlyContainer) inventory;
+
+                    if (!iworldinventory.canPlaceItemThroughFace(slot, stack, side)) {
+                        flag = false;
+                        return flag;
+                    }
                 }
-            }
 
-            flag = true;
-            return flag;
+                flag = true;
+                return flag;
+            });
         }
     }
 
     private static boolean canTakeItemFromContainer(Container hopperInventory, Container fromInventory, ItemStack stack, int slot, Direction facing) {
+        //TODO: [MCCLab] - Hopper attempt take Item from Inventory Event
         if (!fromInventory.canTakeItem(hopperInventory, slot, stack)) {
             return false;
         } else {
-            boolean flag;
+            return de.verdox.mccreativelab.behaviour.InventoryHopperBehaviourUtil.canTakeItemThroughFace(fromInventory, (HopperBlockEntity) hopperInventory, slot, stack, facing, () -> {
+                boolean flag;
 
-            if (fromInventory instanceof WorldlyContainer) {
-                WorldlyContainer iworldinventory = (WorldlyContainer) fromInventory;
+                if (fromInventory instanceof WorldlyContainer) {
+                    WorldlyContainer iworldinventory = (WorldlyContainer) fromInventory;
 
-                if (!iworldinventory.canTakeItemThroughFace(slot, stack, facing)) {
-                    flag = false;
-                    return flag;
+                    if (!iworldinventory.canTakeItemThroughFace(slot, stack, facing)) {
+                        flag = false;
+                        return flag;
+                    }
                 }
-            }
 
-            flag = true;
-            return flag;
+                flag = true;
+                return flag;
+            });
+
         }
     }
 
diff --git a/src/main/java/net/minecraft/world/level/block/entity/JukeboxBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/JukeboxBlockEntity.java
index 77276515d6ab8155a7cff80cf3cec76e93c415ca..4e16a10ecbedb98d6a60e84e5d2c5c2a9ad45a10 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/JukeboxBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/JukeboxBlockEntity.java
@@ -254,4 +254,26 @@ public class JukeboxBlockEntity extends BlockEntity implements Clearable, Contai
         // CraftBukkit end
         this.setChanged();
     }
+
+    // MCCreativeLab start - Add InventoryHopperBehaviour
+    public de.verdox.mccreativelab.behaviour.InventoryHopperBehaviour inventoryHopperBehaviour;
+    private boolean hasInvHopperBehaviour; //
+
+    @Override
+    public void setInventoryHopperBehaviour(@org.jetbrains.annotations.Nullable de.verdox.mccreativelab.behaviour.InventoryHopperBehaviour behaviour) {
+        this.inventoryHopperBehaviour = behaviour;
+        hasInvHopperBehaviour = behaviour != null;
+    }
+
+    @org.jetbrains.annotations.Nullable
+    @Override
+    public de.verdox.mccreativelab.behaviour.InventoryHopperBehaviour getInventoryHopperBehaviour() {
+        return inventoryHopperBehaviour;
+    }
+
+    @Override
+    public boolean hasInventoryHopperBehaviour() {
+        return hasInvHopperBehaviour;
+    }
+    // MCCreativeLab end - Add InventoryHopperBehaviour
 }
diff --git a/src/main/java/net/minecraft/world/level/block/entity/LecternBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/LecternBlockEntity.java
index f454eb684d94ccf3d7726407eed1977c7b6403e0..39f0d6146de9fe52245fc59c3ba73482d471cb8a 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/LecternBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/LecternBlockEntity.java
@@ -162,11 +162,35 @@ public class LecternBlockEntity extends BlockEntity implements Clearable, MenuPr
 
         @Override
         public boolean canPlaceItem(int slot, ItemStack stack) {
-            return false;
+            return de.verdox.mccreativelab.behaviour.InventoryHopperBehaviourUtil.canPlaceItem(this, slot, stack, () -> {
+                return false;
+            });
         }
 
         @Override
         public void clearContent() {}
+
+        // MCCreativeLab start - Add InventoryHopperBehaviour
+        public de.verdox.mccreativelab.behaviour.InventoryHopperBehaviour inventoryHopperBehaviour;
+        private boolean hasInvHopperBehaviour; //
+
+        @Override
+        public void setInventoryHopperBehaviour(@org.jetbrains.annotations.Nullable de.verdox.mccreativelab.behaviour.InventoryHopperBehaviour behaviour) {
+            this.inventoryHopperBehaviour = behaviour;
+            hasInvHopperBehaviour = behaviour != null;
+        }
+
+        @org.jetbrains.annotations.Nullable
+        @Override
+        public de.verdox.mccreativelab.behaviour.InventoryHopperBehaviour getInventoryHopperBehaviour() {
+            return inventoryHopperBehaviour;
+        }
+
+        @Override
+        public boolean hasInventoryHopperBehaviour() {
+            return hasInvHopperBehaviour;
+        }
+        // MCCreativeLab end - Add InventoryHopperBehaviour
     };
     private final ContainerData dataAccess = new ContainerData() {
         @Override
diff --git a/src/main/java/net/minecraft/world/level/block/piston/PistonBaseBlock.java b/src/main/java/net/minecraft/world/level/block/piston/PistonBaseBlock.java
index be74adc86f0ca467f3b59e7b57fd47a8f381d86e..96d0474a082ebceeee5876045aeef9cb1571d034 100644
--- a/src/main/java/net/minecraft/world/level/block/piston/PistonBaseBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/piston/PistonBaseBlock.java
@@ -449,6 +449,8 @@ public class PistonBaseBlock extends DirectionalBlock {
                 map.remove(blockposition3);
                 BlockState iblockdata2 = (BlockState) Blocks.MOVING_PISTON.defaultBlockState().setValue(PistonBaseBlock.FACING, dir);
 
+                BlockState beforeUpdate = world.getBlockState(oldPos);
+
                 world.setBlock(blockposition3, iblockdata2, 68);
                 // Paper start - fix a variety of piston desync dupes
                 if (!allowDesync) {
@@ -461,6 +463,7 @@ public class PistonBaseBlock extends DirectionalBlock {
                 }
                 // Paper end - fix a variety of piston desync dupes
                 aiblockdata[i++] = iblockdata1;
+                de.verdox.mccreativelab.behaviour.BlockBehaviourUtil.getInstance().onPistonMove(beforeUpdate, world, oldPos, blockposition3, pos, enumdirection1);
             }
 
             if (retract) {
diff --git a/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java b/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java
index f26331858c7cd60677931d313b320e8068d96967..fb79780362f22cd74e33dfd71460de298056d97b 100644
--- a/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java
+++ b/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java
@@ -1268,12 +1268,13 @@ public abstract class BlockBehaviour implements FeatureElement {
 
         public void onPlace(Level world, BlockPos pos, BlockState state, boolean notify) {
             this.getBlock().onPlace(this.asState(), world, pos, state, notify);
-            blockBehaviour().onPlaceCallback(this.asState(), world, pos, state, notify); // MCCLab - Add Block behaviour
         }
 
         public void onRemove(Level world, BlockPos pos, BlockState state, boolean moved) {
             this.getBlock().onRemove(this.asState(), world, pos, state, moved);
-            blockBehaviour().onRemoveCallback(state, world, pos, state, moved); // MCCLab - Add Block behaviour
+
+            if(!this.asState().equals(state))
+                blockBehaviour().onRemoveCallback(this.asState(), world, pos, state, moved); // MCCLab - Add Block behaviour
         }
 
         public void onExplosionHit(Level world, BlockPos pos, Explosion explosion, BiConsumer<ItemStack, BlockPos> stackMerger) {
@@ -1304,9 +1305,11 @@ public abstract class BlockBehaviour implements FeatureElement {
         }
 
         public InteractionResult use(Level world, Player player, InteractionHand hand, BlockHitResult hit) {
-            return blockBehaviour().use(asState(), world, hit.getBlockPos(), player, hand, hit, () -> { // MCCLab - Add BlockBehaviour
+            InteractionResult result = blockBehaviour().use(asState(), world, hit.getBlockPos(), player, hand, hit, () -> { // MCCLab - Add BlockBehaviour
             return this.getBlock().use(this.asState(), world, hit.getBlockPos(), player, hand, hit);
             }); // MCCLab - Add BlockBehaviour
+            blockBehaviour().onUseCallback(this.asState(), world, hit.getBlockPos(), player, hand, hit, result);
+            return result;
         }
 
         public void attack(Level world, BlockPos pos, Player player) {
diff --git a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
index 40928108f8fc7061c35a94499bdb5a814da081cf..1fabe69575af012c70acfb9218511fcc7968d6af 100644
--- a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
+++ b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
@@ -464,6 +464,8 @@ public class LevelChunk extends ChunkAccess {
                     // CraftBukkit - Don't place while processing the BlockPlaceEvent, unless it's a BlockContainer. Prevents blocks such as TNT from activating when cancelled.
                     if (!this.level.isClientSide && doPlace && (!this.level.captureBlockStates || block instanceof net.minecraft.world.level.block.BaseEntityBlock)) {
                         iblockdata.onPlace(this.level, blockposition, iblockdata1, flag);
+
+                        de.verdox.mccreativelab.behaviour.BlockBehaviourUtil.getInstance().onPlaceCallback(iblockdata, this.level, blockposition, iblockdata1, flag, this.level.captureBlockStates); // MCCLab - Add Block behaviour
                     }
 
                     if (iblockdata.hasBlockEntity()) {
diff --git a/src/main/java/net/minecraft/world/level/chunk/LevelChunkSection.java b/src/main/java/net/minecraft/world/level/chunk/LevelChunkSection.java
index 31a0e576340032fd34b7cf98d621803afb23d901..3c6d1d3619a4f0a68b172b824689ca77b2dc39c4 100644
--- a/src/main/java/net/minecraft/world/level/chunk/LevelChunkSection.java
+++ b/src/main/java/net/minecraft/world/level/chunk/LevelChunkSection.java
@@ -12,6 +12,7 @@ import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.material.FluidState;
+import org.bukkit.Bukkit;
 import org.jetbrains.annotations.NotNull;
 
 public class LevelChunkSection {
diff --git a/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java b/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
index 114a02591651d1ab02d07b9049c532c72036062f..450b2b1d69d1eea6afaf44bedcca8896ed10079b 100644
--- a/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
+++ b/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
@@ -639,6 +639,7 @@ public class ChunkSerializer {
         nbttagcompound.put("structures", ChunkSerializer.packStructureData(StructurePieceSerializationContext.fromLevel(world), chunkcoordintpair, chunk.getAllStarts(), chunk.getAllReferences()));
         de.verdox.mccreativelab.worldgen.ChunkDataUtil.callChunkDataSaveEvent(world, chunk, chunk.persistentDataContainer, unloadingChunk); // MCCLab - Add Async Chunk Event
         // CraftBukkit start - store chunk persistent data in nbt
+
         if (!chunk.persistentDataContainer.isEmpty()) { // SPIGOT-6814: Always save PDC to account for 1.17 to 1.18 chunk upgrading.
             nbttagcompound.put("ChunkBukkitValues", chunk.persistentDataContainer.toTagCompound());
         }
diff --git a/src/main/java/net/minecraft/world/level/storage/PrimaryLevelData.java b/src/main/java/net/minecraft/world/level/storage/PrimaryLevelData.java
index 59ba982dc96ce47e47399514e8f74d2b972dbe1e..70167176692838fe931d539a27b542f51ad40774 100644
--- a/src/main/java/net/minecraft/world/level/storage/PrimaryLevelData.java
+++ b/src/main/java/net/minecraft/world/level/storage/PrimaryLevelData.java
@@ -38,6 +38,7 @@ import net.minecraft.world.level.dimension.end.EndDragonFight;
 import net.minecraft.world.level.levelgen.WorldOptions;
 import net.minecraft.world.level.timers.TimerCallbacks;
 import net.minecraft.world.level.timers.TimerQueue;
+import org.bukkit.World;
 import org.slf4j.Logger;
 import net.minecraft.core.registries.Registries;
 import net.minecraft.nbt.CompoundTag;
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java
index 3305796c704516f3ba42098856ee3b785a89a0ba..5cd260a2be406c6241717aa98964ee233d928606 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java
@@ -491,7 +491,7 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {
         if (((ServerPlayer) this.getHandle()).connection == null) return;
         if (this.getHandle().containerMenu != this.getHandle().inventoryMenu) {
             // fire INVENTORY_CLOSE if one already open
-            ((ServerPlayer) this.getHandle()).connection.handleContainerClose(new ServerboundContainerClosePacket(this.getHandle().containerMenu.containerId), org.bukkit.event.inventory.InventoryCloseEvent.Reason.OPEN_NEW); // Paper - Inventory close reason
+            ((ServerPlayer) this.getHandle()).connection.handleOpenContainerSwitch(new ServerboundContainerClosePacket(this.getHandle().containerMenu.containerId), inventory); // Paper - Inventory close reason
         }
         ServerPlayer player = (ServerPlayer) this.getHandle();
         AbstractContainerMenu container;
diff --git a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
index d677759ac6b6d3cfe5a2af76dc1f0034b216ac2d..a72abba4035aa8ec632fb59f8d11c9b182115ed1 100644
--- a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
+++ b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
@@ -238,6 +238,7 @@ import org.bukkit.event.world.EntitiesLoadEvent;
 import org.bukkit.event.world.EntitiesUnloadEvent;
 import org.bukkit.event.world.LootGenerateEvent;
 import org.bukkit.inventory.EquipmentSlot;
+import org.bukkit.inventory.Inventory;
 import org.bukkit.inventory.InventoryView;
 import org.bukkit.inventory.Recipe;
 import org.bukkit.inventory.meta.BookMeta;
@@ -1417,7 +1418,7 @@ public class CraftEventFactory {
     public static com.mojang.datafixers.util.Pair<net.kyori.adventure.text.@org.jetbrains.annotations.Nullable Component, @org.jetbrains.annotations.Nullable AbstractContainerMenu> callInventoryOpenEventWithTitle(ServerPlayer player, AbstractContainerMenu container, boolean cancelled) {
         // Paper end - Add titleOverride to InventoryOpenEvent
         if (player.containerMenu != player.inventoryMenu) { // fire INVENTORY_CLOSE if one already open
-            player.connection.handleContainerClose(new ServerboundContainerClosePacket(player.containerMenu.containerId), InventoryCloseEvent.Reason.OPEN_NEW); // Paper - Inventory close reason
+            player.connection.handleOpenContainerSwitch(new ServerboundContainerClosePacket(player.containerMenu.containerId), player.inventoryMenu.getBukkitView()); // Paper - Inventory close reason
         }
 
         CraftServer server = player.level().getCraftServer();
@@ -1619,15 +1620,20 @@ public class CraftEventFactory {
      */
     @Deprecated
     public static void handleInventoryCloseEvent(net.minecraft.world.entity.player.Player human) {
-        handleInventoryCloseEvent(human, org.bukkit.event.inventory.InventoryCloseEvent.Reason.UNKNOWN);
+        handleInventoryCloseEvent(human, org.bukkit.event.inventory.InventoryCloseEvent.Reason.UNKNOWN, null);
     }
-    public static void handleInventoryCloseEvent(net.minecraft.world.entity.player.Player human, org.bukkit.event.inventory.InventoryCloseEvent.Reason reason) {
+
+    public static void handleInventoryCloseEvent(net.minecraft.world.entity.player.Player human, org.bukkit.event.inventory.InventoryCloseEvent.Reason reason, @org.jetbrains.annotations.Nullable InventoryView newInventory) {
         // Paper end
         InventoryCloseEvent event = new InventoryCloseEvent(human.containerMenu.getBukkitView(), reason); // Paper
         human.level().getCraftServer().getPluginManager().callEvent(event);
         human.containerMenu.transferTo(human.inventoryMenu, human.getBukkitEntity());
     }
 
+    public static void handleInventoryCloseEvent(net.minecraft.world.entity.player.Player human, org.bukkit.event.inventory.InventoryCloseEvent.Reason reason) {
+        handleInventoryCloseEvent(human, reason, null);
+    }
+
     public static ItemStack handleEditBookEvent(ServerPlayer player, int itemInHandIndex, ItemStack itemInHand, ItemStack newBookItem) {
         PlayerEditBookEvent editBookEvent = new PlayerEditBookEvent(player.getBukkitEntity(), (itemInHandIndex >= 0 && itemInHandIndex <= 8) ? itemInHandIndex : -1, (BookMeta) CraftItemStack.getItemMeta(itemInHand), (BookMeta) CraftItemStack.getItemMeta(newBookItem), newBookItem.getItem() == Items.WRITTEN_BOOK);
         player.level().getCraftServer().getPluginManager().callEvent(editBookEvent);
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java
index af1ae3dacb628da23f7d2988c6e76d3fb2d64103..e224f1f1f1e73d7c219d55d21cb38c02a5aaf8cc 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java
@@ -4,6 +4,8 @@ import com.google.common.base.Preconditions;
 import java.util.HashMap;
 import java.util.List;
 import java.util.ListIterator;
+
+import de.verdox.mccreativelab.behaviour.InventoryHopperBehaviour;
 import net.minecraft.world.Container;
 import net.minecraft.world.inventory.CraftingContainer;
 import net.minecraft.world.inventory.MerchantContainer;
@@ -30,6 +32,7 @@ import org.bukkit.event.inventory.InventoryType;
 import org.bukkit.inventory.Inventory;
 import org.bukkit.inventory.InventoryHolder;
 import org.bukkit.inventory.ItemStack;
+import org.jetbrains.annotations.Nullable;
 
 public class CraftInventory implements Inventory {
     protected final Container inventory;
@@ -586,4 +589,22 @@ public class CraftInventory implements Inventory {
     public Location getLocation() {
         return this.inventory.getLocation();
     }
+
+    // MCCLab start - Add InventoryHopperBehaviour
+    @Override
+    public void setInventoryHopperBehaviour(@Nullable InventoryHopperBehaviour behaviour) {
+        this.inventory.setInventoryHopperBehaviour(behaviour);
+    }
+
+    @Nullable
+    @Override
+    public InventoryHopperBehaviour getInventoryHopperBehaviour() {
+        return this.inventory.getInventoryHopperBehaviour();
+    }
+
+    @Override
+    public boolean hasInventoryHopperBehaviour() {
+        return this.inventory.hasInventoryHopperBehaviour();
+    }
+    // MCCLab end - Add InventoryHopperBehaviour
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryCustom.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryCustom.java
index da1c1fe0faf6819b15a81d6ad53370948e5f984f..f550a9614e8d73a5c576581edcb8884dac669df1 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryCustom.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryCustom.java
@@ -4,6 +4,7 @@ import com.google.common.base.Preconditions;
 import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
+
 import net.minecraft.core.NonNullList;
 import net.minecraft.world.Container;
 import net.minecraft.world.entity.player.Player;
@@ -13,6 +14,7 @@ import org.bukkit.craftbukkit.entity.CraftHumanEntity;
 import org.bukkit.entity.HumanEntity;
 import org.bukkit.event.inventory.InventoryType;
 import org.bukkit.inventory.InventoryHolder;
+import org.jetbrains.annotations.Nullable;
 
 public class CraftInventoryCustom extends CraftInventory {
     // Paper start
@@ -217,11 +219,6 @@ public class CraftInventoryCustom extends CraftInventory {
             return this.owner;
         }
 
-        @Override
-        public boolean canPlaceItem(int slot, ItemStack stack) {
-            return true;
-        }
-
         @Override
         public void startOpen(Player player) {
 
@@ -268,5 +265,32 @@ public class CraftInventoryCustom extends CraftInventory {
 
             return false;
         }
+
+        // MCCreativeLab start - Add InventoryHopperBehaviour
+        public de.verdox.mccreativelab.behaviour.InventoryHopperBehaviour inventoryHopperBehaviour;
+        private boolean hasInvHopperBehaviour; //
+
+        @Override
+        public void setInventoryHopperBehaviour(@Nullable de.verdox.mccreativelab.behaviour.InventoryHopperBehaviour behaviour) {
+            this.inventoryHopperBehaviour = behaviour;
+            hasInvHopperBehaviour = behaviour != null;
+        }
+
+        @Nullable
+        @Override
+        public de.verdox.mccreativelab.behaviour.InventoryHopperBehaviour getInventoryHopperBehaviour() {
+            return inventoryHopperBehaviour;
+        }
+
+        @Override
+        public boolean hasInventoryHopperBehaviour() {
+            return hasInvHopperBehaviour;
+        }
+        // MCCreativeLab end - Add InventoryHopperBehaviour
+
+        @Override
+        public boolean canTakeItem(Container hopperInventory, int slot, ItemStack stack) {
+            return Container.super.canTakeItem(hopperInventory, slot, stack);
+        }
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/persistence/CraftPersistentDataContainer.java b/src/main/java/org/bukkit/craftbukkit/persistence/CraftPersistentDataContainer.java
index 8445c2a97781fe40be1369f0de2aee9a730ee1ee..2ec2617af9bd7591daf47584f471060d609b28dd 100644
--- a/src/main/java/org/bukkit/craftbukkit/persistence/CraftPersistentDataContainer.java
+++ b/src/main/java/org/bukkit/craftbukkit/persistence/CraftPersistentDataContainer.java
@@ -197,7 +197,7 @@ public class CraftPersistentDataContainer implements PersistentDataContainer {
 
     // Paper start
     public void clear() {
-        this.craftPersistentDataObjectCache.persistentDataObjectMap.clear(); // Paper - Adding PersistentDataObjects
+        this.craftPersistentDataObjectCache.clearCache(); // Paper - Adding PersistentDataObjects
         this.customDataTags.clear();
     }
     // Paper end
diff --git a/src/main/java/org/bukkit/craftbukkit/persistence/CraftPersistentDataObjectCache.java b/src/main/java/org/bukkit/craftbukkit/persistence/CraftPersistentDataObjectCache.java
index 4f1bd2007cdee660df8af089c668e3562021df89..5ca821403d74d7862ed0db88ce1267902418a4ec 100644
--- a/src/main/java/org/bukkit/craftbukkit/persistence/CraftPersistentDataObjectCache.java
+++ b/src/main/java/org/bukkit/craftbukkit/persistence/CraftPersistentDataObjectCache.java
@@ -1,6 +1,7 @@
 package org.bukkit.craftbukkit.persistence;
 
 import com.google.common.base.Preconditions;
+import com.google.common.base.Supplier;
 import net.minecraft.nbt.Tag;
 import org.bukkit.NamespacedKey;
 import org.bukkit.persistence.PersistentDataContainer;
@@ -20,13 +21,13 @@ import java.util.logging.Level;
 public class CraftPersistentDataObjectCache implements PersistentDataObjectCache {
     private static final Set<CraftPersistentDataContainer> weakReferences = Collections.newSetFromMap(new WeakHashMap<>());
 
-    public static int saveAllPersistentDataObjects(){
-        synchronized (weakReferences){
+    public static int saveAllPersistentDataObjects() {
+        synchronized (weakReferences) {
             int counter = 0;
             for (CraftPersistentDataContainer weakReference : weakReferences) {
                 CraftPersistentDataObjectCache craftPersistentDataObjectCache = weakReference.getPersistentDataObjectCache();
                 craftPersistentDataObjectCache.saveObjectsToTags(false);
-                craftPersistentDataObjectCache.persistentDataObjectMap.clear();
+                craftPersistentDataObjectCache.clearCache();
                 counter++;
             }
             return counter;
@@ -37,21 +38,31 @@ public class CraftPersistentDataObjectCache implements PersistentDataObjectCache
     private final CraftPersistentDataTypeRegistry registry;
     private final Map<String, Tag> tags;
     final Map<NamespacedKey, PersistentDataObject> persistentDataObjectMap = new ConcurrentHashMap<>();
-    CraftPersistentDataObjectCache(CraftPersistentDataContainer parentContainer, CraftPersistentDataTypeRegistry registry, Map<String, Tag> tags){
+
+    CraftPersistentDataObjectCache(CraftPersistentDataContainer parentContainer, CraftPersistentDataTypeRegistry registry, Map<String, Tag> tags) {
         this.parentContainer = parentContainer;
         this.registry = registry;
         this.tags = tags;
     }
+
+    public void clearCache() {
+        persistentDataObjectMap.clear();
+    }
+
     @Override
-    public <T extends PersistentDataObject> @NotNull T loadOrCreatePersistentDataObject(@NotNull NamespacedKey key, T newObject) {
+    public <T extends PersistentDataObject> @NotNull T loadOrSupplyPersistentDataObject(@NotNull NamespacedKey key, java.util.function.Supplier<T> newObjectSupplier) {
         Preconditions.checkArgument(key != null, "The NamespacedKey key cannot be null");
-        Preconditions.checkArgument(newObject != null, "The provided newObject cannot be null");
+        Preconditions.checkArgument(newObjectSupplier != null, "The provided newObject cannot be null");
         if (persistentDataObjectMap.containsKey(key))
             return (T) persistentDataObjectMap.get(key);
+
+        T newObject = newObjectSupplier.get();
+        Preconditions.checkArgument(newObject != null, "The newObject supplied cannot be null");
+
         readObjectFromTags(key, newObject);
         persistentDataObjectMap.put(key, newObject);
         markParentAsDirty();
-        synchronized (weakReferences){
+        synchronized (weakReferences) {
             weakReferences.add(parentContainer);
         }
         return newObject;
@@ -70,13 +81,14 @@ public class CraftPersistentDataObjectCache implements PersistentDataObjectCache
     public void removePersistentDataObject(@NotNull NamespacedKey key, boolean serializeBeforeRemoval) {
         Preconditions.checkArgument(key != null, "The NamespacedKey key cannot be null");
         org.bukkit.persistence.PersistentDataObject oldValue = persistentDataObjectMap.remove(key);
-        if(serializeBeforeRemoval && oldValue != null)
+
+        if (serializeBeforeRemoval && oldValue != null)
             saveObjectToTags(key, oldValue, true);
         else {
             markParentAsDirty();
         }
-        if(persistentDataObjectMap.isEmpty())
-            synchronized (weakReferences){
+        if (persistentDataObjectMap.isEmpty())
+            synchronized (weakReferences) {
                 weakReferences.remove(this);
             }
     }
@@ -88,40 +100,39 @@ public class CraftPersistentDataObjectCache implements PersistentDataObjectCache
         }
     }
 
-    void saveObjectToTags(@NotNull NamespacedKey key, @NotNull org.bukkit.persistence.PersistentDataObject persistentDataObject, boolean removeWhenEmpty){
-        try{
+    void saveObjectToTags(@NotNull NamespacedKey key, @NotNull org.bukkit.persistence.PersistentDataObject persistentDataObject, boolean removeWhenEmpty) {
+        try {
             PersistentDataContainer serialized = persistentDataObject.serialize(parentContainer.getAdapterContext());
-            if(!serialized.isEmpty())
+            if (!serialized.isEmpty()) {
                 tags.put(key.toString(), registry.wrap(PersistentDataType.TAG_CONTAINER, PersistentDataType.TAG_CONTAINER.toPrimitive(serialized, parentContainer.getAdapterContext())));
-            else if(removeWhenEmpty) {
+            } else if (removeWhenEmpty) {
                 tags.remove(key.toString());
             }
             markParentAsDirty();
-        }
-        catch (Throwable e){
-            org.bukkit.Bukkit.getLogger().log(Level.WARNING, "An error occured while saving the persistent data object "+ persistentDataObject +" with the key "+key.asString()+" ", e);
+        } catch (Throwable e) {
+            org.bukkit.Bukkit.getLogger().log(Level.WARNING, "An error occured while saving the persistent data object " + persistentDataObject + " with the key " + key.asString() + " ", e);
         }
     }
 
-    void readObjectFromTags(@NotNull NamespacedKey key, @NotNull org.bukkit.persistence.PersistentDataObject persistentDataObject){
-        try{
+    void readObjectFromTags(@NotNull NamespacedKey key, @NotNull org.bukkit.persistence.PersistentDataObject persistentDataObject) {
+        try {
             if (parentContainer.has(key, PersistentDataType.TAG_CONTAINER)) {
                 PersistentDataContainer persistentDataContainer = parentContainer.get(key, PersistentDataType.TAG_CONTAINER);
                 if (persistentDataContainer != null)
                     persistentDataObject.deSerialize(persistentDataContainer);
             }
-        } catch (Throwable e){
-            org.bukkit.Bukkit.getLogger().log(Level.WARNING, "An error occured while loading the persistent data object "+ persistentDataObject +" with the key "+key.asString()+" ", e);
+        } catch (Throwable e) {
+            org.bukkit.Bukkit.getLogger().log(Level.WARNING, "An error occured while loading the persistent data object " + persistentDataObject + " with the key " + key.asString() + " ", e);
         }
     }
 
-    void serializeObjectAtKeyBeforeLookup(NamespacedKey key){
-        if(persistentDataObjectMap.containsKey(key))
+    void serializeObjectAtKeyBeforeLookup(NamespacedKey key) {
+        if (persistentDataObjectMap.containsKey(key))
             saveObjectToTags(key, persistentDataObjectMap.get(key), true);
     }
 
-    void markParentAsDirty(){
-        if(parentContainer instanceof DirtyCraftPersistentDataContainer dirtyCraftPersistentDataContainer)
+    void markParentAsDirty() {
+        if (parentContainer instanceof DirtyCraftPersistentDataContainer dirtyCraftPersistentDataContainer)
             dirtyCraftPersistentDataContainer.dirty(true);
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/persistence/DirtyCraftPersistentDataContainer.java b/src/main/java/org/bukkit/craftbukkit/persistence/DirtyCraftPersistentDataContainer.java
index fc3a34b59b70a6f553e28ba5c61d8ad50f3cb9b5..4ab6a291cf379b57410be292a7ff07e2d78285fe 100644
--- a/src/main/java/org/bukkit/craftbukkit/persistence/DirtyCraftPersistentDataContainer.java
+++ b/src/main/java/org/bukkit/craftbukkit/persistence/DirtyCraftPersistentDataContainer.java
@@ -60,4 +60,10 @@ public final class DirtyCraftPersistentDataContainer extends CraftPersistentData
         super.putAll(map);
         this.dirty(true);
     }
+
+    @Override
+    public CraftPersistentDataObjectCache getPersistentDataObjectCache() {
+        this.dirty(true);
+        return super.getPersistentDataObjectCache();
+    }
 }
