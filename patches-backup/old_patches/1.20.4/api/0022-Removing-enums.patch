From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: derverdox <mail.ysp@web.de>
Date: Wed, 21 Feb 2024 01:20:53 +0100
Subject: [PATCH] Removing enums


diff --git a/src/main/java/de/verdox/mccreativelab/data/FakeEnum.java b/src/main/java/de/verdox/mccreativelab/data/FakeEnum.java
new file mode 100644
index 0000000000000000000000000000000000000000..87f9a7403c5165066743e9ad4bb6ebac8b71aa23
--- /dev/null
+++ b/src/main/java/de/verdox/mccreativelab/data/FakeEnum.java
@@ -0,0 +1,22 @@
+package de.verdox.mccreativelab.data;
+
+import org.bukkit.Keyed;
+import org.bukkit.NamespacedKey;
+import org.bukkit.Registry;
+
+import java.util.List;
+import java.util.Locale;
+
+public interface FakeEnum {
+    static <T extends Keyed> T valueOf(String name, Registry<T> storage){
+        return storage.get(NamespacedKey.minecraft(name.replace(".","_").toLowerCase(Locale.ROOT)));
+    }
+
+    static <T extends Keyed> List<T> values(Registry<T> storage){
+        return storage.stream().toList();
+    }
+
+    static String restoreEnumNameSchemeFromKey(NamespacedKey namespacedKey){
+        return namespacedKey.value().replace(".","_").toUpperCase(Locale.ROOT);
+    }
+}
diff --git a/src/main/java/org/bukkit/EntityActivity.java b/src/main/java/org/bukkit/EntityActivity.java
new file mode 100644
index 0000000000000000000000000000000000000000..c7bcd6987ae99ba7061507ec3536ebb62132e306
--- /dev/null
+++ b/src/main/java/org/bukkit/EntityActivity.java
@@ -0,0 +1,46 @@
+package org.bukkit;
+
+import com.google.common.base.Preconditions;
+import org.jetbrains.annotations.NotNull;
+
+public interface EntityActivity extends Keyed {
+    EntityActivity CORE = getActivity("core");
+    EntityActivity IDLE = getActivity("idle");
+    EntityActivity WORK = getActivity("work");
+    EntityActivity PLAY = getActivity("play");
+    EntityActivity REST = getActivity("rest");
+    EntityActivity MEET = getActivity("meet");
+    EntityActivity PANIC = getActivity("panic");
+    EntityActivity RAID = getActivity("raid");
+    EntityActivity PRE_RAID = getActivity("pre_raid");
+    EntityActivity HIDE = getActivity("hide");
+    EntityActivity FIGHT = getActivity("fight");
+    EntityActivity CELEBRATE = getActivity("celebrate");
+    EntityActivity ADMIRE_ITEM = getActivity("admire_item");
+    EntityActivity AVOID = getActivity("avoid");
+    EntityActivity RIDE = getActivity("ride");
+    EntityActivity PLAY_DEAD = getActivity("play_dead");
+    EntityActivity LONG_JUMP = getActivity("long_jump");
+    EntityActivity RAM = getActivity("ram");
+    EntityActivity TONGUE = getActivity("tongue");
+    EntityActivity SWIM = getActivity("swim");
+    EntityActivity LAY_SPAWN = getActivity("lay_spawn");
+    EntityActivity SNIFF = getActivity("sniff");
+    EntityActivity INVESTIGATE = getActivity("investigate");
+    EntityActivity ROAR = getActivity("roar");
+    EntityActivity EMERGE = getActivity("emerge");
+    EntityActivity DIG = getActivity("dig");
+
+    @NotNull
+    static EntityActivity getActivity(@NotNull NamespacedKey namespacedKey) {
+        EntityActivity entityActivity = Registry.ENTITY_ACTIVITY.get(namespacedKey);
+        Preconditions.checkNotNull(entityActivity, "No EntityActivity found for %s", namespacedKey);
+        return entityActivity;
+    }
+
+    @NotNull
+    static EntityActivity getActivity(@NotNull String key) {
+        return getActivity(NamespacedKey.minecraft(key));
+    }
+
+}
diff --git a/src/main/java/org/bukkit/EntitySchedule.java b/src/main/java/org/bukkit/EntitySchedule.java
new file mode 100644
index 0000000000000000000000000000000000000000..7f13fb04cd2749ca7ee416dd36abf9fc431b643a
--- /dev/null
+++ b/src/main/java/org/bukkit/EntitySchedule.java
@@ -0,0 +1,24 @@
+package org.bukkit;
+
+import com.google.common.base.Preconditions;
+import org.jetbrains.annotations.NotNull;
+
+public interface EntitySchedule extends Keyed {
+
+    EntitySchedule EMPTY = getSchedule("empty");
+    EntitySchedule SIMPLE = getSchedule("simple");
+    EntitySchedule VILLAGER_BABY = getSchedule("villager_baby");
+    EntitySchedule VILLAGER_DEFAULT = getSchedule("villager_default");
+
+    @NotNull
+    static EntitySchedule getSchedule(@NotNull NamespacedKey namespacedKey) {
+        EntitySchedule entitySchedule = Registry.ENTITY_SCHEDULE.get(namespacedKey);
+        Preconditions.checkNotNull(entitySchedule, "No EntitySchedule found for %s", namespacedKey);
+        return entitySchedule;
+    }
+
+    @NotNull
+    static EntitySchedule getSchedule(@NotNull String key) {
+        return getSchedule(NamespacedKey.minecraft(key));
+    }
+}
diff --git a/src/main/java/org/bukkit/PoiType.java b/src/main/java/org/bukkit/PoiType.java
new file mode 100644
index 0000000000000000000000000000000000000000..3cd35eddfb5e7d6d728eb46309e58e62865529db
--- /dev/null
+++ b/src/main/java/org/bukkit/PoiType.java
@@ -0,0 +1,39 @@
+package org.bukkit;
+
+import com.google.common.base.Preconditions;
+import org.jetbrains.annotations.NotNull;
+
+public interface PoiType extends Keyed, net.kyori.adventure.translation.Translatable {
+    PoiType ARMORER = getPoiType("armorer");
+    PoiType BUTCHER = getPoiType("butcher");
+    PoiType CARTOGRAPHER = getPoiType("cartographer");
+    PoiType CLERIC = getPoiType("cleric");
+    PoiType FARMER = getPoiType("farmer");
+    PoiType FISHERMAN = getPoiType("fisherman");
+    PoiType FLETCHER = getPoiType("fletcher");
+    PoiType LEATHERWORKER = getPoiType("leatherworker");
+    PoiType LIBRARIAN = getPoiType("librarian");
+    PoiType MASON = getPoiType("mason");
+    PoiType SHEPHERD = getPoiType("shepherd");
+    PoiType TOOLSMITH = getPoiType("toolsmith");
+    PoiType WEAPONSMITH = getPoiType("weaponsmith");
+    PoiType HOME = getPoiType("home");
+    PoiType MEETING = getPoiType("meeting");
+    PoiType BEEHIVE = getPoiType("beehive");
+    PoiType BEE_NEST = getPoiType("bee_nest");
+    PoiType NETHER_PORTAL = getPoiType("nether_portal");
+    PoiType LODESTONE = getPoiType("lodestone");
+    PoiType LIGHTNING_ROD = getPoiType("lightning_rod");
+    
+    @NotNull
+    static PoiType getPoiType(@NotNull NamespacedKey namespacedKey) {
+        PoiType poiType = Registry.POI_TYPE.get(namespacedKey);
+        Preconditions.checkNotNull(poiType, "No PoiType found for %s", namespacedKey);
+        return poiType;
+    }
+
+    @NotNull
+    static PoiType getPoiType(@NotNull String key) {
+        return getPoiType(NamespacedKey.minecraft(key));
+    }
+}
diff --git a/src/main/java/org/bukkit/Registry.java b/src/main/java/org/bukkit/Registry.java
index e1fb4d8cca6a9c59047b1396f5c40bea957d777a..47a4f2b1ea4b13293b8279ffbc6f9648c66fd1ca 100644
--- a/src/main/java/org/bukkit/Registry.java
+++ b/src/main/java/org/bukkit/Registry.java
@@ -77,7 +77,7 @@ public interface Registry<T extends Keyed> extends Iterable<T> {
      *
      * @see Attribute
      */
-    Registry<Attribute> ATTRIBUTE = new SimpleRegistry<>(Attribute.class);
+    Registry<Attribute> ATTRIBUTE = Objects.requireNonNull(Bukkit.getRegistry(Attribute.class), "No registry present for Attribute. This is a bug.");
     /**
      * Server banner patterns.
      *
@@ -89,7 +89,7 @@ public interface Registry<T extends Keyed> extends Iterable<T> {
      *
      * @see Biome
      */
-    Registry<Biome> BIOME = new SimpleRegistry<>(Biome.class);
+    Registry<Biome> BIOME = Objects.requireNonNull(Bukkit.getRegistry(Biome.class), "No registry present for Biome. This is a bug.");
     /**
      * Custom boss bars.
      *
@@ -152,6 +152,26 @@ public interface Registry<T extends Keyed> extends Iterable<T> {
      * @see Material
      */
     Registry<Material> MATERIAL = new SimpleRegistry<>(Material.class, (mat) -> !mat.isLegacy());
+    /**
+     * Poi Types.
+     *
+     * @see PoiType
+     */
+    Registry<PoiType> POI_TYPE = Objects.requireNonNull(Bukkit.getRegistry(PoiType.class), "No registry present for PoiType. This is a bug.");
+
+    /**
+     * Entity Schedules.
+     *
+     * @see EntitySchedule
+     */
+    Registry<EntitySchedule> ENTITY_SCHEDULE = Objects.requireNonNull(Bukkit.getRegistry(EntitySchedule.class), "No registry present for EntitySchedule. This is a bug.");
+
+    /**
+     * Entity Activities.
+     *
+     * @see EntityActivity
+     */
+    Registry<EntityActivity> ENTITY_ACTIVITY = Objects.requireNonNull(Bukkit.getRegistry(EntityActivity.class), "No registry present for EntityActivity. This is a bug.");
     /**
      * Server mob effects.
      *
@@ -175,6 +195,7 @@ public interface Registry<T extends Keyed> extends Iterable<T> {
      *
      * @see Statistic
      */
+
     Registry<Statistic> STATISTIC = new SimpleRegistry<>(Statistic.class);
     /**
      * Server structures.
@@ -218,7 +239,7 @@ public interface Registry<T extends Keyed> extends Iterable<T> {
      *
      * @see Villager.Profession
      */
-    Registry<Villager.Profession> VILLAGER_PROFESSION = new SimpleRegistry<>(Villager.Profession.class);
+    Registry<Villager.Profession> VILLAGER_PROFESSION = Objects.requireNonNull(Bukkit.getRegistry(Villager.Profession.class), "No registry present for Profession. This is a bug.");
     /**
      * Villager type.
      *
diff --git a/src/main/java/org/bukkit/attribute/Attribute.java b/src/main/java/org/bukkit/attribute/Attribute.java
index 37f93b7e9f722e76631c3e7d3e770526ee0c3926..a44ee6f481e787c27cf0ffc3b676e59b7b943668 100644
--- a/src/main/java/org/bukkit/attribute/Attribute.java
+++ b/src/main/java/org/bukkit/attribute/Attribute.java
@@ -1,5 +1,6 @@
 package org.bukkit.attribute;
 
+
 import org.bukkit.Keyed;
 import org.bukkit.NamespacedKey;
 import org.jetbrains.annotations.NotNull;
@@ -7,80 +8,85 @@ import org.jetbrains.annotations.NotNull;
 /**
  * Types of attributes which may be present on an {@link Attributable}.
  */
-public enum Attribute implements Keyed, net.kyori.adventure.translation.Translatable { // Paper - Adventure translations
-
+public interface Attribute extends Keyed, net.kyori.adventure.translation.Translatable { // Paper - Adventure translations
     /**
      * Maximum health of an Entity.
      */
-    GENERIC_MAX_HEALTH("generic.max_health"),
+
+    Attribute GENERIC_MAX_HEALTH = getAttribute("generic.max_health");
     /**
      * Range at which an Entity will follow others.
      */
-    GENERIC_FOLLOW_RANGE("generic.follow_range"),
+    Attribute GENERIC_FOLLOW_RANGE = getAttribute("generic.follow_range");
     /**
      * Resistance of an Entity to knockback.
      */
-    GENERIC_KNOCKBACK_RESISTANCE("generic.knockback_resistance"),
+    Attribute GENERIC_KNOCKBACK_RESISTANCE = getAttribute("generic.knockback_resistance");
     /**
      * Movement speed of an Entity.
      */
-    GENERIC_MOVEMENT_SPEED("generic.movement_speed"),
+    Attribute GENERIC_MOVEMENT_SPEED = getAttribute("generic.movement_speed");
     /**
      * Flying speed of an Entity.
      */
-    GENERIC_FLYING_SPEED("generic.flying_speed"),
+    Attribute GENERIC_FLYING_SPEED = getAttribute("generic.flying_speed");
     /**
      * Attack damage of an Entity.
      */
-    GENERIC_ATTACK_DAMAGE("generic.attack_damage"),
+    Attribute GENERIC_ATTACK_DAMAGE = getAttribute("generic.attack_damage");
     /**
      * Attack knockback of an Entity.
      */
-    GENERIC_ATTACK_KNOCKBACK("generic.attack_knockback"),
+    Attribute GENERIC_ATTACK_KNOCKBACK = getAttribute("generic.attack_knockback");
     /**
      * Attack speed of an Entity.
      */
-    GENERIC_ATTACK_SPEED("generic.attack_speed"),
+    Attribute GENERIC_ATTACK_SPEED = getAttribute("generic.attack_speed");
     /**
      * Armor bonus of an Entity.
      */
-    GENERIC_ARMOR("generic.armor"),
+    Attribute GENERIC_ARMOR = getAttribute("generic.armor");
     /**
      * Armor durability bonus of an Entity.
      */
-    GENERIC_ARMOR_TOUGHNESS("generic.armor_toughness"),
+    Attribute GENERIC_ARMOR_TOUGHNESS = getAttribute("generic.armor_toughness");
     /**
      * Luck bonus of an Entity.
      */
-    GENERIC_LUCK("generic.luck"),
+    Attribute GENERIC_LUCK = getAttribute("generic.luck");
     /**
      * Maximum absorption of an Entity.
      */
-    GENERIC_MAX_ABSORPTION("generic.max_absorption"),
+    Attribute GENERIC_MAX_ABSORPTION = getAttribute("generic.max_absorption");
     /**
      * Strength with which a horse will jump.
      */
-    HORSE_JUMP_STRENGTH("horse.jump_strength"),
+    Attribute HORSE_JUMP_STRENGTH = getAttribute("horse.jump_strength");
     /**
      * Chance of a zombie to spawn reinforcements.
      */
-    ZOMBIE_SPAWN_REINFORCEMENTS("zombie.spawn_reinforcements");
-
-    private final NamespacedKey key;
+    Attribute ZOMBIE_SPAWN_REINFORCEMENTS = getAttribute("zombie.spawn_reinforcements");
 
-    private Attribute(String key) {
-        this.key = NamespacedKey.minecraft(key);
+    default String name(){
+        return de.verdox.mccreativelab.data.FakeEnum.restoreEnumNameSchemeFromKey(getKey());
+    }
+    static Attribute valueOf(String name){
+        return de.verdox.mccreativelab.data.FakeEnum.valueOf(name, org.bukkit.Registry.ATTRIBUTE);
+    }
+    static Attribute[] values(){
+        return de.verdox.mccreativelab.data.FakeEnum.values(org.bukkit.Registry.ATTRIBUTE).toArray(Attribute[]::new);
     }
 
     @NotNull
-    @Override
-    public NamespacedKey getKey() {
-        return key;
+    static Attribute getAttribute(@NotNull NamespacedKey namespacedKey) {
+        Attribute attribute = org.bukkit.Registry.ATTRIBUTE.get(namespacedKey);
+        com.google.common.base.Preconditions.checkNotNull(attribute, "No Attribute found for %s", namespacedKey);
+        return attribute;
     }
     // Paper start
-    @Override
-    public @NotNull String translationKey() {
-        return "attribute.name." + this.key.getKey();
+    @NotNull
+    static Attribute getAttribute(@NotNull String key) {
+        return getAttribute(NamespacedKey.minecraft(key));
     }
     // Paper end
 }
diff --git a/src/main/java/org/bukkit/block/Biome.java b/src/main/java/org/bukkit/block/Biome.java
index 5d8fa5b39a5d50cca48ba63af3a84b80f279b649..a0006b4cca6679b1d7e3b63e5d437fe7e227524c 100644
--- a/src/main/java/org/bukkit/block/Biome.java
+++ b/src/main/java/org/bukkit/block/Biome.java
@@ -8,92 +8,105 @@ import org.jetbrains.annotations.NotNull;
 /**
  * Holds all accepted Biomes in the default server
  */
-public enum Biome implements Keyed, net.kyori.adventure.translation.Translatable { // Paper
-    OCEAN,
-    PLAINS,
-    DESERT,
-    WINDSWEPT_HILLS,
-    FOREST,
-    TAIGA,
-    SWAMP,
-    MANGROVE_SWAMP,
-    RIVER,
-    NETHER_WASTES,
-    THE_END,
-    FROZEN_OCEAN,
-    FROZEN_RIVER,
-    SNOWY_PLAINS,
-    MUSHROOM_FIELDS,
-    BEACH,
-    JUNGLE,
-    SPARSE_JUNGLE,
-    DEEP_OCEAN,
-    STONY_SHORE,
-    SNOWY_BEACH,
-    BIRCH_FOREST,
-    DARK_FOREST,
-    SNOWY_TAIGA,
-    OLD_GROWTH_PINE_TAIGA,
-    WINDSWEPT_FOREST,
-    SAVANNA,
-    SAVANNA_PLATEAU,
-    BADLANDS,
-    WOODED_BADLANDS,
-    SMALL_END_ISLANDS,
-    END_MIDLANDS,
-    END_HIGHLANDS,
-    END_BARRENS,
-    WARM_OCEAN,
-    LUKEWARM_OCEAN,
-    COLD_OCEAN,
-    DEEP_LUKEWARM_OCEAN,
-    DEEP_COLD_OCEAN,
-    DEEP_FROZEN_OCEAN,
-    THE_VOID,
-    SUNFLOWER_PLAINS,
-    WINDSWEPT_GRAVELLY_HILLS,
-    FLOWER_FOREST,
-    ICE_SPIKES,
-    OLD_GROWTH_BIRCH_FOREST,
-    OLD_GROWTH_SPRUCE_TAIGA,
-    WINDSWEPT_SAVANNA,
-    ERODED_BADLANDS,
-    BAMBOO_JUNGLE,
-    SOUL_SAND_VALLEY,
-    CRIMSON_FOREST,
-    WARPED_FOREST,
-    BASALT_DELTAS,
-    DRIPSTONE_CAVES,
-    LUSH_CAVES,
-    DEEP_DARK,
-    MEADOW,
-    GROVE,
-    SNOWY_SLOPES,
-    FROZEN_PEAKS,
-    JAGGED_PEAKS,
-    STONY_PEAKS,
-    CHERRY_GROVE,
+public interface Biome extends Keyed, net.kyori.adventure.translation.Translatable { // Paper
+    Biome OCEAN = getBiome("ocean");
+    Biome PLAINS = getBiome("plains");
+    Biome DESERT = getBiome("desert");
+    Biome WINDSWEPT_HILLS = getBiome("windswept_hills");
+    Biome FOREST = getBiome("forest");
+    Biome TAIGA = getBiome("taiga");
+    Biome SWAMP = getBiome("swamp");
+    Biome MANGROVE_SWAMP = getBiome("mangrove_swamp");
+    Biome RIVER = getBiome("river");
+    Biome NETHER_WASTES = getBiome("nether_wastes");
+    Biome THE_END = getBiome("the_end");
+    Biome FROZEN_OCEAN = getBiome("frozen_ocean");
+    Biome FROZEN_RIVER = getBiome("frozen_river");
+    Biome SNOWY_PLAINS = getBiome("snowy_plains");
+    Biome MUSHROOM_FIELDS = getBiome("mushroom_fields");
+    Biome BEACH = getBiome("beach");
+    Biome JUNGLE = getBiome("jungle");
+    Biome SPARSE_JUNGLE = getBiome("sparse_jungle");
+    Biome DEEP_OCEAN = getBiome("deep_ocean");
+    Biome STONY_SHORE = getBiome("stony_shore");
+    Biome SNOWY_BEACH = getBiome("snowy_beach");
+    Biome BIRCH_FOREST = getBiome("birch_forest");
+    Biome DARK_FOREST = getBiome("dark_forest");
+    Biome SNOWY_TAIGA = getBiome("snowy_taiga");
+    Biome OLD_GROWTH_PINE_TAIGA = getBiome("old_growth_pine_taiga");
+    Biome WINDSWEPT_FOREST = getBiome("windswept_forest");
+    Biome SAVANNA = getBiome("savanna");
+    Biome SAVANNA_PLATEAU = getBiome("savanna_plateau");
+    Biome BADLANDS = getBiome("badlands");
+    Biome WOODED_BADLANDS = getBiome("wooded_badlands");
+    Biome SMALL_END_ISLANDS = getBiome("small_end_islands");
+    Biome END_MIDLANDS = getBiome("end_midlands");
+    Biome END_HIGHLANDS = getBiome("end_highlands");
+    Biome END_BARRENS = getBiome("end_barrens");
+    Biome WARM_OCEAN = getBiome("warm_ocean");
+    Biome LUKEWARM_OCEAN = getBiome("lukewarm_ocean");
+    Biome COLD_OCEAN = getBiome("cold_ocean");
+    Biome DEEP_LUKEWARM_OCEAN = getBiome("deep_lukewarm_ocean");
+    Biome DEEP_COLD_OCEAN = getBiome("deep_cold_ocean");
+    Biome DEEP_FROZEN_OCEAN = getBiome("deep_frozen_ocean");
+    Biome THE_VOID = getBiome("the_void");
+    Biome SUNFLOWER_PLAINS = getBiome("sunflower_plains");
+    Biome WINDSWEPT_GRAVELLY_HILLS = getBiome("windswept_gravelly_hills");
+    Biome FLOWER_FOREST = getBiome("flower_forest");
+    Biome ICE_SPIKES = getBiome("ice_spikes");
+    Biome OLD_GROWTH_BIRCH_FOREST = getBiome("old_growth_birch_forest");
+    Biome OLD_GROWTH_SPRUCE_TAIGA = getBiome("old_growth_spruce_taiga");
+    Biome WINDSWEPT_SAVANNA = getBiome("windswept_savanna");
+    Biome ERODED_BADLANDS = getBiome("eroded_badlands");
+    Biome BAMBOO_JUNGLE = getBiome("bamboo_jungle");
+    Biome SOUL_SAND_VALLEY = getBiome("soul_sand_valley");
+    Biome CRIMSON_FOREST = getBiome("crimson_forest");
+    Biome WARPED_FOREST = getBiome("warped_forest");
+    Biome BASALT_DELTAS = getBiome("basalt_deltas");
+    Biome DRIPSTONE_CAVES = getBiome("dripstone_caves");
+    Biome LUSH_CAVES = getBiome("lush_caves");
+    Biome DEEP_DARK = getBiome("deep_dark");
+    Biome MEADOW = getBiome("meadow");
+    Biome GROVE = getBiome("grove");
+    Biome SNOWY_SLOPES = getBiome("snowy_slopes");
+    Biome FROZEN_PEAKS = getBiome("frozen_peaks");
+    Biome JAGGED_PEAKS = getBiome("jagged_peaks");
+    Biome STONY_PEAKS = getBiome("stony_peaks");
+    Biome CHERRY_GROVE = getBiome("cherry_grove");
     /**
      * Represents a custom Biome
      */
-    CUSTOM;
-
-    private final NamespacedKey key;
-
-    private Biome() {
-        this.key = NamespacedKey.minecraft(name().toLowerCase(Locale.ROOT));
+    Biome CUSTOM = new Biome() {
+    // Paper start
+        @Override
+        public @NotNull NamespacedKey getKey() {
+            return NamespacedKey.minecraft("custom");
+        }
+        @Override
+        public @NotNull String translationKey() {
+            return "biome.minecraft." + this.getKey().getKey();
+        }
+    };
+    // Paper end
+    @NotNull
+    static Biome getBiome(@NotNull NamespacedKey namespacedKey) {
+        Biome biome = org.bukkit.Registry.BIOME.get(namespacedKey);
+        com.google.common.base.Preconditions.checkNotNull(biome, "No Biome found for %s", namespacedKey);
+        return biome;
     }
 
     @NotNull
-    @Override
-    public NamespacedKey getKey() {
-        return key;
+    static Biome getBiome(@NotNull String key) {
+        return getBiome(NamespacedKey.minecraft(key));
     }
 
-    // Paper start
-    @Override
-    public @NotNull String translationKey() {
-        return "biome.minecraft." + this.key.getKey();
+    default String name(){
+        return de.verdox.mccreativelab.data.FakeEnum.restoreEnumNameSchemeFromKey(this.getKey());
+    }
+    static Biome valueOf(String name){
+        return de.verdox.mccreativelab.data.FakeEnum.valueOf(name, org.bukkit.Registry.BIOME);
+    }
+    static Biome[] values(){
+        return de.verdox.mccreativelab.data.FakeEnum.values(org.bukkit.Registry.BIOME).toArray(Biome[]::new);
     }
-    // Paper end
 }
diff --git a/src/main/java/org/bukkit/entity/Villager.java b/src/main/java/org/bukkit/entity/Villager.java
index 3bc24457d143449e6a338d79becf7c39b9f81054..4fe12afb1616d0cc8d599022362ba6790fa0d0f7 100644
--- a/src/main/java/org/bukkit/entity/Villager.java
+++ b/src/main/java/org/bukkit/entity/Villager.java
@@ -1,5 +1,8 @@
 package org.bukkit.entity;
 
+import com.google.common.base.Preconditions;
+import de.verdox.mccreativelab.data.FakeEnum;
+import org.bukkit.Registry;
 import java.util.Locale;
 import java.util.Map; // Paper
 import java.util.UUID; // Paper
@@ -9,6 +12,8 @@ import org.bukkit.NamespacedKey;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+
+
 /**
  * Represents a villager NPC
  */
@@ -191,96 +196,101 @@ public interface Villager extends AbstractVillager {
      * Represents the various different Villager professions there may be.
      * Villagers have different trading options depending on their profession,
      */
-    public enum Profession implements Keyed, net.kyori.adventure.translation.Translatable { // Paper
-        NONE,
+    public interface Profession extends Keyed, net.kyori.adventure.translation.Translatable { // Paper
+        default String name(){
+            return FakeEnum.restoreEnumNameSchemeFromKey(this.getKey());
+        }
+        static Profession valueOf(String name){
+            return FakeEnum.valueOf(name, Registry.VILLAGER_PROFESSION);
+        }
+        static Profession[] values(){
+            return FakeEnum.values(Registry.VILLAGER_PROFESSION).toArray(Profession[]::new);
+        }
+        @NotNull
+        static Profession getProfession(@NotNull String key) {
+            return getProfession(NamespacedKey.minecraft(key));
+        }
+
+
+        Profession NONE = getProfession("none");
         /**
          * Armorer profession. Wears a black apron. Armorers primarily trade for
          * iron armor, chainmail armor, and sometimes diamond armor.
          */
-        ARMORER,
+        Profession ARMORER = getProfession("armorer");
         /**
          * Butcher profession. Wears a white apron. Butchers primarily trade for
          * raw and cooked food.
          */
-        BUTCHER,
+        Profession BUTCHER = getProfession("butcher");
         /**
          * Cartographer profession. Wears a white robe. Cartographers primarily
          * trade for explorer maps and some paper.
          */
-        CARTOGRAPHER,
+        Profession CARTOGRAPHER = getProfession("cartographer");
         /**
          * Cleric profession. Wears a purple robe. Clerics primarily trade for
          * rotten flesh, gold ingot, redstone, lapis, ender pearl, glowstone,
          * and bottle o' enchanting.
          */
-        CLERIC,
+        Profession CLERIC = getProfession("cleric");
         /**
          * Farmer profession. Wears a brown robe. Farmers primarily trade for
          * food-related items.
          */
-        FARMER,
+        Profession FARMER = getProfession("farmer");
         /**
          * Fisherman profession. Wears a brown robe. Fisherman primarily trade
          * for fish, as well as possibly selling string and/or coal.
          */
-        FISHERMAN,
+        Profession FISHERMAN = getProfession("fisherman");
         /**
          * Fletcher profession. Wears a brown robe. Fletchers primarily trade
          * for string, bows, and arrows.
          */
-        FLETCHER,
+        Profession FLETCHER = getProfession("fletcher");
         /**
          * Leatherworker profession. Wears a white apron. Leatherworkers
          * primarily trade for leather, and leather armor, as well as saddles.
          */
-        LEATHERWORKER,
+        Profession LEATHERWORKER = getProfession("leatherworker");
         /**
          * Librarian profession. Wears a white robe. Librarians primarily trade
          * for paper, books, and enchanted books.
          */
-        LIBRARIAN,
+        Profession LIBRARIAN = getProfession("librarian");
         /**
          * Mason profession.
          */
-        MASON,
+        Profession MASON = getProfession("mason");
         /**
          * Nitwit profession. Wears a green apron, cannot trade. Nitwit
          * villagers do not do anything. They do not have any trades by default.
          */
-        NITWIT,
+        Profession NITWIT = getProfession("nitwit");
         /**
          * Shepherd profession. Wears a brown robe. Shepherds primarily trade for
          * wool items, and shears.
          */
-        SHEPHERD,
+        Profession SHEPHERD = getProfession("shepherd");
         /**
          * Toolsmith profession. Wears a black apron. Tool smiths primarily
          * trade for iron and diamond tools.
          */
-        TOOLSMITH,
+        Profession TOOLSMITH = getProfession("toolsmith");
         /**
          * Weaponsmith profession. Wears a black apron. Weapon smiths primarily
          * trade for iron and diamond weapons, sometimes enchanted.
          */
-        WEAPONSMITH;
-        private final NamespacedKey key;
+        Profession WEAPONSMITH = getProfession("weaponsmith");
 
-        private Profession() {
-            this.key = NamespacedKey.minecraft(this.name().toLowerCase(Locale.ROOT));
-        }
 
         @NotNull
-        @Override
-        public NamespacedKey getKey() {
-            return key;
-        }
-
-        // Paper start
-        @Override
-        public @NotNull String translationKey() {
-            return "entity.minecraft.villager." + this.key.getKey();
+        static Profession getProfession(@NotNull NamespacedKey namespacedKey) {
+            Profession biome = Registry.VILLAGER_PROFESSION.get(namespacedKey);
+            Preconditions.checkNotNull(biome, "No VillagerProfession found for %s", namespacedKey);
+            return biome;
         }
-        // Paper end
     }
 
     // Paper start - Add villager reputation API
