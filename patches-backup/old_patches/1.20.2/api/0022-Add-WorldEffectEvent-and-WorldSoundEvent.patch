From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: derverdox <mail.ysp@web.de>
Date: Sun, 7 Jan 2024 02:02:31 +0100
Subject: [PATCH] Add WorldEffectEvent and WorldSoundEvent


diff --git a/src/main/java/io/papermc/paper/event/world/WorldEffectEvent.java b/src/main/java/io/papermc/paper/event/world/WorldEffectEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..2e7964834937d16003314cdbd2c424cd77cf1a41
--- /dev/null
+++ b/src/main/java/io/papermc/paper/event/world/WorldEffectEvent.java
@@ -0,0 +1,134 @@
+package io.papermc.paper.event.world;
+
+import org.bukkit.Effect;
+import org.bukkit.Location;
+import org.bukkit.World;
+import org.bukkit.entity.Player;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.world.WorldEvent;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+public class WorldEffectEvent extends WorldEvent implements Cancellable {
+    private static final HandlerList HANDLER_LIST = new HandlerList();
+    private final boolean global;
+    private Location soundLocation;
+    private Player except;
+    private Effect effect;
+    private int data;
+    private boolean cancelled;
+
+    public WorldEffectEvent(@NotNull World world, @NotNull Location soundLocation, @Nullable Player except, Effect effect, int data, boolean global) {
+        super(world);
+        this.soundLocation = soundLocation;
+        this.except = except;
+        this.effect = effect;
+        this.data = data;
+        this.global = global;
+    }
+
+    /**
+     * Sets the location of the effect
+     *
+     * @param soundLocation - The new location
+     */
+    public void setSoundLocation(Location soundLocation) {
+        this.soundLocation = soundLocation;
+    }
+
+    /**
+     * Sets the player to except from receiving this effect
+     *
+     * @param except - The excepted player
+     */
+    public void setExcept(Player except) {
+        this.except = except;
+    }
+
+    /**
+     * Sets the effect played
+     *
+     * @param effect - The new effect
+     */
+    public void setEffect(Effect effect) {
+        this.effect = effect;
+    }
+
+    /**
+     * Sets the data associated with this effect
+     *
+     * @param data - the new data
+     */
+    public void setData(int data) {
+        this.data = data;
+    }
+
+    /**
+     * Gets if the world effect is global
+     *
+     * @return - true if global
+     */
+    public boolean isGlobal() {
+        return global;
+    }
+
+    /**
+     * Gets the location of the effect origin
+     *
+     * @return - The location
+     */
+    public Location getSoundLocation() {
+        return soundLocation;
+    }
+
+    /**
+     * Gets the except player if available.
+     * This is not null for effects that occur on client side simultaneously.
+     *
+     * @return - The except player if available
+     */
+    @Nullable
+    public Player getExcept() {
+        return except;
+    }
+
+    /**
+     * The effect associated with this event
+     *
+     * @return - The effect
+     */
+    public Effect getEffect() {
+        return effect;
+    }
+
+    /**
+     * The data associated with this effect
+     * See <a href="https://wiki.vg/Protocol#:~:text=been%20highly%20inconsistent.-,World%20Event,-Sent%20when%20a">...</a> for further details
+     *
+     * @return - The data
+     */
+    public int getData() {
+        return data;
+    }
+
+    @NotNull
+    public static HandlerList getHandlerList() {
+        return HANDLER_LIST;
+    }
+
+    @NotNull
+    public HandlerList getHandlers() {
+        return HANDLER_LIST;
+    }
+
+    @Override
+    public boolean isCancelled() {
+        return cancelled;
+    }
+
+    @Override
+    public void setCancelled(boolean cancel) {
+        this.cancelled = cancel;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/event/world/WorldSoundEvent.java b/src/main/java/io/papermc/paper/event/world/WorldSoundEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..9adfd51f6659e920786658c34709ee5d1b0f790a
--- /dev/null
+++ b/src/main/java/io/papermc/paper/event/world/WorldSoundEvent.java
@@ -0,0 +1,202 @@
+package io.papermc.paper.event.world;
+
+import net.kyori.adventure.sound.Sound;
+import org.bukkit.Location;
+import org.bukkit.NamespacedKey;
+import org.bukkit.World;
+import org.bukkit.entity.Entity;
+import org.bukkit.entity.Player;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.world.WorldEvent;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.Objects;
+
+/**
+ * Is called when a sound is played in a world.
+ * Some sounds are client side and can't be manipulated with this event.
+ */
+public class WorldSoundEvent extends WorldEvent implements Cancellable {
+    private static final HandlerList HANDLER_LIST = new HandlerList();
+    private Location soundLocation;
+    private @Nullable Player except;
+    private @Nullable Entity emitter;
+    private NamespacedKey sound;
+    private Sound.Source soundCategory;
+    private float volume;
+    private float pitch;
+    private long seed;
+    private boolean cancelled;
+
+    public WorldSoundEvent(@NotNull World world, @NotNull Location soundLocation, @Nullable Player except, @Nullable Entity emitter, @NotNull NamespacedKey sound, @NotNull Sound.Source soundCategory, float volume, float pitch, long seed) {
+        super(world);
+        this.soundLocation = soundLocation;
+        this.except = except;
+        this.emitter = emitter;
+        this.sound = sound;
+        this.soundCategory = soundCategory;
+        this.volume = volume;
+        this.pitch = pitch;
+        this.seed = seed;
+    }
+
+    /**
+     * Sets the location of the sound
+     * If the sound has an emitter entity the location will be the location of the entity
+     * @param soundLocation - The new sound location
+     */
+    public void setSoundLocation(@NotNull Location soundLocation) {
+        Objects.requireNonNull(soundLocation);
+        this.soundLocation = soundLocation;
+    }
+
+    /**
+     * Sets the emitter of this sound event.
+     * If the emitter is null, the soundLocation will be used instead
+     * @param emitter - The new entity emitter
+     */
+    public void setEmitter(@Nullable Entity emitter) {
+        this.emitter = emitter;
+    }
+
+    /**
+     * Sets the player that is excepted from this sound event
+     * @param except - The Player excepted
+     */
+    public void setExcept(@Nullable Player except) {
+        this.except = except;
+    }
+
+    /**
+     * Sets the sound played by this event
+     * @param sound - The sound
+     */
+    public void setSound(@NotNull NamespacedKey sound) {
+        Objects.requireNonNull(sound);
+        this.sound = sound;
+    }
+
+    /**
+     * Sets the volume of the sound
+     * @param volume - The volume
+     */
+    public void setVolume(float volume) {
+        this.volume = volume;
+    }
+
+    /**
+     * Sets the pitch of the sound
+     * @param pitch - The pitch
+     */
+    public void setPitch(float pitch) {
+        this.pitch = pitch;
+    }
+
+    /**
+     * Sets the sound category of this sound
+     * @param soundCategory - The sound category
+     */
+    public void setSoundCategory(@NotNull Sound.Source soundCategory) {
+        Objects.requireNonNull(soundCategory);
+        this.soundCategory = soundCategory;
+    }
+
+    /**
+     * Sets the sound seed
+     * @param seed - The seed
+     */
+    public void setSeed(long seed) {
+        this.seed = seed;
+    }
+
+    /**
+     * Gets the player that is excepted from this sound event.
+     * This is used to play player related sounds the client produces as well to prevent double sounds.
+     * Is null when the sound has no player that wont receive it
+     * @return The player if available
+     */
+    @Nullable
+    public Player getExcept() {
+        return except;
+    }
+
+    /**
+     * Gets the sound related to this event
+     * @return - The sound
+     */
+    @NotNull
+    public NamespacedKey getSound() {
+        return sound;
+    }
+
+    /**
+     * Gets the sound category of this sound
+     * @return - The sound category
+     */
+    @NotNull
+    public Sound.Source getSoundCategory() {
+        return soundCategory;
+    }
+
+    /**
+     * Gets the volume
+     * @return - The volume
+     */
+    public float getVolume() {
+        return volume;
+    }
+
+    /**
+     * Gets the emitter of the sound.
+     * Might be null if the sound origin is not an entity
+     * @return - The sound emitter
+     */
+    public @Nullable Entity getEmitter() {
+        return emitter;
+    }
+
+    /**
+     * Gets the location of the sound
+     * @return - The sound location
+     */
+    public Location getSoundLocation() {
+        return soundLocation;
+    }
+
+    /**
+     * Gets the pitch
+     * @return - The pitch
+     */
+    public float getPitch() {
+        return pitch;
+    }
+
+    /**
+     * Gets the sound seed
+     * @return - The seed
+     */
+    public long getSeed() {
+        return seed;
+    }
+
+    @Override
+    public void setCancelled(boolean cancel) {
+        this.cancelled = cancel;
+    }
+
+    @Override
+    public boolean isCancelled() {
+        return cancelled;
+    }
+
+    @NotNull
+    public static HandlerList getHandlerList() {
+        return HANDLER_LIST;
+    }
+    @NotNull
+    public HandlerList getHandlers() {
+        return HANDLER_LIST;
+    }
+}
