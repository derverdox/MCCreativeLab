From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: derverdox <mail.ysp@web.de>
Date: Sun, 3 Dec 2023 15:32:52 +0100
Subject: [PATCH] Opening FoodBehaviour to API


diff --git a/src/main/java/de/verdox/mccreativelab/behaviour/FoodBehaviour.java b/src/main/java/de/verdox/mccreativelab/behaviour/FoodBehaviour.java
new file mode 100644
index 0000000000000000000000000000000000000000..de2cb5e6bb1993f81e2c8ae6cb9e871fade83525
--- /dev/null
+++ b/src/main/java/de/verdox/mccreativelab/behaviour/FoodBehaviour.java
@@ -0,0 +1,63 @@
+package de.verdox.mccreativelab.behaviour;
+
+import de.verdox.mccreativelab.CustomBehaviour;
+import org.bukkit.entity.Player;
+
+public interface FoodBehaviour {
+    /**
+     * If you wish to change the amount of health gained, use the {@link org.bukkit.event.entity.EntityRegainHealthEvent}
+     * If you wish to change the amount of damage taken by starvation, use the {@link org.bukkit.event.entity.EntityDamageEvent}
+     * This interface is solely used to manipulate the vanilla variables that are not yet changeable by the API.
+     * Implement your own version of the FoodBehaviour Interface and make FOOD_BEHAVIOUR use your implementation.
+     */
+    CustomBehaviour<FoodBehaviour> FOOD_BEHAVIOUR = new CustomBehaviour<>("MCCLab - FoodBehaviour");
+    /**
+     * Gets the regeneration rate per tick when a player is saturated.
+     * Defaults to 10 in vanilla.
+     * @param player The player
+     * @return the regeneration rate per tick
+     */
+    int getSaturatedRegenRate(Player player);
+    /**
+     * Gets the regeneration rate per tick when a player is unsaturated.
+     * Defaults to 80 in vanilla.
+     * @param player The player
+     * @return the regeneration rate per tick
+     */
+    int getUnsaturatedRegenRate(Player player);
+    /**
+     * Gets the starvation rate per tick when a player is starving.
+     * Defaults to 80 in vanilla.
+     * @param player The player
+     * @return the regeneration rate per tick
+     */
+    int getStarvationRate(Player player);
+    /**
+     * Gets the food level when a player starts starving
+     * Defaults to 0 in vanilla.
+     * @param player The player
+     * @return the starvation food limit
+     */
+    int getStarvationFoodLimit(Player player);
+    /**
+     * Gets the food level a player needs at minimum to start regenerating health
+     * Defaults to 18 in vanilla.
+     * @param player The player
+     * @return the food level
+     */
+    int getMinimumFoodToRegenerate(Player player);
+    /**
+     * Gets the exhaustion over time rate in ticks
+     * This is a custom feature. If the method returns an integer less or equal then -1 the feature won't be used.
+     * @param player The player
+     * @return the food level
+     */
+    int getExhaustionOverTimeRateInTicks(Player player);
+    /**
+     * Gets the exhaustion amount over time
+     * * This is a custom feature. If the method returns an integer less or equal then 0 the feature won't be used.
+     * @param player The player
+     * @return the food level
+     */
+    int getExhaustionOverTimeAmount(Player player);
+}
