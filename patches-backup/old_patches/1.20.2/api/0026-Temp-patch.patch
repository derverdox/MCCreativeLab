From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: derverdox <mail.ysp@web.de>
Date: Tue, 9 Jan 2024 16:38:00 +0100
Subject: [PATCH] Temp patch


diff --git a/src/main/java/de/verdox/mccreativelab/ai/EntityBrain.java b/src/main/java/de/verdox/mccreativelab/ai/EntityBrain.java
new file mode 100644
index 0000000000000000000000000000000000000000..98eeba9031f61892ae8d2a6042c2739fe9bb2bf2
--- /dev/null
+++ b/src/main/java/de/verdox/mccreativelab/ai/EntityBrain.java
@@ -0,0 +1,46 @@
+package de.verdox.mccreativelab.ai;
+
+import de.verdox.mccreativelab.ai.behavior.CustomAIBehavior;
+import de.verdox.mccreativelab.ai.MemoryStatus;
+import de.verdox.mccreativelab.ai.behavior.PaperCustomAIBehavior;
+import org.bukkit.EntityActivity;
+import org.bukkit.EntitySchedule;
+import org.bukkit.World;
+import org.bukkit.entity.LivingEntity;
+import org.bukkit.entity.memory.MemoryKey;
+
+import javax.annotation.Nullable;
+import java.util.*;
+import java.util.function.Consumer;
+
+public interface EntityBrain<E extends LivingEntity> {
+    <U> void eraseMemory(MemoryKey<U> memoryKey);
+    <U> void setMemory(MemoryKey<U> type, @Nullable U value);
+    <U> void setMemoryWithExpiry(MemoryKey<U> type, U value, long expiry);
+    <U> Optional<U> getMemory(MemoryKey<U> type);
+    <U> long getTimeUntilExpiry(MemoryKey<U> type);
+    <U> boolean isMemoryValue(MemoryKey<U> type, U value);
+    boolean checkMemory(MemoryKey<?> type, MemoryStatus state);
+    EntitySchedule getSchedule();
+    void setSchedule(EntitySchedule schedule);
+    void setCoreActivities(Set<EntityActivity> coreActivities);
+    void useDefaultActivity();
+    Optional<EntityActivity> getActiveNonCoreActivity();
+    void setActiveActivityIfPossible(EntityActivity activity);
+    void updateActivityFromSchedule(long timeOfDay, long time);
+    void setActiveActivityToFirstValid(List<EntityActivity> activities);
+    void setDefaultActivity(EntityActivity activity);
+    void addActivity(ActivityBuilder<E> activityBuilder);
+    void addActivity(EntityActivity activity, Consumer<ActivityBuilder<E>> activityBuilder);
+    boolean isActive(EntityActivity activity);
+    EntityBrain<E> copyWithoutBehaviours();
+    void stopAll(World world, E entity);
+
+    ActivityBuilder<E> createActivityBuilder(EntityActivity entityActivity);
+
+    interface ActivityBuilder<E extends LivingEntity>{
+        ActivityBuilder<E> withBehaviour(int priority, PaperAIBehaviour<E> customAiBehavior);
+        ActivityBuilder<E> withRequiredMemory(MemoryKey<?> requiredMemoryKey, MemoryStatus memoryStatus);
+        ActivityBuilder<E> withForgettingMemoriesWhenStopped(MemoryKey<?> forgettingMemoryKey);
+    }
+}
diff --git a/src/main/java/de/verdox/mccreativelab/ai/behaviour/AIBehaviour.java b/src/main/java/de/verdox/mccreativelab/ai/behaviour/AIBehaviour.java
new file mode 100644
index 0000000000000000000000000000000000000000..3812941e39c3c061843bc134c62246abbe268b65
--- /dev/null
+++ b/src/main/java/de/verdox/mccreativelab/ai/behaviour/AIBehaviour.java
@@ -0,0 +1,30 @@
+package de.verdox.mccreativelab.ai.behavior;
+
+import org.bukkit.World;
+import org.bukkit.entity.LivingEntity;
+import org.bukkit.entity.memory.MemoryKey;
+
+import java.util.Map;
+
+public interface AIBehaviour<E extends LivingEntity> {
+    int getMinDuration();
+
+    int getMaxDuration();
+
+    Map<MemoryKey<?>, MemoryStatus> getRequiredMemoryStates();
+
+    void start(World world, E entity, long time);
+    void tick(World world, E entity, long time);
+
+    void stop(World world, E entity, long time);
+
+    boolean canStillUse(World world, E entity, long time);
+
+    boolean checkExtraStartConditions(World world, E entity, long time);
+    Class<? extends E> getEntityType();
+
+    enum Status {
+        STOPPED,
+        RUNNING,
+    }
+}
diff --git a/src/main/java/de/verdox/mccreativelab/ai/behaviour/MemoryStatus.java b/src/main/java/de/verdox/mccreativelab/ai/behaviour/MemoryStatus.java
new file mode 100644
index 0000000000000000000000000000000000000000..77805bd6bec0ea906f8c94c5cb78c12be72c94a4
--- /dev/null
+++ b/src/main/java/de/verdox/mccreativelab/ai/behaviour/MemoryStatus.java
@@ -0,0 +1,7 @@
+package de.verdox.mccreativelab.ai.behavior;
+
+public enum MemoryStatus {
+    VALUE_PRESENT,
+    VALUE_ABSENT,
+    REGISTERED;
+}
diff --git a/src/main/java/de/verdox/mccreativelab/ai/behaviour/PaperAIBehaviour.java b/src/main/java/de/verdox/mccreativelab/ai/behaviour/PaperAIBehaviour.java
new file mode 100644
index 0000000000000000000000000000000000000000..a90d13c4d1655e5252c2f3241a0129353df2d746
--- /dev/null
+++ b/src/main/java/de/verdox/mccreativelab/ai/behaviour/PaperAIBehaviour.java
@@ -0,0 +1,49 @@
+package de.verdox.mccreativelab.ai.behavior;
+
+import org.bukkit.entity.LivingEntity;
+import org.bukkit.entity.memory.MemoryKey;
+
+import java.util.HashMap;
+import java.util.Map;
+
+public abstract class PaperAIBehaviour<E extends LivingEntity> implements AIBehaviour<E> {
+    private final Class<? extends E> entityType;
+    private final Map<MemoryKey<?>, MemoryStatus> requiredMemoryState;
+    private final int minRunTime;
+    private final int maxRunTime;
+
+    public PaperAIBehaviour(Class<? extends E> entityType, Map<MemoryKey<?>, MemoryStatus> requiredMemoryState, int minRunTime, int maxRunTime){
+        this.entityType = entityType;
+        this.requiredMemoryState = requiredMemoryState;
+        this.minRunTime = minRunTime;
+        this.maxRunTime = maxRunTime;
+    }
+
+    public PaperAIBehaviour(Class<? extends E> entityType, Map<MemoryKey<?>, MemoryStatus> requiredMemoryState) {
+        this(entityType, requiredMemoryState, 60);
+    }
+
+    public PaperAIBehaviour(Class<? extends E> entityType, Map<MemoryKey<?>, MemoryStatus> requiredMemoryState, int runTime) {
+        this(entityType, requiredMemoryState, runTime, runTime);
+    }
+
+    @Override
+    public final int getMinDuration() {
+        return minRunTime;
+    }
+
+    @Override
+    public final int getMaxDuration() {
+        return maxRunTime;
+    }
+
+    @Override
+    public final Map<MemoryKey<?>, MemoryStatus> getRequiredMemoryStates() {
+        return new HashMap<>(requiredMemoryState);
+    }
+
+    @Override
+    public final Class<? extends E> getEntityType() {
+        return entityType;
+    }
+}
diff --git a/src/main/java/de/verdox/mccreativelab/behaviour/BehaviourResult.java b/src/main/java/de/verdox/mccreativelab/behaviour/BehaviourResult.java
new file mode 100644
index 0000000000000000000000000000000000000000..adfef7680d03193d829e8aedf17a97e2d66b56e1
--- /dev/null
+++ b/src/main/java/de/verdox/mccreativelab/behaviour/BehaviourResult.java
@@ -0,0 +1,132 @@
+package de.verdox.mccreativelab.behaviour;
+
+import java.util.function.Supplier;
+
+/**
+ * @param <T> The actual return value of a behaviour that was run.
+ * @param <R> The Result Type
+ */
+public abstract class BehaviourResult<T, R extends Enum<?>> {
+    private final T value;
+    private final R result;
+
+    BehaviourResult(T value, R result) {
+        this.value = value;
+        this.result = result;
+    }
+
+    protected T getValue() {
+        return value;
+    }
+
+    protected R getResult() {
+        return result;
+    }
+
+    protected abstract T evaluateReturnValue(Supplier<T> vanillaLogic);
+    protected abstract boolean replaceVanillaLogic();
+
+    public static class Callback extends BehaviourResult<java.lang.Void, Callback.Type> {
+        public static final Callback DEFAULT_INSTANCE = new Callback();
+
+        Callback() {
+            super(null, Type.NONE);
+        }
+
+        @Override
+        protected java.lang.Void evaluateReturnValue(Supplier<java.lang.Void> vanillaLogic) {
+            return null;
+        }
+
+        @Override
+        protected boolean replaceVanillaLogic() {
+            return false;
+        }
+
+        public enum Type {
+            NONE,
+        }
+    }
+
+    public static class Void extends BehaviourResult<java.lang.Void, Void.Type> {
+        public static final Void DEFAULT_INSTANCE = new Void(Void.Type.USE_VANILLA);
+
+        public Void(Type result) {
+            super(null, result);
+        }
+
+        public boolean replaceVanillaLogic() {
+            return Type.REPLACE_VANILLA.equals(getResult());
+        }
+
+        @Override
+        protected java.lang.Void evaluateReturnValue(Supplier<java.lang.Void> vanillaLogic) {
+            if (!Type.REPLACE_VANILLA.equals(getResult()))
+                return vanillaLogic.get();
+            else
+                return getValue();
+        }
+
+        public enum Type {
+            REPLACE_VANILLA,
+            USE_VANILLA
+        }
+    }
+
+    public static class Bool extends BehaviourResult<Boolean, Bool.Type> {
+        public static final Bool DEFAULT_INSTANCE = new Bool(false, Type.ONLY_VANILLA);
+
+        public Bool(Boolean value, Type result) {
+            super(value, result);
+        }
+
+        @Override
+        protected Boolean evaluateReturnValue(Supplier<Boolean> vanillaLogic) {
+            return switch (getResult()) {
+                case AND -> vanillaLogic.get() && getValue();
+                case OR -> vanillaLogic.get() || getValue();
+                case XOR -> vanillaLogic.get() ^ getValue();
+                case REPLACE_VANILLA -> getValue();
+                case ONLY_VANILLA -> vanillaLogic.get();
+            };
+        }
+
+        @Override
+        protected boolean replaceVanillaLogic() {
+            return Bool.Type.REPLACE_VANILLA.equals(getResult());
+        }
+        public enum Type {
+            AND,
+            OR,
+            XOR,
+            REPLACE_VANILLA,
+            ONLY_VANILLA,
+        }
+    }
+
+    public static class Object<T> extends BehaviourResult<T, Object.Type> {
+        public static final Object DEFAULT_INSTANCE = new Object(null, Type.USE_VANILLA);
+
+        public Object(T value, Type result) {
+            super(value, result);
+        }
+
+        @Override
+        protected T evaluateReturnValue(Supplier<T> vanillaLogic) {
+            return switch (getResult()) {
+                case REPLACE_VANILLA -> getValue();
+                case USE_VANILLA -> vanillaLogic.get();
+            };
+        }
+
+        @Override
+        protected boolean replaceVanillaLogic() {
+            return Object.Type.REPLACE_VANILLA.equals(getResult());
+        }
+
+        public enum Type {
+            REPLACE_VANILLA,
+            USE_VANILLA
+        }
+    }
+}
diff --git a/src/main/java/de/verdox/mccreativelab/behaviour/RandomTickBehaviour.java b/src/main/java/de/verdox/mccreativelab/behaviour/RandomTickBehaviour.java
new file mode 100644
index 0000000000000000000000000000000000000000..28db22a347fdccbfb23aefd8696cd187a9e68c02
--- /dev/null
+++ b/src/main/java/de/verdox/mccreativelab/behaviour/RandomTickBehaviour.java
@@ -0,0 +1,24 @@
+package de.verdox.mccreativelab.behaviour;
+
+import de.verdox.mccreativelab.MultiCustomBehaviour;
+import de.verdox.mccreativelab.random.VanillaRandomSource;
+import org.bukkit.Material;
+import org.bukkit.block.Block;
+import org.bukkit.block.data.BlockData;
+
+@Deprecated
+public interface RandomTickBehaviour {
+    MultiCustomBehaviour<Material, RandomTickBehaviour> RANDOM_TICK_BEHAVIOUR = new MultiCustomBehaviour<>("MCCLab - RandomTickBehaviour");
+    /**
+     * This method is called every time the server software checks whether a particular blockdata is randomly ticking.
+     * @param blockData The Blockdata
+     * @return true if the block is a valid bonemeal target
+     */
+    boolean isRandomlyTicking(BlockData blockData);
+    /**
+     * This method is called every time the server software tries to randomly tick a block.
+     * @param block The randomly ticked block
+     * @param vanillaRandomSource The vanilla random source
+     */
+    void randomTick(Block block, VanillaRandomSource vanillaRandomSource);
+}
diff --git a/src/main/java/de/verdox/mccreativelab/behaviour/randomtick/VanillaBambooSaplingBlock.java b/src/main/java/de/verdox/mccreativelab/behaviour/randomtick/VanillaBambooSaplingBlock.java
new file mode 100644
index 0000000000000000000000000000000000000000..85860c91897a8c37e763c15a3b24ff0fc4806659
--- /dev/null
+++ b/src/main/java/de/verdox/mccreativelab/behaviour/randomtick/VanillaBambooSaplingBlock.java
@@ -0,0 +1,18 @@
+package de.verdox.mccreativelab.behaviour.randomtick;
+
+import de.verdox.mccreativelab.behaviour.RandomTickBehaviour;
+import de.verdox.mccreativelab.random.VanillaRandomSource;
+import org.bukkit.block.Block;
+import org.bukkit.block.data.BlockData;
+
+public class VanillaBambooSaplingBlock implements RandomTickBehaviour {
+    @Override
+    public boolean isRandomlyTicking(BlockData blockData) {
+        return false;
+    }
+
+    @Override
+    public void randomTick(Block block, VanillaRandomSource vanillaRandomSource) {
+
+    }
+}
diff --git a/src/main/java/de/verdox/mccreativelab/behaviour/randomtick/VanillaCropBlockRandomTick.java b/src/main/java/de/verdox/mccreativelab/behaviour/randomtick/VanillaCropBlockRandomTick.java
new file mode 100644
index 0000000000000000000000000000000000000000..73a11f2212bbb1a98d76840fca2bdb38135989a2
--- /dev/null
+++ b/src/main/java/de/verdox/mccreativelab/behaviour/randomtick/VanillaCropBlockRandomTick.java
@@ -0,0 +1,160 @@
+package de.verdox.mccreativelab.behaviour.randomtick;
+
+import de.verdox.mccreativelab.behaviour.RandomTickBehaviour;
+import de.verdox.mccreativelab.random.VanillaRandomSource;
+import org.bukkit.Bukkit;
+import org.bukkit.Location;
+import org.bukkit.Material;
+import org.bukkit.block.Block;
+import org.bukkit.block.BlockFace;
+import org.bukkit.block.BlockState;
+import org.bukkit.block.data.Ageable;
+import org.bukkit.block.data.BlockData;
+import org.bukkit.block.data.type.Farmland;
+import org.bukkit.event.block.BlockGrowEvent;
+
+import java.util.concurrent.ThreadLocalRandom;
+
+public class VanillaCropBlockRandomTick implements RandomTickBehaviour {
+    @Override
+    public void randomTick(Block block, VanillaRandomSource vanillaRandomSource) {
+        var lightLevel = block.getLightLevel();
+        if (lightLevel < 9)
+            return;
+
+        Ageable ageable = (Ageable) block.getBlockData();
+        var age = ageable.getAge();
+
+        if (age < ageable.getMaximumAge()) {
+            float growthSpeed = calculateCropGrowthSpeed(block);
+
+            int modifier;
+            if (block.getType().equals(Material.BEETROOT))
+                modifier = getAndValidateGrowth("Beetroot");
+            else if (block.getType().equals(Material.CARROT))
+                modifier = getAndValidateGrowth("Carrot");
+            else if (block.getType().equals(Material.POTATO))
+                modifier = getAndValidateGrowth("Potato");
+            else if (block.getType().equals(Material.TORCHFLOWER_CROP))
+                modifier = getAndValidateGrowth("TorchFlower");
+            else
+                modifier = getAndValidateGrowth("Wheat");
+
+            var randomNumber = drawRandomNumber();
+
+            if(canGrow(block, growthSpeed, modifier, randomNumber)){
+                ageUpAndCallBlockGrowEvent(block, ageable);
+            }
+        }
+    }
+
+    protected void ageUpAndCallBlockGrowEvent(Block block, Ageable ageable) {
+        var stateSnapshot = block.getState();
+        ageable.setAge(Math.min(ageable.getMaximumAge(), ageable.getAge() + 1));
+        stateSnapshot.setBlockData(ageable);
+        handleBlockGrowEvent(block, stateSnapshot);
+    }
+
+    protected boolean handleBlockGrowEvent(Block block, BlockState newBlockState){
+        BlockGrowEvent event = new BlockGrowEvent(block, newBlockState);
+        Bukkit.getPluginManager().callEvent(event);
+
+        if (!event.isCancelled()) {
+            block.setBlockData(newBlockState.getBlockData());
+        }
+        return !event.isCancelled();
+    }
+
+    protected boolean handleBlockGrowEvent(Block block, BlockData blockData){
+        var blockState = block.getState(true);
+        blockState.setBlockData(blockData);
+        return handleBlockGrowEvent(block, blockState);
+    }
+
+    protected float drawRandomNumber(){
+        return ThreadLocalRandom.current().nextFloat();
+    }
+
+    @Override
+    public boolean isRandomlyTicking(BlockData blockData) {
+        if(!(blockData instanceof Ageable ageable))
+            return false;
+        return ageable.getAge() < ageable.getMaximumAge();
+    }
+
+    protected boolean canGrow(Block block, float growthSpeed, float spigotConfigModifier, float minecraftRandomNumber){
+        return minecraftRandomNumber < (spigotConfigModifier / (100.0f * (Math.floor((25.0F / growthSpeed) + 1))));
+    }
+
+    protected float calculateCropGrowthSpeed(Block block) {
+        float growthSpeed = 1.0F;
+        var pos = block.getLocation();
+        var world = block.getWorld();
+        var farmLandPos = pos.getBlock().getRelative(BlockFace.DOWN).getLocation();
+
+        for (int i = -1; i <= 1; ++i) {
+            for (int j = -1; j <= 1; ++j) {
+                float tempGrowthSpeedValueThisBlock = 0.0F;
+                var blockState = world.getBlockState(farmLandPos.clone().add(i, 0, j));
+
+                if (blockState.getType().equals(Material.FARMLAND)) {
+                    var farmLand = ((Farmland) blockState.getBlockData());
+                    tempGrowthSpeedValueThisBlock = calculateGrowthSpeedValueBasedOnFarmland(farmLand);
+                }
+
+                if (i != 0 || j != 0)
+                    tempGrowthSpeedValueThisBlock /= 4.0F;
+
+
+                growthSpeed += tempGrowthSpeedValueThisBlock;
+            }
+        }
+
+        var northBlockPos = getRelative(pos, BlockFace.NORTH);
+        var southBlockPos = getRelative(pos, BlockFace.SOUTH);
+        var westBlockPos = getRelative(pos, BlockFace.WEST);
+        var eastBlockPos = getRelative(pos, BlockFace.EAST);
+        boolean westOrEastSameCrop = isSameCrop(block, westBlockPos) || isSameCrop(block, eastBlockPos);
+        boolean northOrWestSameCrop = isSameCrop(block, northBlockPos) || isSameCrop(block, southBlockPos);
+
+        if (westOrEastSameCrop && northOrWestSameCrop)
+            growthSpeed /= 2.0F;
+        else {
+            boolean sameCropDiagonal =
+                isSameCrop(block, getRelative(westBlockPos, BlockFace.NORTH))
+                    || isSameCrop(block, getRelative(eastBlockPos, BlockFace.NORTH))
+                    || isSameCrop(block, getRelative(eastBlockPos, BlockFace.SOUTH))
+                    || isSameCrop(block, getRelative(westBlockPos, BlockFace.SOUTH));
+
+            if (sameCropDiagonal)
+                growthSpeed /= 2.0F;
+        }
+
+        return growthSpeed;
+    }
+
+    protected float calculateGrowthSpeedValueBasedOnFarmland(Farmland farmLand) {
+        float tempGrowthSpeedValueThisBlock;
+        tempGrowthSpeedValueThisBlock = 1.0F;
+        if (farmLand.getMoisture() > 0) {
+            tempGrowthSpeedValueThisBlock = 3.0F;
+        }
+        return tempGrowthSpeedValueThisBlock;
+    }
+
+    protected final Location getRelative(Location location, BlockFace face) {
+        return location.getBlock().getRelative(face).getLocation();
+    }
+
+    protected final int getAndValidateGrowth(String crop) {
+        var config = Bukkit.spigot().getSpigotConfig();
+        int modifier = config.getInt("growth." + crop.toLowerCase(java.util.Locale.ENGLISH) + "-modifier", 100);
+        if (modifier == 0)
+            modifier = 100;
+        return modifier;
+    }
+
+    protected boolean isSameCrop(Block block, Location relativePos) {
+        return block.getWorld().getBlockState(relativePos).getType().equals(block.getType());
+    }
+}
diff --git a/src/main/java/de/verdox/mccreativelab/behaviour/randomtick/VanillaFarmBlockTickBehaviour.java b/src/main/java/de/verdox/mccreativelab/behaviour/randomtick/VanillaFarmBlockTickBehaviour.java
new file mode 100644
index 0000000000000000000000000000000000000000..3e02cb17beeb341d99ba79ed61f71272fc41cc28
--- /dev/null
+++ b/src/main/java/de/verdox/mccreativelab/behaviour/randomtick/VanillaFarmBlockTickBehaviour.java
@@ -0,0 +1,103 @@
+package de.verdox.mccreativelab.behaviour.randomtick;
+
+import de.verdox.mccreativelab.behaviour.RandomTickBehaviour;
+import de.verdox.mccreativelab.random.VanillaRandomSource;
+import org.bukkit.Bukkit;
+import org.bukkit.GameEvent;
+import org.bukkit.Material;
+import org.bukkit.Tag;
+import org.bukkit.block.Block;
+import org.bukkit.block.BlockState;
+import org.bukkit.block.data.BlockData;
+import org.bukkit.block.data.type.Farmland;
+import org.bukkit.event.block.BlockFadeEvent;
+import org.bukkit.event.block.MoistureChangeEvent;
+import org.bukkit.util.BlockVector;
+
+public class VanillaFarmBlockTickBehaviour implements RandomTickBehaviour {
+    private static int FARMLAND_WATER_RADIUS = 4;
+
+    @Override
+    public void randomTick(Block block, VanillaRandomSource vanillaRandomSource) {
+        Farmland farmlandData = (Farmland) block.getBlockData();
+        int moisture = farmlandData.getMoisture();
+
+        if (isNearWater(block, FARMLAND_WATER_RADIUS) || block.getWorld()
+                                                              .isRainingAt(above(block).getLocation())) {
+            if (moisture >= 7)
+                return;
+            handleMoistureChangeEvent(block, 7);
+            return;
+        }
+
+        if (moisture > 0)
+            handleMoistureChangeEvent(block, moisture - 1);
+        else if (!shouldMaintainFarmland(block))
+            turnToDirt(block);
+    }
+
+    @Override
+    public boolean isRandomlyTicking(BlockData blockData) {
+        return true;
+    }
+
+    private static boolean shouldMaintainFarmland(Block block) {
+        return Tag.MAINTAINS_FARMLAND.isTagged(above(block).getType());
+    }
+
+    private static Block above(Block block) {
+        return block.getRelative(0, 1, 0);
+    }
+
+    private static boolean isNearWater(Block block, int horizontalRadius) {
+        int xOff = block.getX();
+        int yOff = block.getY();
+        int zOff = block.getZ();
+
+        for (int dz = -horizontalRadius; dz <= horizontalRadius; ++dz) {
+            int z = dz + zOff;
+            for (int dx = -horizontalRadius; dx <= horizontalRadius; ++dx) {
+                int x = xOff + dx;
+                for (int dy = 0; dy <= 1; ++dy) {
+                    int y = dy + yOff;
+                    Block nearBlock = block.getWorld().getBlockAt(x, y, z);
+                    if (nearBlock.getType().equals(Material.WATER))
+                        return true;
+                }
+            }
+        }
+
+        return false;
+    }
+
+    private static boolean handleMoistureChangeEvent(Block block, int newMoistureLevel) {
+        Farmland farmland = (Farmland) block.getBlockData();
+        if (newMoistureLevel == farmland.getMoisture() || newMoistureLevel > farmland.getMaximumMoisture())
+            return false;
+
+        farmland.setMoisture(newMoistureLevel);
+        var newState = block.getState();
+        newState.setBlockData(farmland);
+
+        MoistureChangeEvent event = new MoistureChangeEvent(block, newState);
+        Bukkit.getPluginManager().callEvent(event);
+
+        if (!event.isCancelled()) {
+            block.setBlockData(newState.getBlockData());
+        }
+        return !event.isCancelled();
+    }
+
+    private static void turnToDirt(Block block){
+        BlockState newState = block.getState();
+        newState.setType(Material.DIRT);
+
+        BlockFadeEvent event = new BlockFadeEvent(block, newState);
+        Bukkit.getPluginManager().callEvent(event);
+        if(event.isCancelled())
+            return;
+
+        block.setType(Material.DIRT, true);
+        block.getWorld().sendGameEvent(null, GameEvent.BLOCK_CHANGE, new BlockVector(block.getX(), block.getY(), block.getZ()));
+    }
+}
diff --git a/src/main/java/de/verdox/mccreativelab/behaviour/randomtick/VanillaSaplingBlockBehaviour.java b/src/main/java/de/verdox/mccreativelab/behaviour/randomtick/VanillaSaplingBlockBehaviour.java
new file mode 100644
index 0000000000000000000000000000000000000000..9c9175bf3fdbd9893c29ecfab5ea31e2f247f1fb
--- /dev/null
+++ b/src/main/java/de/verdox/mccreativelab/behaviour/randomtick/VanillaSaplingBlockBehaviour.java
@@ -0,0 +1,28 @@
+package de.verdox.mccreativelab.behaviour.randomtick;
+
+import de.verdox.mccreativelab.random.VanillaRandomSource;
+import org.bukkit.block.Block;
+import org.bukkit.block.data.BlockData;
+import org.bukkit.block.data.type.Sapling;
+
+public class VanillaSaplingBlockBehaviour extends VanillaCropBlockRandomTick {
+    @Override
+    public void randomTick(Block block, VanillaRandomSource vanillaRandomSource) {
+        if(block.getLightLevel() >= 9 && drawRandomNumber() < (getAndValidateGrowth("Sapling") / (100.0f * 7))){
+            var sapling = (Sapling) block.getBlockData();
+            var stage = sapling.getStage();
+            if(stage == 0){
+                sapling.setStage(1);
+                handleBlockGrowEvent(block, sapling);
+            }
+            else {
+                block.getWorld().growTreeIfSapling(block.getLocation());
+            }
+        }
+    }
+
+    @Override
+    public boolean isRandomlyTicking(BlockData blockData) {
+        return true;
+    }
+}
diff --git a/src/main/java/de/verdox/mccreativelab/behaviour/randomtick/VanillaStemBlockBehaviour.java b/src/main/java/de/verdox/mccreativelab/behaviour/randomtick/VanillaStemBlockBehaviour.java
new file mode 100644
index 0000000000000000000000000000000000000000..448eecfb9cbfa8db18d20a1333705f19e345c018
--- /dev/null
+++ b/src/main/java/de/verdox/mccreativelab/behaviour/randomtick/VanillaStemBlockBehaviour.java
@@ -0,0 +1,71 @@
+package de.verdox.mccreativelab.behaviour.randomtick;
+
+import de.verdox.mccreativelab.random.VanillaRandomSource;
+import org.bukkit.Bukkit;
+import org.bukkit.Material;
+import org.bukkit.block.Block;
+import org.bukkit.block.BlockFace;
+import org.bukkit.block.data.Ageable;
+import org.bukkit.block.data.BlockData;
+import org.bukkit.block.data.Directional;
+
+import java.util.concurrent.ThreadLocalRandom;
+
+public class VanillaStemBlockBehaviour extends VanillaCropBlockRandomTick {
+    public static BlockFace[] HORIZONTAL_PLANE = new BlockFace[]{BlockFace.NORTH, BlockFace.SOUTH, BlockFace.EAST, BlockFace.WEST};
+
+    @Override
+    public void randomTick(Block block, VanillaRandomSource vanillaRandomSource) {
+        var lightLevel = block.getLightLevel();
+        if (lightLevel < 9)
+            return;
+
+        float growthSpeed = calculateCropGrowthSpeed(block);
+        var randomNumber = drawRandomNumber();
+
+        int modifier;
+        Material fruit;
+        Material attachedStem;
+        if (block.getType().equals(Material.PUMPKIN_STEM)) {
+            modifier = getAndValidateGrowth("Pumpkin");
+            fruit = Material.PUMPKIN;
+            attachedStem = Material.ATTACHED_PUMPKIN_STEM;
+        }
+        else {
+            modifier = getAndValidateGrowth("Melon");
+            fruit = Material.MELON;
+            attachedStem = Material.ATTACHED_MELON_STEM;
+        }
+
+        if (randomNumber >= (modifier) / (100.0f * (Math.floor((25.0F / growthSpeed) + 1))))
+            return;
+
+        var ageable = (Ageable) block.getBlockData();
+        var age = ageable.getAge();
+        var maxAge = ageable.getMaximumAge();
+
+        if (age < maxAge) {
+            ageUpAndCallBlockGrowEvent(block, ageable);
+            return;
+        }
+        var randomBlockFace = HORIZONTAL_PLANE[ThreadLocalRandom.current().nextInt(HORIZONTAL_PLANE.length)];
+        var relativeBlockPos = getRelative(block.getLocation(), randomBlockFace);
+        var relativeBlock = relativeBlockPos.getBlock();
+        var belowRelativPos = relativeBlock.getRelative(0, -1, 0);
+
+        if (belowRelativPos.getType().isAir() && (relativeBlock.getType().equals(Material.FARMLAND) || relativeBlock
+            .getType().equals(Material.DIRT))) {
+
+            if(!handleBlockGrowEvent(relativeBlock, Bukkit.createBlockData(fruit)))
+                return;
+
+            var stemBlockData = Bukkit.createBlockData(attachedStem, blockData -> ((Directional) blockData).setFacing(randomBlockFace));
+            block.setBlockData(stemBlockData, true);
+        }
+    }
+
+    @Override
+    public boolean isRandomlyTicking(BlockData blockData) {
+        return true;
+    }
+}
diff --git a/src/main/java/de/verdox/mccreativelab/behaviour/randomtick/VanillaSugarCaneBlockBehaviour.java b/src/main/java/de/verdox/mccreativelab/behaviour/randomtick/VanillaSugarCaneBlockBehaviour.java
new file mode 100644
index 0000000000000000000000000000000000000000..a7615978914b2d9f306cebd54207a06c5b85a7f6
--- /dev/null
+++ b/src/main/java/de/verdox/mccreativelab/behaviour/randomtick/VanillaSugarCaneBlockBehaviour.java
@@ -0,0 +1,42 @@
+package de.verdox.mccreativelab.behaviour.randomtick;
+
+import de.verdox.mccreativelab.random.VanillaRandomSource;
+import org.bukkit.Bukkit;
+import org.bukkit.Material;
+import org.bukkit.block.Block;
+import org.bukkit.block.data.Ageable;
+import org.bukkit.block.data.BlockData;
+
+public class VanillaSugarCaneBlockBehaviour extends VanillaCropBlockRandomTick {
+    @Override
+    public void randomTick(Block block, VanillaRandomSource vanillaRandomSource) {
+        if (!block.getRelative(0, 1, 0).getType().isAir())
+            return;
+        var heightCounter = 0;
+        for(heightCounter = 1; block.getRelative(0, heightCounter,0).getType().equals(Material.SUGAR_CANE); heightCounter++){
+            ;
+        }
+        var modifier = getAndValidateGrowth("Cane");
+        var ageable = (Ageable) block.getBlockData();
+        var age = ageable.getAge();
+        var maxAge = ageable.getMaximumAge();
+
+        if(heightCounter < 3){
+
+            if(age >= 15 || (modifier != 100 && drawRandomNumber() < (modifier / (100f * 16)))){
+                handleBlockGrowEvent(block.getRelative(0,1,0), Bukkit.createBlockData(Material.SUGAR_CANE));
+                ageable.setAge(0);
+                block.setBlockData(ageable);
+            }
+            else if(modifier == 100 || drawRandomNumber() < (modifier / (100.0f * 16))){
+                ageable.setAge(Math.min(maxAge, ageable.getAge() + 1));
+                block.setBlockData(ageable);
+            }
+        }
+    }
+
+    @Override
+    public boolean isRandomlyTicking(BlockData blockData) {
+        return true;
+    }
+}
diff --git a/src/main/java/org/bukkit/EntityActivity.java b/src/main/java/org/bukkit/EntityActivity.java
new file mode 100644
index 0000000000000000000000000000000000000000..b92f17064ddfadc7c74caffd6545d0cb11cf528e
--- /dev/null
+++ b/src/main/java/org/bukkit/EntityActivity.java
@@ -0,0 +1,46 @@
+package org.bukkit;
+
+import com.google.common.base.Preconditions;
+import org.jetbrains.annotations.NotNull;
+
+public interface EntityActivity extends Keyed {
+    EntityActivity CORE = getActivity("core");
+    EntityActivity IDLE = getActivity("idle");
+    EntityActivity WORK = getActivity("work");
+    EntityActivity PLAY = getActivity("play");
+    EntityActivity REST = getActivity("rest");
+    EntityActivity MEET = getActivity("meet");
+    EntityActivity PANIC = getActivity("panic");
+    EntityActivity RAID = getActivity("raid");
+    EntityActivity PRE_RAID = getActivity("pre_raid");
+    EntityActivity HIDE = getActivity("hide");
+    EntityActivity FIGHT = getActivity("fight");
+    EntityActivity CELEBRATE = getActivity("celebrate");
+    EntityActivity ADMIRE_ITEM = getActivity("admire_item");
+    EntityActivity AVOID = getActivity("avoid");
+    EntityActivity RIDE = getActivity("ride");
+    EntityActivity PLAY_DEAD = getActivity("play_dead");
+    EntityActivity LONG_JUMP = getActivity("long_jump");
+    EntityActivity RAM = getActivity("ram");
+    EntityActivity TONGUE = getActivity("tongue");
+    EntityActivity SWIM = getActivity("swim");
+    EntityActivity LAY_SPAWN = getActivity("lay_spawn");
+    EntityActivity SNIFF = getActivity("sniff");
+    EntityActivity INVESTIGATE = getActivity("investigate");
+    EntityActivity ROAR = getActivity("roar");
+    EntityActivity EMERGE = getActivity("emerge");
+    EntityActivity DIG = getActivity("dig");
+
+    @NotNull
+    static EntityActivity getActivity(@NotNull NamespacedKey namespacedKey) {
+        EntityActivity entityActivity = Registry.ENTITY_ACTIVITY.get(namespacedKey);
+        Preconditions.checkNotNull(entityActivity, "No EntityActivity found for %s", namespacedKey);
+        return entityActivity;
+    }
+
+    @NotNull
+    static EntityActivity getActivity(@NotNull String key) {
+        return getActivity(NamespacedKey.minecraft(key));
+    }
+    
+}
diff --git a/src/main/java/org/bukkit/EntitySchedule.java b/src/main/java/org/bukkit/EntitySchedule.java
new file mode 100644
index 0000000000000000000000000000000000000000..7f13fb04cd2749ca7ee416dd36abf9fc431b643a
--- /dev/null
+++ b/src/main/java/org/bukkit/EntitySchedule.java
@@ -0,0 +1,24 @@
+package org.bukkit;
+
+import com.google.common.base.Preconditions;
+import org.jetbrains.annotations.NotNull;
+
+public interface EntitySchedule extends Keyed {
+
+    EntitySchedule EMPTY = getSchedule("empty");
+    EntitySchedule SIMPLE = getSchedule("simple");
+    EntitySchedule VILLAGER_BABY = getSchedule("villager_baby");
+    EntitySchedule VILLAGER_DEFAULT = getSchedule("villager_default");
+
+    @NotNull
+    static EntitySchedule getSchedule(@NotNull NamespacedKey namespacedKey) {
+        EntitySchedule entitySchedule = Registry.ENTITY_SCHEDULE.get(namespacedKey);
+        Preconditions.checkNotNull(entitySchedule, "No EntitySchedule found for %s", namespacedKey);
+        return entitySchedule;
+    }
+
+    @NotNull
+    static EntitySchedule getSchedule(@NotNull String key) {
+        return getSchedule(NamespacedKey.minecraft(key));
+    }
+}
diff --git a/src/main/java/org/bukkit/Registry.java b/src/main/java/org/bukkit/Registry.java
index 6077122e4be10a4915e0c1023cc1fc418341545a..d0f9f119f3fffb67d9dcdd517b06da5bdb9a2488 100644
--- a/src/main/java/org/bukkit/Registry.java
+++ b/src/main/java/org/bukkit/Registry.java
@@ -131,12 +131,25 @@ public interface Registry<T extends Keyed> extends Iterable<T> {
             return Arrays.asList(Enchantment.values()).iterator();
         }
     };
+    /**
+     * Entity Activities.
+     *
+     * @see EntityActivity
+     */
+    Registry<EntityActivity> ENTITY_ACTIVITY = Objects.requireNonNull(Bukkit.getRegistry(EntityActivity.class), "No registry present for EntityActivity. This is a bug.");
     /**
      * Server entity types.
      *
      * @see EntityType
      */
     Registry<EntityType> ENTITY_TYPE = new SimpleRegistry<>(EntityType.class, (entity) -> entity != EntityType.UNKNOWN);
+    /**
+     * Entity Schedules.
+     *
+     * @see EntitySchedule
+     */
+    Registry<EntitySchedule> ENTITY_SCHEDULE = Objects.requireNonNull(Bukkit.getRegistry(EntitySchedule.class), "No registry present for EntitySchedule. This is a bug.");
+
     /**
      * Server instruments.
      *
diff --git a/src/main/java/org/bukkit/entity/LivingEntity.java b/src/main/java/org/bukkit/entity/LivingEntity.java
index 19e58e62ae442ef9be02ca7fa2f55e370a54afa4..ee2e219bea941fb283fe0c9dcb4ef9e22f540eaa 100644
--- a/src/main/java/org/bukkit/entity/LivingEntity.java
+++ b/src/main/java/org/bukkit/entity/LivingEntity.java
@@ -863,6 +863,14 @@ public interface LivingEntity extends Attributable, Damageable, ProjectileSource
      */
     <T> void setMemory(@NotNull MemoryKey<T> memoryKey, @Nullable T memoryValue);
 
+    // MCCLab start - Adding EntityBrain
+    /**
+     * Gets the brain of this entity
+     * @return The brain
+     */
+    <T extends LivingEntity> de.verdox.mccreativelab.ai.EntityBrain<T> getBrain(Class<? extends T> type);
+    //MCCLab end - Adding EntityBrain
+
     /**
      * Get the {@link Sound} this entity will make when damaged.
      *
