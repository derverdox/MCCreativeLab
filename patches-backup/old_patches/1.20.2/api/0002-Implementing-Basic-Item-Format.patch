From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: derverdox <mail.ysp@web.de>
Date: Sun, 3 Dec 2023 14:20:31 +0100
Subject: [PATCH] Implementing Basic Item Format


diff --git a/src/main/java/de/verdox/itemformat/BasicItemFormat.java b/src/main/java/de/verdox/itemformat/BasicItemFormat.java
new file mode 100644
index 0000000000000000000000000000000000000000..b5ea3d281bc9fb47b4d22cb3301d8f8b8a4439ad
--- /dev/null
+++ b/src/main/java/de/verdox/itemformat/BasicItemFormat.java
@@ -0,0 +1,50 @@
+package de.verdox.itemformat;
+
+import org.bukkit.NamespacedKey;
+import org.bukkit.inventory.ItemStack;
+import org.bukkit.persistence.PersistentDataType;
+import org.jetbrains.annotations.NotNull;
+import java.util.Objects;
+import java.util.concurrent.ThreadLocalRandom;
+
+@FunctionalInterface
+public interface BasicItemFormat {
+    BasicItemFormat BASIC_FORMAT = stack -> {};
+    void applyItemFormat(ItemStack stack);
+    static ItemStack applyItemFormatAndReturn(ItemStack stack){
+        return applyItemFormatAndReturn(stack, BASIC_FORMAT);
+    }
+
+    static ItemStack applyItemFormatAndReturn(@NotNull ItemStack stack, @NotNull BasicItemFormat basicItemFormat) {
+        Objects.requireNonNull(stack);
+        Objects.requireNonNull(basicItemFormat);
+        if(needsConversion(stack)){
+            basicItemFormat.applyItemFormat(stack);
+            applyConversionTag(stack);
+        }
+        return stack;
+    }
+
+    static ItemStack forceItemFormat(@NotNull ItemStack stack, @NotNull BasicItemFormat basicItemFormat){
+        Objects.requireNonNull(stack);
+        Objects.requireNonNull(basicItemFormat);
+        basicItemFormat.applyItemFormat(stack);
+        return stack;
+    }
+
+    String randomSessionID = Integer.toHexString(ThreadLocalRandom.current().nextInt(1000000));
+    NamespacedKey sessionIDKey = new NamespacedKey("mcclab","session_id");
+    static boolean needsConversion(ItemStack stack){
+        if(stack == null || stack.isEmpty())
+            return false;
+        if(!stack.hasItemMeta())
+            return true;
+        if(!stack.getItemMeta().getPersistentDataContainer().has(sessionIDKey))
+            return true;
+        var storedID = stack.getItemMeta().getPersistentDataContainer().get(sessionIDKey, PersistentDataType.STRING);
+        return !randomSessionID.equals(storedID);
+    }
+    static void applyConversionTag(ItemStack stack){
+        stack.editMeta(meta -> meta.getPersistentDataContainer().set(sessionIDKey, PersistentDataType.STRING, randomSessionID));
+    }
+}
diff --git a/src/main/java/org/bukkit/inventory/ItemStack.java b/src/main/java/org/bukkit/inventory/ItemStack.java
index 0af73cc04edb93b9772136d4d808f657ea40e733..59000030c37b54330b64b334c82c1939fb94f00a 100644
--- a/src/main/java/org/bukkit/inventory/ItemStack.java
+++ b/src/main/java/org/bukkit/inventory/ItemStack.java
@@ -92,6 +92,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, Translat
         if (data != null) {
             createData(data);
         }
+        de.verdox.itemformat.BasicItemFormat.applyItemFormatAndReturn(this);
     }
 
     /**
@@ -111,6 +112,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, Translat
         if (stack.hasItemMeta()) {
             setItemMeta0(stack.getItemMeta(), type);
         }
+        de.verdox.itemformat.BasicItemFormat.applyItemFormatAndReturn(this);
     }
 
     /**
