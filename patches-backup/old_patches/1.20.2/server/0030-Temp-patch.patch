From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: derverdox <mail.ysp@web.de>
Date: Tue, 9 Jan 2024 16:37:59 +0100
Subject: [PATCH] Temp patch


diff --git a/src/main/java/de/verdox/mccreativelab/ai/CraftEntityBrain.java b/src/main/java/de/verdox/mccreativelab/ai/CraftEntityBrain.java
new file mode 100644
index 0000000000000000000000000000000000000000..8453178c84536b63c56af0b958046a5835a8f18a
--- /dev/null
+++ b/src/main/java/de/verdox/mccreativelab/ai/CraftEntityBrain.java
@@ -0,0 +1,211 @@
+package de.verdox.mccreativelab.ai;
+
+import com.google.common.collect.ImmutableList;
+import de.verdox.mccreativelab.ai.behavior.CustomAIBehavior;
+import de.verdox.mccreativelab.ai.MemoryStatus;
+import de.verdox.mccreativelab.ai.behavior.PaperCustomAIBehavior;
+import net.minecraft.core.registries.Registries;
+import net.minecraft.world.entity.ai.Brain;
+import net.minecraft.world.entity.ai.behavior.BehaviorControl;
+import net.minecraft.world.entity.ai.memory.MemoryModuleType;
+import net.minecraft.world.entity.schedule.Activity;
+import org.bukkit.EntityActivity;
+import org.bukkit.EntitySchedule;
+import org.bukkit.Registry;
+import org.bukkit.World;
+import org.bukkit.craftbukkit.CraftEntityActivity;
+import org.bukkit.craftbukkit.CraftEntitySchedule;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.craftbukkit.entity.CraftLivingEntity;
+import org.bukkit.craftbukkit.entity.memory.CraftMemoryKey;
+import org.bukkit.craftbukkit.entity.memory.CraftMemoryMapper;
+import org.bukkit.entity.LivingEntity;
+import org.bukkit.entity.memory.MemoryKey;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.*;
+import java.util.function.Consumer;
+import java.util.stream.Collectors;
+
+public class CraftEntityBrain<E extends LivingEntity> implements EntityBrain<E> {
+    private final Brain<net.minecraft.world.entity.LivingEntity> entityBrain;
+
+    public CraftEntityBrain(Brain<net.minecraft.world.entity.LivingEntity> brain) {
+        this.entityBrain = brain;
+    }
+
+    @Override
+    public <U> void eraseMemory(MemoryKey<U> memoryKey) {
+        this.entityBrain.eraseMemory(CraftMemoryKey.bukkitToMinecraft(memoryKey));
+    }
+
+    @Override
+    public <U> void setMemory(MemoryKey<U> type, @Nullable U value) {
+        this.entityBrain.setMemory(CraftMemoryKey.bukkitToMinecraft(type), CraftMemoryMapper.toNms(value));
+    }
+
+    @Override
+    public <U> void setMemoryWithExpiry(MemoryKey<U> type, U value, long expiry) {
+        this.entityBrain.setMemoryWithExpiry(CraftMemoryKey.bukkitToMinecraft(type), CraftMemoryMapper.toNms(value), expiry);
+    }
+
+    @Override
+    public <U> Optional<U> getMemory(MemoryKey<U> type) {
+        var nmsOptional = this.entityBrain.getMemory(CraftMemoryKey.bukkitToMinecraft(type));
+        if (nmsOptional.isEmpty())
+            return Optional.empty();
+        Object nmsValue = nmsOptional.get();
+        return (Optional<U>) Optional.of(CraftMemoryMapper.fromNms(nmsValue));
+    }
+
+    @Override
+    public <U> long getTimeUntilExpiry(MemoryKey<U> type) {
+        return this.entityBrain.getTimeUntilExpiry(CraftMemoryKey.bukkitToMinecraft(type));
+    }
+
+    @Override
+    public <U> boolean isMemoryValue(MemoryKey<U> type, U value) {
+        return this.entityBrain.isMemoryValue(CraftMemoryKey.bukkitToMinecraft(type), CraftMemoryMapper.toNms(value));
+    }
+
+    @Override
+    public boolean checkMemory(MemoryKey<?> type, MemoryStatus state) {
+        return this.entityBrain.checkMemory(CraftMemoryKey.bukkitToMinecraft(type), toNMS(state));
+    }
+
+    @Override
+    public EntitySchedule getSchedule() {
+        return CraftEntitySchedule.minecraftToBukkit(this.entityBrain.getSchedule(), Registries.SCHEDULE, Registry.ENTITY_SCHEDULE);
+    }
+
+    @Override
+    public void setSchedule(EntitySchedule schedule) {
+        this.entityBrain.setSchedule(CraftEntitySchedule.bukkitToMinecraft(schedule, Registries.SCHEDULE));
+    }
+
+    @Override
+    public void setCoreActivities(Set<EntityActivity> coreActivities) {
+        this.entityBrain.setCoreActivities(coreActivities.stream()
+                                                         .map(entityActivity -> CraftEntityActivity.bukkitToMinecraft(entityActivity, Registries.ACTIVITY))
+                                                         .collect(Collectors.toSet()));
+    }
+
+    @Override
+    public void useDefaultActivity() {
+        this.entityBrain.useDefaultActivity();
+    }
+
+    @Override
+    public Optional<EntityActivity> getActiveNonCoreActivity() {
+        Optional<Activity> nmsActivityOptional = this.entityBrain.getActiveNonCoreActivity();
+        return nmsActivityOptional.map(activity -> CraftEntityActivity.minecraftToBukkit(activity, Registries.ACTIVITY, Registry.ENTITY_ACTIVITY));
+
+    }
+
+    @Override
+    public void setActiveActivityIfPossible(EntityActivity activity) {
+        this.entityBrain.setActiveActivityIfPossible(CraftEntityActivity.bukkitToMinecraft(activity, Registries.ACTIVITY));
+    }
+
+    @Override
+    public void updateActivityFromSchedule(long timeOfDay, long time) {
+        this.entityBrain.updateActivityFromSchedule(timeOfDay, time);
+    }
+
+    @Override
+    public void setActiveActivityToFirstValid(List<EntityActivity> activities) {
+        List<Activity> nmsActivities = activities.stream()
+                                                 .map(entityActivity -> CraftEntityActivity.bukkitToMinecraft(entityActivity, Registries.ACTIVITY))
+                                                 .collect(Collectors.toList());
+        this.entityBrain.setActiveActivityToFirstValid(nmsActivities);
+    }
+
+    @Override
+    public void setDefaultActivity(EntityActivity activity) {
+        this.entityBrain.setDefaultActivity(CraftEntityActivity.bukkitToMinecraft(activity, Registries.ACTIVITY));
+    }
+
+    @Override
+    public void addActivity(EntityBrain.ActivityBuilder<E> activityBuilder) {
+        if(activityBuilder instanceof CraftActivityBuilder<E> craftActivityBuilder)
+            craftActivityBuilder.addToBrain(this.entityBrain);
+    }
+
+    @Override
+    public void addActivity(EntityActivity activity, Consumer<EntityBrain.ActivityBuilder<E>> activityBuilder) {
+        CraftActivityBuilder<E> craftActivityBuilder1 = new CraftActivityBuilder<>(activity);
+        activityBuilder.accept(craftActivityBuilder1);
+        addActivity(craftActivityBuilder1);
+    }
+
+    @Override
+    public boolean isActive(EntityActivity activity) {
+        return this.entityBrain.isActive(CraftEntityActivity.bukkitToMinecraft(activity, Registries.ACTIVITY));
+    }
+
+    @Override
+    public EntityBrain<E> copyWithoutBehaviours() {
+        return new CraftEntityBrain<>(this.entityBrain.copyWithoutBehaviors());
+    }
+
+    @Override
+    public void stopAll(World world, E entity) {
+        this.entityBrain.stopAll(((CraftWorld) world).getHandle(), ((CraftLivingEntity) entity).getHandle());
+    }
+
+    @Override
+    public EntityBrain.ActivityBuilder<E> createActivityBuilder(EntityActivity entityActivity) {
+        return new CraftActivityBuilder<>(entityActivity);
+    }
+
+    private static net.minecraft.world.entity.ai.memory.MemoryStatus toNMS(MemoryStatus memoryStatus) {
+        return switch (memoryStatus) {
+            case VALUE_PRESENT -> net.minecraft.world.entity.ai.memory.MemoryStatus.VALUE_PRESENT;
+            case VALUE_ABSENT -> net.minecraft.world.entity.ai.memory.MemoryStatus.VALUE_ABSENT;
+            case REGISTERED -> net.minecraft.world.entity.ai.memory.MemoryStatus.REGISTERED;
+        };
+    }
+
+    private static MemoryStatus toBukkit(net.minecraft.world.entity.ai.memory.MemoryStatus memoryStatus) {
+        return switch (memoryStatus) {
+            case VALUE_PRESENT -> MemoryStatus.VALUE_PRESENT;
+            case VALUE_ABSENT -> MemoryStatus.VALUE_ABSENT;
+            case REGISTERED -> MemoryStatus.REGISTERED;
+        };
+    }
+
+    private static class CraftActivityBuilder<E extends LivingEntity> implements EntityBrain.ActivityBuilder<E> {
+        private final Activity activity;
+        private final List<com.mojang.datafixers.util.Pair<Integer, BehaviorControl<net.minecraft.world.entity.LivingEntity>>> behaviours = new LinkedList<>();
+        private final Set<com.mojang.datafixers.util.Pair<MemoryModuleType<?>, net.minecraft.world.entity.ai.memory.MemoryStatus>> requiredMemories = new HashSet<>();
+        private final Set<MemoryModuleType<?>> forgettingMemories = new HashSet<>();
+
+        private CraftActivityBuilder(EntityActivity activity) {
+            this.activity = CraftEntityActivity.bukkitToMinecraft(activity, Registries.ACTIVITY);
+        }
+
+        public CraftActivityBuilder<E> withBehaviour(int priority, AIBehaviour<E> customAiBehavior) {
+            this.behaviours.add(com.mojang.datafixers.util.Pair.of(priority, new WrappedPaperAIBehaviour<>(customAiBehavior)));
+            return this;
+        }
+
+        @Override
+        public ActivityBuilder<E> withBehaviour(int priority, PaperAIBehaviour<E> customAiBehavior) {
+            return null;
+        }
+
+        public CraftActivityBuilder<E> withRequiredMemory(MemoryKey<?> requiredMemoryKey, MemoryStatus memoryStatus) {
+            requiredMemories.add(com.mojang.datafixers.util.Pair.of(CraftMemoryKey.bukkitToMinecraft(requiredMemoryKey), toNMS(memoryStatus)));
+            return this;
+        }
+
+        public CraftActivityBuilder<E> withForgettingMemoriesWhenStopped(MemoryKey<?> forgettingMemoryKey) {
+            forgettingMemories.add(CraftMemoryKey.bukkitToMinecraft(forgettingMemoryKey));
+            return this;
+        }
+
+        public void addToBrain(Brain<?> brain) {
+            brain.addActivityAndRemoveMemoriesWhenStopped(activity, ImmutableList.copyOf(behaviours), requiredMemories, forgettingMemories);
+        }
+    }
+}
diff --git a/src/main/java/de/verdox/mccreativelab/ai/WrappedPaperAIBehaviour.java b/src/main/java/de/verdox/mccreativelab/ai/WrappedPaperAIBehaviour.java
new file mode 100644
index 0000000000000000000000000000000000000000..339a40f407f913a089123cb8da8350741a2dcd23
--- /dev/null
+++ b/src/main/java/de/verdox/mccreativelab/ai/WrappedPaperAIBehaviour.java
@@ -0,0 +1,82 @@
+package de.verdox.mccreativelab.ai;
+
+import de.verdox.mccreativelab.ai.behavior.CustomAIBehavior;
+import de.verdox.mccreativelab.ai.behavior.PaperCustomAIBehavior;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.world.entity.LivingEntity;
+import net.minecraft.world.entity.ai.behavior.Behavior;
+import net.minecraft.world.entity.ai.memory.MemoryModuleType;
+import net.minecraft.world.entity.ai.memory.MemoryStatus;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.entity.memory.CraftMemoryKey;
+import org.bukkit.entity.memory.MemoryKey;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.HashMap;
+import java.util.Map;
+
+public class WrappedPaperAIBehaviour<T extends org.bukkit.entity.LivingEntity> extends Behavior<LivingEntity> {
+    private final AIBehaviour<T> paperCustomAIBehaviour;
+
+    public WrappedPaperAIBehaviour(AIBehaviour<T> paperCustomAIBehaviour) {
+        super(getNMSRequiredMemoryState(paperCustomAIBehaviour.getRequiredMemoryStates()), paperCustomAIBehaviour.getMinDuration(), paperCustomAIBehaviour.getMaxDuration());
+        this.paperCustomAIBehaviour = paperCustomAIBehaviour;
+    }
+
+    @Override
+    protected boolean checkExtraStartConditions(@NotNull ServerLevel world, @NotNull LivingEntity entity) {
+        if (!isRightEntityType(entity))
+            return false;
+        org.bukkit.entity.LivingEntity livingEntity = entity.getBukkitLivingEntity();
+        return paperCustomAIBehaviour.checkExtraStartConditions(world.getWorld(), paperCustomAIBehaviour.getEntityType().cast(livingEntity), Bukkit.getCurrentTick());
+    }
+
+    @Override
+    protected void start(@NotNull ServerLevel world, @NotNull LivingEntity entity, long time) {
+        if (!isRightEntityType(entity)) {
+            stop(world, entity, time);
+            return;
+        }
+        org.bukkit.entity.LivingEntity livingEntity = entity.getBukkitLivingEntity();
+        paperCustomAIBehaviour.start(world.getWorld(), paperCustomAIBehaviour.getEntityType().cast(livingEntity), Bukkit.getCurrentTick());
+    }
+
+    @Override
+    protected void stop(@NotNull ServerLevel world, @NotNull LivingEntity entity, long time) {
+        if (!isRightEntityType(entity))
+            return;
+        org.bukkit.entity.LivingEntity livingEntity = entity.getBukkitLivingEntity();
+        paperCustomAIBehaviour.stop(world.getWorld(), paperCustomAIBehaviour.getEntityType().cast(livingEntity), Bukkit.getCurrentTick());
+    }
+
+    @Override
+    protected void tick(@NotNull ServerLevel world, @NotNull LivingEntity entity, long time) {
+        org.bukkit.entity.LivingEntity livingEntity = entity.getBukkitLivingEntity();
+        paperCustomAIBehaviour.tick(world.getWorld(), paperCustomAIBehaviour.getEntityType().cast(livingEntity), Bukkit.getCurrentTick());
+    }
+
+    @Override
+    protected boolean canStillUse(@NotNull ServerLevel world, @NotNull LivingEntity entity, long time) {
+        if (!isRightEntityType(entity))
+            return false;
+        org.bukkit.entity.LivingEntity livingEntity = entity.getBukkitLivingEntity();
+        return paperCustomAIBehaviour.canStillUse(world.getWorld(), paperCustomAIBehaviour.getEntityType().cast(livingEntity), Bukkit.getCurrentTick());
+    }
+
+    private final boolean isRightEntityType(@NotNull LivingEntity livingEntity) {
+        return paperCustomAIBehaviour.getEntityType().isAssignableFrom(livingEntity.getBukkitLivingEntity().getClass());
+    }
+
+    private static Map<MemoryModuleType<?>, MemoryStatus> getNMSRequiredMemoryState(Map<MemoryKey<?>, de.verdox.mccreativelab.ai.MemoryStatus> bukkitRequiredMemoryStates) {
+        Map<MemoryModuleType<?>, MemoryStatus> map = new HashMap<>();
+        bukkitRequiredMemoryStates.forEach((memoryKey, memoryStatus) -> {
+            MemoryStatus nmsMemoryStatus = switch (memoryStatus) {
+                case VALUE_PRESENT -> MemoryStatus.VALUE_PRESENT;
+                case VALUE_ABSENT -> MemoryStatus.VALUE_ABSENT;
+                case REGISTERED -> MemoryStatus.REGISTERED;
+            };
+            map.put(CraftMemoryKey.bukkitToMinecraft(memoryKey), nmsMemoryStatus);
+        });
+        return map;
+    }
+}
diff --git a/src/main/java/net/minecraft/world/entity/player/Player.java b/src/main/java/net/minecraft/world/entity/player/Player.java
index d58b4c0dbe651b5068212e5f14dce3164ee520f5..198157782deababb85675ca1d878a71a9b750e6c 100644
--- a/src/main/java/net/minecraft/world/entity/player/Player.java
+++ b/src/main/java/net/minecraft/world/entity/player/Player.java
@@ -1292,12 +1292,14 @@ public abstract class Player extends LivingEntity {
                     }
 
                     f += f1;
+
                     boolean flag3 = false;
                     double d0 = (double) (this.walkDist - this.walkDistO);
 
                     if (flag && !flag2 && !flag1 && this.onGround() && d0 < (double) this.getSpeed()) {
                         ItemStack itemstack = this.getItemInHand(InteractionHand.MAIN_HAND);
 
+                        //TODO: MCCreativeLab Custom Sweep Attack Logic
                         if (itemstack.getItem() instanceof SwordItem) {
                             flag3 = true;
                         }
@@ -1342,6 +1344,7 @@ public abstract class Player extends LivingEntity {
                         }
 
                         if (flag3) {
+                            //TODO: MCCreativeLab Custom Sweep Attack Logic
                             float f4 = 1.0F + EnchantmentHelper.getSweepingDamageRatio(this) * f;
                             List<LivingEntity> list = this.level().getEntitiesOfClass(LivingEntity.class, target.getBoundingBox().inflate(1.0D, 0.25D, 1.0D));
                             Iterator iterator = list.iterator();
diff --git a/src/main/java/net/minecraft/world/level/block/ChiseledBookShelfBlock.java b/src/main/java/net/minecraft/world/level/block/ChiseledBookShelfBlock.java
index c86558e6df739103185167fce82f568f294b1c4e..ee55e82e5d65d3e9df49303601c149e9c949b98c 100644
--- a/src/main/java/net/minecraft/world/level/block/ChiseledBookShelfBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ChiseledBookShelfBlock.java
@@ -53,8 +53,7 @@ public class ChiseledBookShelfBlock extends BaseEntityBlock {
 
     @Override
     public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
-        BlockEntity optional = world.getBlockEntity(pos);
-        if (optional instanceof ChiseledBookShelfBlockEntity chiseledBookShelfBlockEntity) {
+        if (world.getBlockEntity(pos) instanceof ChiseledBookShelfBlockEntity chiseledBookShelfBlockEntity) {
             Optional<Vec2> optional = getRelativeHitCoordinatesForBlockFace(hit, state.getValue(HorizontalDirectionalBlock.FACING));
             if (optional.isEmpty()) {
                 return InteractionResult.PASS;
diff --git a/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java b/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java
index c75a032d4340ce56e45b289112af63adae5438f0..5c43b51e853fd0ede33bd4804c021c4c53b316c4 100644
--- a/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java
+++ b/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java
@@ -13,6 +13,7 @@ import java.util.function.Predicate;
 import java.util.function.ToIntFunction;
 import java.util.stream.Stream;
 import javax.annotation.Nullable;
+
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.core.Holder;
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftEntityActivity.java b/src/main/java/org/bukkit/craftbukkit/CraftEntityActivity.java
new file mode 100644
index 0000000000000000000000000000000000000000..b25a08cc1e7bcf015764201580d020401e201172
--- /dev/null
+++ b/src/main/java/org/bukkit/craftbukkit/CraftEntityActivity.java
@@ -0,0 +1,22 @@
+package org.bukkit.craftbukkit;
+
+import org.bukkit.EntityActivity;
+import net.minecraft.world.entity.schedule.Activity;
+import org.bukkit.NamespacedKey;
+import org.jetbrains.annotations.NotNull;
+
+public class CraftEntityActivity extends BukkitToNMSMapping<Activity> implements EntityActivity {
+    public CraftEntityActivity(NamespacedKey key, Activity handle) {
+        super(key, handle);
+    }
+
+    @Override
+    public @NotNull String translationKey() {
+        return "activity.minecraft." + getKey().getKey();
+    }
+
+    @Override
+    public String toString() {
+        return "CraftEntityActivity{key=" + this.getKey() + "}";
+    }
+}
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftEntitySchedule.java b/src/main/java/org/bukkit/craftbukkit/CraftEntitySchedule.java
new file mode 100644
index 0000000000000000000000000000000000000000..af41fd04720694a46db4e50df05a0928f9f25e9f
--- /dev/null
+++ b/src/main/java/org/bukkit/craftbukkit/CraftEntitySchedule.java
@@ -0,0 +1,22 @@
+package org.bukkit.craftbukkit;
+
+import net.minecraft.world.entity.schedule.Schedule;
+import org.bukkit.EntitySchedule;
+import org.bukkit.NamespacedKey;
+import org.jetbrains.annotations.NotNull;
+
+public class CraftEntitySchedule extends BukkitToNMSMapping<Schedule> implements EntitySchedule {
+    public CraftEntitySchedule(NamespacedKey key, Schedule handle) {
+        super(key, handle);
+    }
+
+    @Override
+    public @NotNull String translationKey() {
+        return "schedule.minecraft." + getKey().getKey();
+    }
+
+    @Override
+    public String toString() {
+        return "CraftEntitySchedule{key=" + this.getKey() + "}";
+    }
+}
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftRegistry.java b/src/main/java/org/bukkit/craftbukkit/CraftRegistry.java
index 13650485a4000daf33994e0101218848411d4468..1b1c41354391f3225deebff807f90012f96a4fb2 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftRegistry.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftRegistry.java
@@ -81,6 +81,12 @@ public class CraftRegistry<B extends Keyed, M> implements Registry<B> {
         if(bukkitClass == PoiType.class){
             return new CraftRegistry<>(PoiType.class, registryHolder.registryOrThrow(Registries.POINT_OF_INTEREST_TYPE), CraftPoiType::new);
         }
+        if(bukkitClass == EntityActivity.class){
+            return new CraftRegistry<>(EntityActivity.class, registryHolder.registryOrThrow(Registries.ACTIVITY), CraftEntityActivity::new);
+        }
+        if(bukkitClass == EntitySchedule.class){
+            return new CraftRegistry<>(EntitySchedule.class, registryHolder.registryOrThrow(Registries.SCHEDULE), CraftEntitySchedule::new);
+        }
         // TODO registry modification API
         // Paper start - remove this after a while along with all ConfiguredStructure stuff
         if (bukkitClass == io.papermc.paper.world.structure.ConfiguredStructure.class) {
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index b4077b0f4da2ee2e2aaffb1331a86e0580bdee3a..faab21a28d115caf0e3c18c704aa9af6aeb71779 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -1096,6 +1096,7 @@ public final class CraftServer implements Server {
         io.papermc.paper.plugin.PluginInitializerManager.reload(this.console); // Paper
         this.loadPlugins();
         this.enablePlugins(PluginLoadOrder.STARTUP);
+        net.minecraft.world.level.block.Blocks.rebuildCache();
         this.enablePlugins(PluginLoadOrder.POSTWORLD);
         this.getPluginManager().callEvent(new ServerLoadEvent(ServerLoadEvent.LoadType.RELOAD));
         org.spigotmc.WatchdogThread.hasStarted = true; // Paper - Disable watchdog early timeout on reload
@@ -1609,8 +1610,8 @@ public final class CraftServer implements Server {
 
         // Set the resulting matrix items
         for (int i = 0; i < craftingMatrix.length; i++) {
-            Item remaining = inventoryCrafting.getContents().get(i).getItem().getCraftingRemainingItem();
-            craftingMatrix[i] = (remaining != null) ? CraftItemStack.asBukkitCopy(remaining.getDefaultInstance()) : null;
+            net.minecraft.world.item.ItemStack remaining = inventoryCrafting.getContents().get(i).getCraftingRemainingItem();
+            craftingMatrix[i] = (remaining != null) ? CraftItemStack.asBukkitCopy(remaining) : null;
         }
 
         return CraftItemStack.asBukkitCopy(result);
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
index fe2124694eb080cab685a1ce1f6a66e2fcdf6a17..27d6f6afc86459dafad57d989ffc7bc56d2533f0 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
@@ -9,6 +9,8 @@ import java.util.Iterator;
 import java.util.List;
 import java.util.Set;
 import java.util.UUID;
+
+import de.verdox.mccreativelab.ai.EntityBrain;
 import net.minecraft.network.protocol.game.ClientboundHurtAnimationPacket;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.sounds.SoundEvent;
@@ -18,6 +20,7 @@ import net.minecraft.world.effect.MobEffectInstance;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.Mob;
 import net.minecraft.world.entity.MobType;
+import net.minecraft.world.entity.ai.Brain;
 import net.minecraft.world.entity.ai.attributes.Attributes;
 import net.minecraft.world.entity.boss.wither.WitherBoss;
 import net.minecraft.world.entity.decoration.ArmorStand;
@@ -45,7 +48,6 @@ import org.bukkit.craftbukkit.entity.memory.CraftMemoryMapper;
 import org.bukkit.craftbukkit.inventory.CraftEntityEquipment;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.craftbukkit.potion.CraftPotionEffectType;
-import org.bukkit.craftbukkit.potion.CraftPotionUtil;
 import org.bukkit.entity.AbstractArrow;
 import org.bukkit.entity.Arrow;
 import org.bukkit.entity.DragonFireball;
@@ -852,6 +854,11 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
         this.getHandle().getBrain().setMemory(CraftMemoryKey.bukkitToMinecraft(memoryKey), CraftMemoryMapper.toNms(t));
     }
 
+    @Override
+    public <T extends LivingEntity> EntityBrain<T> getBrain(Class<? extends T> type) {
+        return new de.verdox.mccreativelab.ai.CraftEntityBrain<>((Brain<net.minecraft.world.entity.LivingEntity>) getHandle().getBrain());
+    }
+
     @Override
     public Sound getHurtSound() {
         SoundEvent sound = this.getHandle().getHurtSound0(this.getHandle().damageSources().generic());
