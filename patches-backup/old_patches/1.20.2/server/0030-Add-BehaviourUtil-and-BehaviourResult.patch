From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: derverdox <mail.ysp@web.de>
Date: Mon, 8 Jan 2024 18:10:41 +0100
Subject: [PATCH] Add BehaviourUtil and BehaviourResult


diff --git a/src/main/java/de/verdox/mccreativelab/behaviour/BehaviourUtil.java b/src/main/java/de/verdox/mccreativelab/behaviour/BehaviourUtil.java
new file mode 100644
index 0000000000000000000000000000000000000000..e4688e585f1649b4a0fa580066bf89b1cc89b5de
--- /dev/null
+++ b/src/main/java/de/verdox/mccreativelab/behaviour/BehaviourUtil.java
@@ -0,0 +1,190 @@
+package de.verdox.mccreativelab.behaviour;
+
+import de.verdox.mccreativelab.MultiCustomBehaviour;
+import net.minecraft.world.level.block.state.BlockState;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.CraftFoodProperties;
+import org.bukkit.craftbukkit.block.data.CraftBlockData;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.HashMap;
+import java.util.Map;
+import java.util.function.Function;
+import java.util.function.Supplier;
+
+public class BehaviourUtil {
+    public static final BehaviourResult.Object<Float> FLOAT_DEFAULT = new BehaviourResult.Object<>(0f, BehaviourResult.Object.Type.USE_VANILLA);
+    public static <K, V> boolean evaluateBoolean(@NotNull MultiCustomBehaviour<K, V> multiCustomBehaviour, @NotNull K key, @NotNull Function<V, BehaviourResult.Bool> logicFunction, Supplier<Boolean> vanillaLogic) {
+        return evaluate(multiCustomBehaviour, key, logicFunction, vanillaLogic, Converter.DummyConverter.getInstance(Boolean.class));
+    }
+
+    public static <K, V> int evaluateInteger(@NotNull MultiCustomBehaviour<K, V> multiCustomBehaviour, @NotNull K key, @NotNull Function<V, BehaviourResult.Object<Integer>> logicFunction, Supplier<Integer> vanillaLogic) {
+        return evaluate(multiCustomBehaviour, key, logicFunction, vanillaLogic, Converter.DummyConverter.getInstance(Integer.class));
+    }
+
+    public static <K, V> void evaluateVoid(@NotNull MultiCustomBehaviour<K, V> multiCustomBehaviour, @NotNull K key, @NotNull Function<V, BehaviourResult.Void> logicFunction, Runnable vanillaLogic) {
+        evaluate(multiCustomBehaviour, key, logicFunction, () -> {
+            vanillaLogic.run();
+            return null;
+        }, Converter.DummyConverter.getInstance(Void.class));
+    }
+
+    public static <K, V> void evaluateCallback(@NotNull MultiCustomBehaviour<K, V> multiCustomBehaviour, @NotNull K key, @NotNull Function<V, BehaviourResult.Callback> logicFunction, Supplier<Void> vanillaLogic) {
+        evaluate(multiCustomBehaviour, key, logicFunction, vanillaLogic, Converter.DummyConverter.getInstance(Void.class));
+    }
+
+    public static <K, V> void evaluateCallback(@NotNull MultiCustomBehaviour<K, V> multiCustomBehaviour, @NotNull K key, @NotNull Function<V, BehaviourResult.Callback> logicFunction) {
+        evaluate(multiCustomBehaviour, key, logicFunction);
+    }
+
+    public static <I, R, T extends BehaviourResult<I, ?>, K, V> R evaluate(@NotNull MultiCustomBehaviour<K, V> multiCustomBehaviour, @NotNull K key, @NotNull Function<V, T> logicFunction, Supplier<R> vanillaLogic, @Nullable Converter<I, R> converter) {
+        if (!multiCustomBehaviour.isImplemented(key))
+            return vanillaLogic.get();
+
+        V behaviour = multiCustomBehaviour.getBehaviour(key);
+        try {
+            BehaviourResult<I, ?> behaviourResult = logicFunction.apply(behaviour);
+            if(converter == null)
+                return vanillaLogic.get();
+            var evaluatedValue = behaviourResult.evaluateReturnValue(() -> {
+                var vanillaValue = vanillaLogic.get();
+                if(vanillaValue == null)
+                    return null;
+                return converter.nmsToBukkitValue(vanillaValue);
+            });
+            if(evaluatedValue == null)
+                return null;
+            return converter.bukkitToNMS(evaluatedValue);
+        } catch (Throwable throwable) {
+            Bukkit.getLogger()
+                  .log(java.util.logging.Level.WARNING, "An error occurred while running custom behaviour logic " + multiCustomBehaviour.getKey() + " for key " + key + " with value " + behaviour, throwable);
+            return vanillaLogic.get();
+        }
+    }
+
+    public static <T extends BehaviourResult<?, ?>, K, V> boolean runIfVanillaLogicReplaced(@NotNull MultiCustomBehaviour<K, V> multiCustomBehaviour, @NotNull K key, @NotNull Function<V, T> logicFunction) {
+        if (!multiCustomBehaviour.isImplemented(key))
+            return false;
+        V behaviour = multiCustomBehaviour.getBehaviour(key);
+
+        try {
+            BehaviourResult<?, ?> behaviourResult = logicFunction.apply(behaviour);
+            return behaviourResult.replaceVanillaLogic();
+        } catch (Throwable throwable) {
+            Bukkit.getLogger()
+                  .log(java.util.logging.Level.WARNING, "An error occurred while running custom behaviour logic " + multiCustomBehaviour.getKey() + " for key " + key + " with value " + behaviour, throwable);
+            return false;
+        }
+    }
+
+    private static <I, R, T extends BehaviourResult<I, ?>, K, V> R evaluate(@NotNull MultiCustomBehaviour<K, V> multiCustomBehaviour, @NotNull K key, @NotNull Function<V, T> logicFunction) {
+        return evaluate(multiCustomBehaviour, key, logicFunction, () -> null, new Converter<>() {
+            @Override
+            public R bukkitToNMS(I bukkitValue) {
+                return null;
+            }
+
+            @Override
+            public I nmsToBukkitValue(R nmsValue) {
+                return null;
+            }
+        });
+    }
+
+    /**
+     * @param <I> The bukkit value
+     * @param <R> The nms value
+     */
+    public interface Converter<I, R> {
+        class DummyConverter<T> implements Converter<T, T> {
+            private static final Map<Class<?>, DummyConverter<?>> cache = new HashMap<>();
+            public static <T> DummyConverter<T> getInstance(Class<? extends T> type){
+                return (DummyConverter<T>) cache.computeIfAbsent(type, aClass -> new DummyConverter<T>());
+            }
+
+            @Override
+            public T bukkitToNMS(T bukkitValue) {
+                return bukkitValue;
+            }
+
+            @Override
+            public T nmsToBukkitValue(T nmsValue) {
+                return nmsValue;
+            }
+        }
+        class ItemStack implements Converter<org.bukkit.inventory.ItemStack, net.minecraft.world.item.ItemStack> {
+            public static final ItemStack INSTANCE = new ItemStack();
+
+            @Override
+            public net.minecraft.world.item.ItemStack bukkitToNMS(org.bukkit.inventory.ItemStack bukkitValue) {
+                if (bukkitValue instanceof CraftItemStack craftItemStack)
+                    return craftItemStack.handle;
+                return CraftItemStack.asNMSCopy(bukkitValue);
+            }
+
+            @Override
+            public org.bukkit.inventory.ItemStack nmsToBukkitValue(net.minecraft.world.item.ItemStack nmsValue) {
+                return nmsValue.getBukkitStack();
+            }
+        }
+        class InteractionResult implements Converter<de.verdox.mccreativelab.InteractionResult, net.minecraft.world.InteractionResult>{
+            public static final InteractionResult INSTANCE = new InteractionResult();
+            private InteractionResult(){}
+            @Override
+            public net.minecraft.world.InteractionResult bukkitToNMS(de.verdox.mccreativelab.InteractionResult bukkitValue) {
+                if(bukkitValue == null)
+                    return net.minecraft.world.InteractionResult.PASS;
+                return switch (bukkitValue){
+                    case SUCCESS -> net.minecraft.world.InteractionResult.SUCCESS;
+                    case CONSUME -> net.minecraft.world.InteractionResult.CONSUME;
+                    case CONSUME_PARTIAL -> net.minecraft.world.InteractionResult.CONSUME_PARTIAL;
+                    case PASS -> net.minecraft.world.InteractionResult.PASS;
+                    case FAIL -> net.minecraft.world.InteractionResult.FAIL;
+                };
+            }
+
+            @Override
+            public de.verdox.mccreativelab.InteractionResult nmsToBukkitValue(net.minecraft.world.InteractionResult nmsValue) {
+                return switch (nmsValue){
+                    case SUCCESS -> de.verdox.mccreativelab.InteractionResult.SUCCESS;
+                    case CONSUME -> de.verdox.mccreativelab.InteractionResult.CONSUME;
+                    case CONSUME_PARTIAL -> de.verdox.mccreativelab.InteractionResult.CONSUME_PARTIAL;
+                    case PASS -> de.verdox.mccreativelab.InteractionResult.PASS;
+                    case FAIL -> de.verdox.mccreativelab.InteractionResult.FAIL;
+                };
+            }
+        }
+        class BlockData implements Converter<org.bukkit.block.data.BlockData, BlockState>{
+            public static final BlockData INSTANCE = new BlockData();
+
+            @Override
+            public BlockState bukkitToNMS(org.bukkit.block.data.BlockData bukkitValue) {
+                return ((CraftBlockData)bukkitValue).getState();
+            }
+
+            @Override
+            public CraftBlockData nmsToBukkitValue(BlockState nmsValue) {
+                return nmsValue.createCraftBlockData();
+            }
+        }
+        class FoodProperties implements Converter<de.verdox.itemformat.component.FoodProperties, net.minecraft.world.food.FoodProperties>{
+            public static final FoodProperties INSTANCE = new FoodProperties();
+
+            @Override
+            public net.minecraft.world.food.FoodProperties bukkitToNMS(de.verdox.itemformat.component.FoodProperties bukkitValue) {
+                return CraftFoodProperties.toNMS(bukkitValue);
+            }
+
+            @Override
+            public de.verdox.itemformat.component.FoodProperties nmsToBukkitValue(net.minecraft.world.food.FoodProperties nmsValue) {
+                return CraftFoodProperties.toBukkit(nmsValue);
+            }
+        }
+
+        R bukkitToNMS(I bukkitValue);
+
+        I nmsToBukkitValue(R nmsValue);
+    }
+}
