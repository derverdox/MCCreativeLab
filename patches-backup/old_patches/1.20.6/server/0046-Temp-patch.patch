From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: verdox <mail.ysp@web.de>
Date: Wed, 19 Jun 2024 15:25:03 +0000
Subject: [PATCH] Temp patch


diff --git a/build.gradle.kts b/build.gradle.kts
index 47cfb2baeb20178fbfedef3407280db517d0353d..9bc20336044cd98fb45e8c969e1d3932b462159e 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -189,6 +189,7 @@ tasks.registerRunTask("runServer") {
     description = "Spin up a test server from the Mojang mapped server jar"
     classpath(tasks.includeMappings.flatMap { it.outputJar })
     classpath(runtimeClasspathWithoutVanillaServer)
+    jvmArgs("-Dpaper.debug-sync-loads=true", "-Dfile.encoding=UTF-8")
     dependsOn(":plugin-extension:build")
 }
 
@@ -196,13 +197,14 @@ tasks.registerRunTask("runReobfServer") {
     description = "Spin up a test server from the reobfJar output jar"
     classpath(tasks.reobfJar.flatMap { it.outputJar })
     classpath(runtimeClasspathWithoutVanillaServer)
+    jvmArgs("-Dpaper.debug-sync-loads=true", "-Dfile.encoding=UTF-8")
     dependsOn(":plugin-extension:build")
 }
 
 tasks.registerRunTask("runDevServer") {
     description = "Spin up a test server without assembling a jar"
     classpath(sourceSets.main.map { it.runtimeClasspath })
-    jvmArgs("-DPaper.pushPaperAssetsRoot=true")
+    jvmArgs("-DPaper.pushPaperAssetsRoot=true", "-Dpaper.debug-sync-loads=true", "-Dfile.encoding=UTF-8")
     dependsOn(":plugin-extension:build")
 }
 
@@ -211,22 +213,26 @@ tasks.registerRunTask("runBundler") {
     classpath(rootProject.tasks.named<io.papermc.paperweight.tasks.CreateBundlerJar>("createMojmapBundlerJar").flatMap { it.outputZip })
     mainClass.set(null as String?)
     dependsOn(":plugin-extension:build")
+    jvmArgs("-Dpaper.debug-sync-loads=true", "-Dfile.encoding=UTF-8")
 }
 tasks.registerRunTask("runReobfBundler") {
     description = "Spin up a test server from the reobf bundler jar"
     classpath(rootProject.tasks.named<io.papermc.paperweight.tasks.CreateBundlerJar>("createReobfBundlerJar").flatMap { it.outputZip })
     mainClass.set(null as String?)
     dependsOn(":plugin-extension:build")
+    jvmArgs("-Dpaper.debug-sync-loads=true", "-Dfile.encoding=UTF-8")
 }
 tasks.registerRunTask("runPaperclip") {
     description = "Spin up a test server from the Mojang mapped Paperclip jar"
     classpath(rootProject.tasks.named<io.papermc.paperweight.tasks.CreatePaperclipJar>("createMojmapPaperclipJar").flatMap { it.outputZip })
     mainClass.set(null as String?)
     dependsOn(":plugin-extension:build")
+    jvmArgs("-Dpaper.debug-sync-loads=true", "-Dfile.encoding=UTF-8")
 }
 tasks.registerRunTask("runReobfPaperclip") {
     description = "Spin up a test server from the reobf Paperclip jar"
     classpath(rootProject.tasks.named<io.papermc.paperweight.tasks.CreatePaperclipJar>("createReobfPaperclipJar").flatMap { it.outputZip })
     mainClass.set(null as String?)
     dependsOn(":plugin-extension:build")
+    jvmArgs("-Dpaper.debug-sync-loads=true", "-Dfile.encoding=UTF-8")
 }
diff --git a/src/main/java/de/verdox/mccreativelab/AsyncWorldCreation.java b/src/main/java/de/verdox/mccreativelab/AsyncWorldCreation.java
index 3502ffbdc4bdedb1542876a185f43d053f944f60..7502f2407a309b4e2ad8f24da84f9aced3032b3b 100644
--- a/src/main/java/de/verdox/mccreativelab/AsyncWorldCreation.java
+++ b/src/main/java/de/verdox/mccreativelab/AsyncWorldCreation.java
@@ -11,6 +11,7 @@ import net.minecraft.core.BlockPos;
 import net.minecraft.core.Registry;
 import net.minecraft.core.RegistryAccess;
 import net.minecraft.core.registries.Registries;
+import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.NbtException;
 import net.minecraft.nbt.ReportedNbtException;
 import net.minecraft.resources.ResourceKey;
@@ -37,15 +38,20 @@ import net.minecraft.world.level.storage.LevelStorageSource;
 import net.minecraft.world.level.storage.PrimaryLevelData;
 import net.minecraft.world.level.validation.ContentValidationException;
 import org.bukkit.Bukkit;
+import org.bukkit.NamespacedKey;
 import org.bukkit.World;
 import org.bukkit.WorldCreator;
 import org.bukkit.craftbukkit.CraftServer;
+import org.bukkit.craftbukkit.CraftWorld;
 import org.bukkit.craftbukkit.generator.CraftWorldInfo;
+import org.bukkit.craftbukkit.persistence.CraftPersistentDataContainer;
+import org.bukkit.craftbukkit.persistence.CraftPersistentDataTypeRegistry;
 import org.bukkit.event.world.WorldInitEvent;
 import org.bukkit.event.world.WorldLoadEvent;
 import org.bukkit.generator.BiomeProvider;
 import org.bukkit.generator.ChunkGenerator;
 import org.bukkit.generator.WorldInfo;
+import org.bukkit.persistence.PersistentDataContainer;
 import org.bukkit.plugin.Plugin;
 import org.jetbrains.annotations.NotNull;
 import org.spigotmc.AsyncCatcher;
@@ -58,7 +64,7 @@ import java.util.concurrent.CompletableFuture;
 
 public class AsyncWorldCreation {
     public static CompletableFuture<World> createWorldAsync(@NotNull Plugin plugin, @NotNull WorldCreator creator, boolean useVanillaSpawnCalculation) {
-        AsyncCatcher.catchOp("createWorldAsync must be triggered synchronously");
+        //AsyncCatcher.catchOp("createWorldAsync must be triggered synchronously");
         Preconditions.checkArgument(creator != null, "WorldCreator cannot be null");
         Preconditions.checkState(MinecraftServer.getServer().getAllLevels().iterator().hasNext(), "Cannot create additional worlds on STARTUP");
 
@@ -141,6 +147,80 @@ public class AsyncWorldCreation {
         return future;
     }
 
+    public static PersistentDataContainer readPDCFromWorld(WorldCreator worldCreator){
+        WorldLoader.DataLoadContext worldLoader = MinecraftServer.getServer().worldLoader;
+        RegistryAccess.Frozen dimensionRegistryAccess = worldLoader.datapackDimensions();
+        CraftServer craftServer = (CraftServer) Bukkit.getServer();
+        net.minecraft.core.Registry<LevelStem> levelStemRegistry = dimensionRegistryAccess.registryOrThrow(Registries.LEVEL_STEM);
+
+        ResourceKey<LevelStem> actualDimension = switch (worldCreator.environment()) {
+            case NORMAL -> LevelStem.OVERWORLD;
+            case NETHER -> LevelStem.NETHER;
+            case THE_END -> LevelStem.END;
+            default -> throw new IllegalArgumentException("Illegal dimension (" + worldCreator.environment() + ")");
+        };
+
+        // First we get the level storage access
+        try {
+            LevelStorageSource levelStorageSource = LevelStorageSource.createDefault(craftServer.getWorldContainer().toPath());
+            try(LevelStorageSource.LevelStorageAccess worldSession = levelStorageSource.validateAndCreateAccess(worldCreator.name(), actualDimension)){
+                // Check if there is old world data there that needs to be converted to newer version
+                Dynamic<?> dynamic = loadOldWorldIfAvailable(worldSession);
+
+                // Load Level Data and Registry
+                if(dynamic == null)
+                    return null;
+
+                LevelDataAndDimensions leveldataanddimensions = LevelStorageSource.getLevelDataAndDimensions(dynamic, worldLoader.dataConfiguration(), levelStemRegistry, worldLoader.datapackWorldgen());
+                PrimaryLevelData worldData = (PrimaryLevelData) leveldataanddimensions.worldData();
+
+                final CraftPersistentDataContainer persistentDataContainer = new CraftPersistentDataContainer(new CraftPersistentDataTypeRegistry());
+
+                if (worldData.pdc instanceof CompoundTag)
+                    persistentDataContainer.putAll((CompoundTag) worldData.pdc);
+                return persistentDataContainer;
+            }
+        } catch (IOException | ContentValidationException ex) {
+            ex.printStackTrace();
+            throw new RuntimeException(ex);
+        }
+    }
+
+    public static void savePDCToWorldContainer(NamespacedKey worldKey, World.Environment environment, PersistentDataContainer persistentDataContainer){
+/*
+        WorldLoader.DataLoadContext worldLoader = MinecraftServer.getServer().worldLoader;
+        RegistryAccess.Frozen dimensionRegistryAccess = worldLoader.datapackDimensions();
+        CraftServer craftServer = (CraftServer) Bukkit.getServer();
+        net.minecraft.core.Registry<LevelStem> levelStemRegistry = dimensionRegistryAccess.registryOrThrow(Registries.LEVEL_STEM);
+
+        ResourceKey<LevelStem> actualDimension = switch (environment) {
+            case NORMAL -> LevelStem.OVERWORLD;
+            case NETHER -> LevelStem.NETHER;
+            case THE_END -> LevelStem.END;
+            default -> throw new IllegalArgumentException("Illegal dimension (" + environment + ")");
+        };
+
+        try {
+            LevelStorageSource levelStorageSource = LevelStorageSource.createDefault(craftServer.getWorldContainer().toPath());
+            LevelStorageSource.LevelStorageAccess worldSession = levelStorageSource.validateAndCreateAccess(worldKey.getKey(), actualDimension);
+
+            Dynamic<?> dynamic = loadOldWorldIfAvailable(worldSession);
+
+            if(dynamic == null)
+                return;
+
+            LevelDataAndDimensions leveldataanddimensions = LevelStorageSource.getLevelDataAndDimensions(dynamic, worldLoader.dataConfiguration(), levelStemRegistry, worldLoader.datapackWorldgen());
+            PrimaryLevelData worldData = (PrimaryLevelData) leveldataanddimensions.worldData();
+
+
+
+            if (worldData.pdc instanceof CompoundTag)
+                persistentDataContainer.putAll((CompoundTag) worldData.pdc);
+        } catch (IOException | ContentValidationException ex) {
+            throw new RuntimeException(ex);
+        }*/
+    }
+
     private static void initWorldAsync(PrimaryLevelData worlddata, ServerLevel internal, CraftServer craftServer, boolean useVanillaSpawnCalculation) {
         boolean isDebugWorld = worlddata.isDebugWorld();
 
diff --git a/src/main/java/de/verdox/mccreativelab/CreativeLabImpl.java b/src/main/java/de/verdox/mccreativelab/CreativeLabImpl.java
index d03ad6f59f503556037fcd55111a06f44c6779df..69d81cf08c4cdd458b85bea1a213c0c36c2ec50e 100644
--- a/src/main/java/de/verdox/mccreativelab/CreativeLabImpl.java
+++ b/src/main/java/de/verdox/mccreativelab/CreativeLabImpl.java
@@ -1,7 +1,26 @@
 package de.verdox.mccreativelab;
 
+import com.google.common.base.Supplier;
+import de.verdox.mccreativelab.behaviour.BehaviourUtil;
+import net.minecraft.core.BlockPos;
+import net.minecraft.core.Direction;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.world.InteractionHand;
+import net.minecraft.world.item.context.BlockPlaceContext;
+import net.minecraft.world.phys.BlockHitResult;
+import net.minecraft.world.phys.Vec3;
+import org.bukkit.Bukkit;
+import org.bukkit.Location;
+import org.bukkit.NamespacedKey;
+import org.bukkit.WorldCreator;
+import org.bukkit.inventory.ItemStack;
+import org.bukkit.persistence.PersistentDataContainer;
+import org.bukkit.plugin.Plugin;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.Objects;
+import java.util.concurrent.CompletableFuture;
+
 public final class CreativeLabImpl implements CreativeLab {
 
     private final de.verdox.mccreativelab.data.DataPackInterceptor dataPackInterceptor = new CraftDataPackInterceptor();
@@ -42,6 +61,27 @@ public final class CreativeLabImpl implements CreativeLab {
         return AsyncWorldCreation.createWorldAsync(plugin, worldCreator, useVanillaSpawnCalculation);
     }
 
+    @Override
+    public CompletableFuture<PersistentDataContainer> readFromWorldPDCWithoutLoadingAsync(@NotNull Plugin plugin, @NotNull WorldCreator worldCreator) {
+        CompletableFuture<PersistentDataContainer> future = new CompletableFuture<>();
+        Bukkit.getAsyncScheduler().runNow(plugin, scheduledTask -> {
+            try{
+                PersistentDataContainer persistentDataContainer = AsyncWorldCreation.readPDCFromWorld(worldCreator);
+                MinecraftServer.getServer().scheduleOnMain(() -> future.complete(persistentDataContainer));
+            }
+            catch (Throwable e){
+                future.cancel(true);
+            }
+
+        });
+        return future;
+    }
+
+    @Override
+    public PersistentDataContainer readFromWorldPDCWithoutLoading(@NotNull Plugin plugin, @NotNull WorldCreator worldCreator) {
+        return AsyncWorldCreation.readPDCFromWorld(worldCreator);
+    }
+
     @Override
     public java.util.stream.Stream<org.bukkit.block.data.BlockData> streamAllBlockDataVariants(org.bukkit.Material blockMaterial) {
         if(!blockMaterial.isBlock())
@@ -50,6 +90,41 @@ public final class CreativeLabImpl implements CreativeLab {
         return vanillaBlockType.getStateDefinition().getPossibleStates().stream().map(org.bukkit.craftbukkit.block.data.CraftBlockData::createData);
     }
 
+    public static <T> java.util.concurrent.CompletableFuture<T> getFromMain(Supplier<T> data) {
+        if(Bukkit.isPrimaryThread())
+            return java.util.concurrent.CompletableFuture.completedFuture(data.get());
+        java.util.concurrent.CompletableFuture<T> future = new java.util.concurrent.CompletableFuture<>();
+        MinecraftServer.getServer().scheduleOnMain(() -> {
+            try {
+                future.complete(data.get());
+            } catch (Throwable throwable) {
+                throwable.printStackTrace();
+                future.cancel(true);
+                future.obtrudeException(throwable);
+            }
+        });
+        return future;
+    }
+
+    public static java.util.concurrent.CompletableFuture<Void> runOnMain(Runnable runnable){
+        if(Bukkit.isPrimaryThread()){
+            runnable.run();
+            return java.util.concurrent.CompletableFuture.completedFuture(null);
+        }
+        java.util.concurrent.CompletableFuture<Void> future = new java.util.concurrent.CompletableFuture<>();
+        MinecraftServer.getServer().scheduleOnMain(() -> {
+            try {
+                runnable.run();
+                future.complete(null);
+            } catch (Throwable throwable) {
+                throwable.printStackTrace();
+                future.cancel(true);
+                future.obtrudeException(throwable);
+            }
+        });
+        return future;
+    }
+
     @Override
     public java.util.Iterator<org.bukkit.block.data.BlockData> iterateThroughAllBlockDataVariants(org.bukkit.Material blockMaterial) {
         if(!blockMaterial.isBlock())
diff --git a/src/main/java/net/minecraft/world/item/BlockItem.java b/src/main/java/net/minecraft/world/item/BlockItem.java
index f41da0a94007aca4a50f88afffc827b4585109d3..5b97437571054882e696607f50d7ee3cd46a75c1 100644
--- a/src/main/java/net/minecraft/world/item/BlockItem.java
+++ b/src/main/java/net/minecraft/world/item/BlockItem.java
@@ -286,4 +286,62 @@ public class BlockItem extends Item {
     public FeatureFlagSet requiredFeatures() {
         return this.getBlock().requiredFeatures();
     }
+
+    public InteractionResult placeItemWithoutPlayer(BlockPlaceContext context){
+        if (!this.getBlock().isEnabled(context.getLevel().enabledFeatures())) {
+            return InteractionResult.FAIL;
+        } else if (!context.canPlace()) {
+            return InteractionResult.FAIL;
+        } else {
+            BlockPlaceContext blockactioncontext1 = this.updatePlacementContext(context);
+
+            if (blockactioncontext1 == null) {
+                return InteractionResult.FAIL;
+            } else {
+                // CraftBukkit start - special case for handling block placement with water lilies and snow buckets
+
+                BlockState iblockdata = de.verdox.mccreativelab.behaviour.ItemBehaviourUtil.placeBlockAction(context.getPlayer(), context.getClickedPos(), context.getLevel(), context.getItemInHand(), context.getLevel().getBlockState(context.getClickedPos()), () -> this.getPlacementState(blockactioncontext1));
+
+                org.bukkit.block.BlockState blockstate = null;
+                if (this instanceof PlaceOnWaterBlockItem || this instanceof SolidBucketItem) {
+                    blockstate = org.bukkit.craftbukkit.block.CraftBlockStates.getBlockState(blockactioncontext1.getLevel(), blockactioncontext1.getClickedPos());
+                }
+                final org.bukkit.block.BlockState oldBlockstate = blockstate != null ? blockstate : org.bukkit.craftbukkit.block.CraftBlockStates.getBlockState(blockactioncontext1.getLevel(), blockactioncontext1.getClickedPos()); // Paper - Reset placed block on exception
+                // CraftBukkit end
+
+                if (iblockdata == null) {
+                    return InteractionResult.FAIL;
+                } else if (!this.placeBlock(blockactioncontext1, iblockdata)) {
+                    return InteractionResult.FAIL;
+                } else {
+                    BlockPos blockposition = blockactioncontext1.getClickedPos();
+                    Level world = blockactioncontext1.getLevel();
+                    ItemStack itemstack = blockactioncontext1.getItemInHand();
+                    BlockState iblockdata1 = world.getBlockState(blockposition);
+
+                    if (iblockdata1.is(iblockdata.getBlock())) {
+                        iblockdata1 = this.updateBlockStateFromTag(null, blockposition, world, itemstack, iblockdata1);
+                        // Paper start - Reset placed block on exception
+                        try {
+                            this.updateCustomBlockEntityTag(blockposition, world, null, itemstack, iblockdata1);
+                            BlockItem.updateBlockEntityComponents(world, blockposition, itemstack);
+                        } catch (Exception e) {
+                            oldBlockstate.update(true, false);
+                            throw e; // Rethrow exception if not placed by a player
+                        }
+                        // Paper end - Reset placed block on exception
+                        iblockdata1.getBlock().setPlacedBy(world, blockposition, iblockdata1, null, itemstack);
+                        // CraftBukkit start
+                    }
+
+                    SoundType soundeffecttype = iblockdata1.getSoundType();
+
+                    //TODO: de.verdox.mccreativelab.behaviour.BlockBehaviourUtil.getInstance().onPlaceCallback();
+                    world.playSound(null, blockposition, this.getPlaceSound(iblockdata1), net.minecraft.sounds.SoundSource.BLOCKS, (soundeffecttype.getVolume() + 1.0F) / 2.0F, soundeffecttype.getPitch() * 0.8F); // Paper - Fix block place logic; reintroduce this for the dispenser (i.e the shulker)
+                    world.gameEvent((Holder) GameEvent.BLOCK_PLACE, blockposition, GameEvent.Context.of(null, iblockdata1));
+                    return InteractionResult.sidedSuccess(world.isClientSide);
+                }
+            }
+        }
+    }
 }
