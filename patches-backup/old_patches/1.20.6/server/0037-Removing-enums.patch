From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: verdox <mail.ysp@web.de>
Date: Thu, 20 Jun 2024 12:39:36 +0000
Subject: [PATCH] Removing enums


diff --git a/src/main/java/io/papermc/paper/registry/PaperRegistries.java b/src/main/java/io/papermc/paper/registry/PaperRegistries.java
index 3aa5aec0b17cbdff922009b940d49bb06945c2c6..5449a719e3be98e24441356409571d66c79718d1 100644
--- a/src/main/java/io/papermc/paper/registry/PaperRegistries.java
+++ b/src/main/java/io/papermc/paper/registry/PaperRegistries.java
@@ -65,7 +65,13 @@ public final class PaperRegistries {
             entry(Registries.BLOCK, RegistryKey.BLOCK, BlockType.class, CraftBlockType::new),
             entry(Registries.ITEM, RegistryKey.ITEM, ItemType.class, CraftItemType::new),
 
+            entry(Registries.ATTRIBUTE, RegistryKey.ATTRIBUTE, org.bukkit.attribute.Attribute.class, org.bukkit.craftbukkit.attribute.CraftAttribute::new),
+            entry(Registries.POINT_OF_INTEREST_TYPE, RegistryKey.POI_TYPE, org.bukkit.PoiType.class, org.bukkit.craftbukkit.CraftPoiType::new),
+            entry(Registries.SCHEDULE, RegistryKey.ENTITY_SCHEDULE, org.bukkit.EntitySchedule.class, org.bukkit.craftbukkit.CraftEntitySchedule::new),
+            entry(Registries.ACTIVITY, RegistryKey.ENTITY_ACTIVITY, org.bukkit.EntityActivity.class, org.bukkit.craftbukkit.CraftEntityActivity::new),
+
             // data-drivens
+            entry(Registries.BIOME, RegistryKey.BIOME, org.bukkit.block.Biome.class, org.bukkit.craftbukkit.block.CraftBiome::new).delayed(),
             entry(Registries.STRUCTURE, RegistryKey.STRUCTURE, Structure.class, CraftStructure::new).delayed(),
             entry(Registries.TRIM_MATERIAL, RegistryKey.TRIM_MATERIAL, TrimMaterial.class, CraftTrimMaterial::new).delayed(),
             entry(Registries.TRIM_PATTERN, RegistryKey.TRIM_PATTERN, TrimPattern.class, CraftTrimPattern::new).delayed(),
@@ -73,9 +79,7 @@ public final class PaperRegistries {
             entry(Registries.WOLF_VARIANT, RegistryKey.WOLF_VARIANT, Wolf.Variant.class, CraftWolf.CraftVariant::new).delayed(),
 
             // api-only
-            apiOnly(Registries.BIOME, RegistryKey.BIOME, () -> org.bukkit.Registry.BIOME),
             apiOnly(Registries.PAINTING_VARIANT, RegistryKey.PAINTING_VARIANT, () -> org.bukkit.Registry.ART),
-            apiOnly(Registries.ATTRIBUTE, RegistryKey.ATTRIBUTE, () -> org.bukkit.Registry.ATTRIBUTE),
             apiOnly(Registries.BANNER_PATTERN, RegistryKey.BANNER_PATTERN, () -> org.bukkit.Registry.BANNER_PATTERN),
             apiOnly(Registries.CAT_VARIANT, RegistryKey.CAT_VARIANT, () -> org.bukkit.Registry.CAT_VARIANT),
             apiOnly(Registries.ENTITY_TYPE, RegistryKey.ENTITY_TYPE, () -> org.bukkit.Registry.ENTITY_TYPE),
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftEntityActivity.java b/src/main/java/org/bukkit/craftbukkit/CraftEntityActivity.java
new file mode 100644
index 0000000000000000000000000000000000000000..b25a08cc1e7bcf015764201580d020401e201172
--- /dev/null
+++ b/src/main/java/org/bukkit/craftbukkit/CraftEntityActivity.java
@@ -0,0 +1,22 @@
+package org.bukkit.craftbukkit;
+
+import org.bukkit.EntityActivity;
+import net.minecraft.world.entity.schedule.Activity;
+import org.bukkit.NamespacedKey;
+import org.jetbrains.annotations.NotNull;
+
+public class CraftEntityActivity extends BukkitToNMSMapping<Activity> implements EntityActivity {
+    public CraftEntityActivity(NamespacedKey key, Activity handle) {
+        super(key, handle);
+    }
+
+    @Override
+    public @NotNull String translationKey() {
+        return "activity.minecraft." + getKey().getKey();
+    }
+
+    @Override
+    public String toString() {
+        return "CraftEntityActivity{key=" + this.getKey() + "}";
+    }
+}
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftEntitySchedule.java b/src/main/java/org/bukkit/craftbukkit/CraftEntitySchedule.java
new file mode 100644
index 0000000000000000000000000000000000000000..af41fd04720694a46db4e50df05a0928f9f25e9f
--- /dev/null
+++ b/src/main/java/org/bukkit/craftbukkit/CraftEntitySchedule.java
@@ -0,0 +1,22 @@
+package org.bukkit.craftbukkit;
+
+import net.minecraft.world.entity.schedule.Schedule;
+import org.bukkit.EntitySchedule;
+import org.bukkit.NamespacedKey;
+import org.jetbrains.annotations.NotNull;
+
+public class CraftEntitySchedule extends BukkitToNMSMapping<Schedule> implements EntitySchedule {
+    public CraftEntitySchedule(NamespacedKey key, Schedule handle) {
+        super(key, handle);
+    }
+
+    @Override
+    public @NotNull String translationKey() {
+        return "schedule.minecraft." + getKey().getKey();
+    }
+
+    @Override
+    public String toString() {
+        return "CraftEntitySchedule{key=" + this.getKey() + "}";
+    }
+}
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftFoodProperties.java b/src/main/java/org/bukkit/craftbukkit/CraftFoodProperties.java
deleted file mode 100644
index a3307b0d9d5fc863e7117fa762212afcbcfa3067..0000000000000000000000000000000000000000
--- a/src/main/java/org/bukkit/craftbukkit/CraftFoodProperties.java
+++ /dev/null
@@ -1,52 +0,0 @@
-package org.bukkit.craftbukkit;
-
-import it.unimi.dsi.fastutil.Pair;
-import net.minecraft.world.effect.MobEffectInstance;
-import org.bukkit.craftbukkit.potion.CraftPotionUtil;
-import org.bukkit.potion.PotionEffect;
-
-import java.util.List;
-import java.util.stream.Collectors;
-
-public class CraftFoodProperties implements FoodProperties {
-    public static net.minecraft.world.food.FoodProperties toNMS(FoodProperties foodProperties){
-        return ((CraftFoodProperties) foodProperties).handle;
-    }
-
-    public static FoodProperties toBukkit(net.minecraft.world.food.FoodProperties foodProperties){
-        return new CraftFoodProperties(foodProperties);
-    }
-
-    private final net.minecraft.world.food.FoodProperties handle;
-    public CraftFoodProperties(net.minecraft.world.food.FoodProperties handle){
-        this.handle = handle;
-    }
-    @Override
-    public int getNutrition() {
-        return handle.nutrition();
-    }
-
-    @Override
-    public float getSaturationModifier() {
-        return handle.saturation();
-    }
-
-    @Override
-    public float getEatSeconds() {
-        return handle.eatSeconds();
-    }
-
-    @Override
-    public boolean canAlwaysEat() {
-        return handle.canAlwaysEat();
-    }
-
-    @Override
-    public List<Pair<PotionEffect, Float>> getEffects() {
-        return handle.effects().stream().map(potionEffectFloatPair -> {
-            MobEffectInstance mobEffectInstance = potionEffectFloatPair.effect();
-            float value = potionEffectFloatPair.probability();
-            return Pair.of(CraftPotionUtil.toBukkit(mobEffectInstance), value);
-        }).collect(Collectors.toList());
-    }
-}
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftPoiType.java b/src/main/java/org/bukkit/craftbukkit/CraftPoiType.java
new file mode 100644
index 0000000000000000000000000000000000000000..5c6d277657dcc5aa7a03cceb87124fa8dfcc24c0
--- /dev/null
+++ b/src/main/java/org/bukkit/craftbukkit/CraftPoiType.java
@@ -0,0 +1,31 @@
+package org.bukkit.craftbukkit;
+
+import net.minecraft.core.registries.Registries;
+import org.bukkit.NamespacedKey;
+import org.bukkit.PoiType;
+import org.bukkit.Registry;
+import org.jetbrains.annotations.NotNull;
+
+public class CraftPoiType extends BukkitToNMSMapping<net.minecraft.world.entity.ai.village.poi.PoiType> implements PoiType {
+    public static PoiType minecraftToBukkit(net.minecraft.world.entity.ai.village.poi.PoiType minecraft) {
+        return minecraftToBukkit(minecraft, Registries.POINT_OF_INTEREST_TYPE, Registry.POI_TYPE);
+    }
+
+    public static net.minecraft.world.entity.ai.village.poi.PoiType bukkitToMinecraft(PoiType bukkit) {
+        return bukkitToMinecraft(bukkit, Registries.POINT_OF_INTEREST_TYPE);
+    }
+
+    public CraftPoiType(NamespacedKey key, net.minecraft.world.entity.ai.village.poi.PoiType handle) {
+        super(key, handle);
+    }
+
+    @Override
+    public @NotNull String translationKey() {
+        return "poitype.minecraft."+this.getKey().getKey();
+    }
+
+    @Override
+    public String toString() {
+        return "CraftPoiType{key=" + this.getKey() + "}";
+    }
+}
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftRegistry.java b/src/main/java/org/bukkit/craftbukkit/CraftRegistry.java
index d41b502eb451ec11dade2b987aee621511312ac6..8cf163efe50ea611facbf4f4901f9dbc170dfb5a 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftRegistry.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftRegistry.java
@@ -143,10 +143,6 @@ public class CraftRegistry<B extends Keyed, M> implements Registry<B> {
             if (bClass == Particle.class) {
                 return bukkit.get(FieldRename.PARTICLE_TYPE_RENAME.apply(namespacedKey, apiVersion));
             }
-
-            if (bClass == Attribute.class) {
-                return bukkit.get(FieldRename.ATTRIBUTE_RENAME.apply(namespacedKey, apiVersion));
-            }
         }
 
         return bukkit.get(namespacedKey);
diff --git a/src/main/java/org/bukkit/craftbukkit/attribute/CraftAttribute.java b/src/main/java/org/bukkit/craftbukkit/attribute/CraftAttribute.java
index 10e4318782107644f67818109784fff60d017e0a..d1a0d654ef7677f1e63726ad38164dec4bd25d66 100644
--- a/src/main/java/org/bukkit/craftbukkit/attribute/CraftAttribute.java
+++ b/src/main/java/org/bukkit/craftbukkit/attribute/CraftAttribute.java
@@ -12,17 +12,9 @@ import org.bukkit.craftbukkit.legacy.FieldRename;
 import org.bukkit.craftbukkit.util.ApiVersion;
 import org.bukkit.craftbukkit.util.CraftNamespacedKey;
 
-public class CraftAttribute {
-
+public class CraftAttribute extends Attribute implements org.bukkit.craftbukkit.util.Handleable<net.minecraft.world.entity.ai.attributes.Attribute> {
     public static Attribute minecraftToBukkit(net.minecraft.world.entity.ai.attributes.Attribute minecraft) {
-        Preconditions.checkArgument(minecraft != null);
-
-        net.minecraft.core.Registry<net.minecraft.world.entity.ai.attributes.Attribute> registry = CraftRegistry.getMinecraftRegistry(Registries.ATTRIBUTE);
-        Attribute bukkit = Registry.ATTRIBUTE.get(CraftNamespacedKey.fromMinecraft(registry.getResourceKey(minecraft).orElseThrow().location()));
-
-        Preconditions.checkArgument(bukkit != null);
-
-        return bukkit;
+        return CraftRegistry.minecraftToBukkit(minecraft, Registries.ATTRIBUTE, Registry.ATTRIBUTE);
     }
 
     public static Attribute minecraftHolderToBukkit(Holder<net.minecraft.world.entity.ai.attributes.Attribute> minecraft) {
@@ -31,23 +23,11 @@ public class CraftAttribute {
 
     public static Attribute stringToBukkit(String string) {
         Preconditions.checkArgument(string != null);
-
-        // We currently do not have any version-dependent remapping, so we can use current version
-        // First convert from when only the names where saved
-        string = FieldRename.convertAttributeName(ApiVersion.CURRENT, string);
-        string = string.toLowerCase(Locale.ROOT);
-        NamespacedKey key = NamespacedKey.fromString(string);
-        if (key == null) return null; // Paper - Fixup NamespacedKey handling
-
-        // Now also convert from when keys where saved
-        return CraftRegistry.get(Registry.ATTRIBUTE, key, ApiVersion.CURRENT);
+        return Registry.ATTRIBUTE.get(NamespacedKey.fromString(string));
     }
 
     public static net.minecraft.world.entity.ai.attributes.Attribute bukkitToMinecraft(Attribute bukkit) {
-        Preconditions.checkArgument(bukkit != null);
-
-        return CraftRegistry.getMinecraftRegistry(Registries.ATTRIBUTE)
-                .getOptional(CraftNamespacedKey.toMinecraft(bukkit.getKey())).orElseThrow();
+        return CraftRegistry.bukkitToMinecraft(bukkit);
     }
 
     public static Holder<net.minecraft.world.entity.ai.attributes.Attribute> bukkitToMinecraftHolder(Attribute bukkit) {
@@ -68,4 +48,22 @@ public class CraftAttribute {
 
         return bukkit.getKey().toString();
     }
+
+    private final NamespacedKey key;
+    private final net.minecraft.world.entity.ai.attributes.Attribute handle;
+
+    public CraftAttribute(NamespacedKey key, net.minecraft.world.entity.ai.attributes.Attribute handle) {
+        this.key = key;
+        this.handle = handle;
+    }
+
+    @Override
+    public @org.jetbrains.annotations.NotNull NamespacedKey getKey() {
+        return key;
+    }
+
+    @Override
+    public net.minecraft.world.entity.ai.attributes.Attribute getHandle() {
+        return handle;
+    }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftBiome.java b/src/main/java/org/bukkit/craftbukkit/block/CraftBiome.java
index 33d2e89ac40465b0c4633f9c51378b80f7c397a9..0f2efdaf356f170ab937d8b77c59d230bb4f74cf 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftBiome.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftBiome.java
@@ -9,33 +9,27 @@ import org.bukkit.block.Biome;
 import org.bukkit.craftbukkit.CraftRegistry;
 import org.bukkit.craftbukkit.util.CraftNamespacedKey;
 
-public class CraftBiome {
-
-    public static Biome minecraftToBukkit(net.minecraft.world.level.biome.Biome minecraft) {
-        Preconditions.checkArgument(minecraft != null);
-
-        net.minecraft.core.Registry<net.minecraft.world.level.biome.Biome> registry = CraftRegistry.getMinecraftRegistry(Registries.BIOME);
-        Biome bukkit = Registry.BIOME.get(CraftNamespacedKey.fromMinecraft(registry.getResourceKey(minecraft).orElseThrow().location()));
+public class CraftBiome extends org.bukkit.craftbukkit.BukkitToNMSMapping<net.minecraft.world.level.biome.Biome> implements Biome {
+    public CraftBiome(org.bukkit.NamespacedKey key, net.minecraft.world.level.biome.Biome handle) {
+        super(key, handle);
+    }
 
-        if (bukkit == null) {
-            return Biome.CUSTOM;
-        }
+    @Override
+    public @org.jetbrains.annotations.NotNull String translationKey() {
+        return "biome.minecraft." + this.getKey();
+    }
 
-        return bukkit;
+    public static Biome minecraftToBukkit(net.minecraft.world.level.biome.Biome minecraft) {
+        return CraftRegistry.minecraftToBukkit(minecraft, Registries.BIOME, Registry.BIOME);
     }
 
     public static Biome minecraftHolderToBukkit(Holder<net.minecraft.world.level.biome.Biome> minecraft) {
         return CraftBiome.minecraftToBukkit(minecraft.value());
     }
 
-    private static final java.util.Map<org.bukkit.block.Biome, ResourceKey<net.minecraft.world.level.biome.Biome>> BIOME_KEY_CACHE = java.util.Collections.synchronizedMap(new java.util.EnumMap<>(Biome.class)); // Paper
+    private static final java.util.Map<org.bukkit.block.Biome, ResourceKey<net.minecraft.world.level.biome.Biome>> BIOME_KEY_CACHE = java.util.Collections.synchronizedMap(new java.util.HashMap<>()); // Paper
     public static net.minecraft.world.level.biome.Biome bukkitToMinecraft(Biome bukkit) {
-        if (bukkit == null || bukkit == Biome.CUSTOM) {
-            return null;
-        }
-
-        return CraftRegistry.getMinecraftRegistry(Registries.BIOME)
-                .getOptional(BIOME_KEY_CACHE.computeIfAbsent(bukkit, b -> ResourceKey.create(Registries.BIOME, CraftNamespacedKey.toMinecraft(b.getKey())))).orElseThrow();
+        return CraftRegistry.bukkitToMinecraft(bukkit);
     }
 
     public static Holder<net.minecraft.world.level.biome.Biome> bukkitToMinecraftHolder(Biome bukkit) {
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java
index 6c15d40979fd3e3d246a447c432b321fbf29ada3..2aa1d4ad72fc4842bdda301d9335a3d4f7577f79 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java
@@ -191,7 +191,20 @@ public class CraftVillager extends CraftAbstractVillager implements Villager {
         }
     }
 
-    public static class CraftProfession {
+    public static class CraftProfession extends org.bukkit.craftbukkit.BukkitToNMSMapping<VillagerProfession> implements Profession {
+
+        public CraftProfession(org.bukkit.NamespacedKey key, VillagerProfession handle) {
+            super(key, handle);
+        }
+        @Override
+        public String name() {
+            return this.getKey().getKey();
+        }
+
+        @Override
+        public @org.jetbrains.annotations.NotNull String translationKey() {
+            return "entity.minecraft.villager." + this.getKey().getKey();
+        }
 
         public static Profession minecraftToBukkit(VillagerProfession minecraft) {
             Preconditions.checkArgument(minecraft != null);
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
index d5789326d70bb8b029c5448270bbaa6faf52e6e1..44c1bc92b9cc166fc1f09be7e997c980513a0352 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
@@ -760,7 +760,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
                     continue;
                 }
                 AttributeModifier modifier = (AttributeModifier) o;
-                Attribute attribute = CraftAttribute.stringToBukkit(attributeName);
+                Attribute attribute = Attribute.getAttribute(org.bukkit.NamespacedKey.minecraft(attributeName.toUpperCase(Locale.ROOT))); // MCCLab
                 if (attribute == null) {
                     continue;
                 }
@@ -1852,7 +1852,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
             if (modCollection == null || modCollection.isEmpty()) {
                 continue;
             }
-            mods.put(CraftAttribute.bukkitToString(entry.getKey()), new ArrayList<>(modCollection));
+            mods.put(entry.getKey().getKey().getKey().replace(".", "_"), new ArrayList<>(modCollection)); // MCCLab
         }
         builder.put(key.BUKKIT, mods);
     }
diff --git a/src/test/java/org/bukkit/support/provider/RegistriesArgumentProvider.java b/src/test/java/org/bukkit/support/provider/RegistriesArgumentProvider.java
index 24f01242513d6c815f60599d7118fe12bc577804..98a1173bc6f8bb7ac72504f23ff953ae2ecdf615 100644
--- a/src/test/java/org/bukkit/support/provider/RegistriesArgumentProvider.java
+++ b/src/test/java/org/bukkit/support/provider/RegistriesArgumentProvider.java
@@ -8,12 +8,16 @@ import net.minecraft.core.registries.Registries;
 import net.minecraft.resources.ResourceKey;
 import net.minecraft.world.effect.MobEffect;
 import net.minecraft.world.entity.animal.WolfVariant;
+import net.minecraft.world.entity.schedule.Activity;
+import net.minecraft.world.entity.schedule.Schedule;
 import net.minecraft.world.item.Instrument;
-import org.bukkit.GameEvent;
-import org.bukkit.MusicInstrument;
+import org.bukkit.*;
+import org.bukkit.attribute.Attribute;
+import org.bukkit.block.Biome;
 import org.bukkit.block.BlockType;
-import org.bukkit.craftbukkit.CraftGameEvent;
-import org.bukkit.craftbukkit.CraftMusicInstrument;
+import org.bukkit.craftbukkit.*;
+import org.bukkit.craftbukkit.attribute.CraftAttribute;
+import org.bukkit.craftbukkit.block.CraftBiome;
 import org.bukkit.craftbukkit.block.CraftBlockType;
 import org.bukkit.craftbukkit.damage.CraftDamageType;
 import org.bukkit.craftbukkit.enchantments.CraftEnchantment;
@@ -56,6 +60,11 @@ public class RegistriesArgumentProvider implements ArgumentsProvider {
         register(RegistryKey.ITEM, ItemType.class, Registries.ITEM, CraftItemType.class, net.minecraft.world.item.Item.class, true);
         register(RegistryKey.BLOCK, BlockType.class, Registries.BLOCK, CraftBlockType.class, net.minecraft.world.level.block.Block.class, true);
 
+        register(RegistryKey.ATTRIBUTE, Attribute.class, Registries.ATTRIBUTE, CraftAttribute.class, net.minecraft.world.entity.ai.attributes.Attribute.class);
+        register(RegistryKey.BIOME, Biome.class, Registries.BIOME, CraftBiome.class, net.minecraft.world.level.biome.Biome.class);
+        register(RegistryKey.POI_TYPE, PoiType.class, Registries.POINT_OF_INTEREST_TYPE, CraftPoiType.class, net.minecraft.world.entity.ai.village.poi.PoiType.class);
+        register(RegistryKey.ENTITY_ACTIVITY, EntityActivity.class, Registries.ACTIVITY, CraftEntityActivity.class, Activity.class);
+        register(RegistryKey.ENTITY_SCHEDULE, EntitySchedule.class, Registries.SCHEDULE, CraftEntitySchedule.class, Schedule.class);
     }
 
     private static void register(RegistryKey registryKey, Class bukkit, ResourceKey registry, Class craft, Class minecraft) { // Paper
